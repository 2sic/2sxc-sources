{"version":3,"file":"projects_eav-ui_src_app_app-administration_app-configuration_app-configuration_component_ts.714224f6ba43532b.js","mappings":"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","names":["AppInternalsService","HttpServiceBase","getAppInternals","internals","this","getSignal","params","appid","appId","__ngFactoryType__","factory","ɵfac","AnalyzeParts","Settings","Resources","i0","_r1","ctx_r1","clipboard","copyToClipboard","contentItem","DisplayName","Folder","Version","RequiredVersion","RequiredDnnVersion","RequiredOqtaneVersion","edit","openMetadata","formatValue","tmp_2_0","tmp_4_0","tmp_6_0","tmp_8_0","tmp_10_0","tmp_12_0","tmp_14_0","appSettingsInternal","EntityLists","ToSxcContentApp","length","tmp_15_0","MetadataList","Items","AppConfigurationCardComponent","#appInternalsSvc","#contentItemsSvc","#dialogRouter","constructor","context","snackBar","dialogSettings","input","required","transient","ContentItemsService","DialogRoutingService","getAllSig","eavConstants","contentTypes","appConfiguration","undefined","#refresh","signal","computed","ClipboardService","ngOnInit","doOnDialogClosed","update","value","ngOnDestroy","dismiss","staticName","getAll","subscribe","contentItems","form","Error","items","EditPrep","editId","Id","formUrl","convertFormToUrl","navParentFirstChild","url","GoToMetadata","getUrlApp","Context","App","Name","i1","i2","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","AppConfigurationCardComponent_Conditional_0_Template","MatCardModule","i3","MatIconModule","i4","MatButtonModule","i5","MatBadgeModule","i6","TippyDirective","DocsLinkHelperComponent","styles","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_1_Template","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_2_Template","isGlobal","isPrimary","_r3","systemSettings","SystemSettingsScopes","fixContentType","customSettings","viewModelSig","systemSettingsCount","tmp_5_0","customSettingsCount","customSettingsFieldsCount","_r4","Site","AppConfigurationComponent_Conditional_0_Conditional_23_ng_container_14_Template","goToGlobal_r5","_r6","settings","config","AppConfigurationComponent_Conditional_0_Conditional_24_ng_container_14_Template","AppConfigurationComponent_Conditional_0_Conditional_24_ng_container_15_Template","tmp_7_0","goToSite_r7","_r8","systemResources","customResources","systemResourcesCount","customResourcesCount","customResourcesFieldsCount","_r9","AppConfigurationComponent_Conditional_0_Conditional_54_ng_container_14_Template","_r10","resources","AppConfigurationComponent_Conditional_0_Conditional_55_ng_container_14_Template","AppConfigurationComponent_Conditional_0_Conditional_55_ng_container_15_Template","_r11","openGlobalSettings","_r12","openSiteSettings","AppConfigurationComponent_Conditional_0_Conditional_119_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_119_Conditional_1_Template","isApp","AppConfigurationComponent_Conditional_0_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_22_Template","AppConfigurationComponent_Conditional_0_Conditional_23_Template","AppConfigurationComponent_Conditional_0_Conditional_24_Template","analyze","AppConfigurationComponent_Conditional_0_Conditional_53_Template","AppConfigurationComponent_Conditional_0_Conditional_54_Template","AppConfigurationComponent_Conditional_0_Conditional_55_Template","AppConfigurationComponent_Conditional_0_ng_template_64_Template","AppConfigurationComponent_Conditional_0_ng_template_66_Template","openPermissions","AppConfigurationComponent_Conditional_0_Conditional_119_Template","openLanguagePermissions","langPermsEnabled","getLightSpeedLink","lightSpeedEnabled","tmp_18_0","appLightSpeedCount","Enable","AppPermissions","Permissions","Count","AppConfigurationComponent","#dialogSvc","#contentTypesSvc","#appInternalsService","#contentItemsService","#dialogConfigSvc","matDialog","viewContainerRef","changeDetectorRef","DialogService","ContentTypesService","AppScopes","appSettingsInternal$","Subject","appStateAdvanced","inject","FeaturesScopedService","isEnabled","FeatureNames","LightSpeed","cspEnabled","ContentSecurityPolicy","PermissionsByLanguage","DialogConfigAppService","appIn","appInternalsSig","props","lsTypeName","appMetadata","ContentTypeName","filter","i","_Type","SettingsSystem","SettingsEntityScope","AppSettings","FieldAll","ResourcesSystem","AppResources","getCurrent$","appScope","SettingsScope","Global","systemSettingsScope","systemSettingsEntities","systemSettingsEntity","newFromType","customSettingsEntity","AppAdminHelpers","getLightSpeedEditParams","urlString","urlSubRoute","sitePrimaryApp","PrimaryApp","openAppAdministration","ZoneId","AppId","globalPrimaryApp","System","GoToPermissions","enabled","openFeatureDialog","part","action","retrieveContentTypes","scopes","configuration","some","ct","save","StaticName","Description","Scope","ChangeStaticName","NewStaticName","success","AppConfigurationComponent_Conditional_0_Template","i7","NgTemplateOutlet","FeatureTextInfoComponent","RouterOutlet","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","delete","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-internals.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.models.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Injectable, Signal } from '@angular/core';\r\nimport { AppInternals } from '../../app-administration/models/app-internals.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiRoot = 'admin/appinternals/get';\r\n\r\n@Injectable()\r\nexport class AppInternalsService extends HttpServiceBase {\r\n\r\n  /**\r\n   * Fetches AppInternals for given key\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n\r\n  getAppInternals(internals: AppInternals): Signal<AppInternals> {\r\n    return this.getSignal<AppInternals>(webApiRoot, {\r\n      params: { appid: this.appId }\r\n    }, internals);\r\n  }\r\n\r\n}\r\n","\r\nexport const AnalyzeParts = {\r\n  Settings: 'Settings',\r\n  Resources: 'Resources',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport interface SettingsStackItem {\r\n  Path: string;\r\n  Priority: number;\r\n  Source: string;\r\n  TotalResults: number;\r\n  Type: string;\r\n  Value: string;\r\n  _value: string;\r\n}\r\n","<!-- App Config -->\r\n@if (contentItem()) {\r\n  <mat-card class=\"eav-card\">\r\n    <mat-card-header class=\"eav-card-header\">\r\n      <mat-card-title>Configuration</mat-card-title>\r\n      <mat-icon>redeem</mat-icon>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Name:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].DisplayName)\">{{\r\n            formatValue(contentItem()[0]?.DisplayName)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Folder:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Folder)\">{{\r\n            formatValue(contentItem()[0]?.Folder)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Version:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Version)\">{{\r\n            formatValue(contentItem()[0]?.Version)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">For</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <b>2sxc: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredVersion) }}\r\n          </span>\r\n          <b> DNN: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredDnnVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredDnnVersion) }}\r\n          </span>\r\n          <b> Oqt: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredOqtaneVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredOqtaneVersion) }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <!-- </p> -->\r\n    </mat-card-content>\r\n    <div class=\"eav-card-space-div\"></div>\r\n    <mat-card-actions align=\"start\">\r\n      <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/configuration.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n\r\n      <button mat-button class=\"eav-button__with-icon\" (click)=\"edit()\">\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()()?.EntityLists?.ToSxcContentApp.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >edit</mat-icon\r\n        >\r\n        <span>Edit</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" (click)=\"openMetadata()\">\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()()?.MetadataList.Items.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >local_offer</mat-icon\r\n        >\r\n        <span>Metadata</span>\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, computed, input, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../../content-items/services/content-items.service';\r\nimport { GoToMetadata } from '../../../metadata';\r\nimport { eavConstants } from '../../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../../shared/helpers/url-prep.helper';\r\nimport { DialogSettings } from '../../../shared/models/dialog-settings.model';\r\nimport { EditForm, EditPrep } from '../../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../../shared/routing/dialog-routing.service';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { Context } from '../../../shared/services/context';\r\nimport { AppInternalsService } from '../../services/app-internals.service';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration-card',\r\n  templateUrl: './app-configuration-card.component.html',\r\n  styleUrls: ['./app-configuration-card.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ],\r\n})\r\nexport class AppConfigurationCardComponent implements OnInit, OnDestroy {\r\n  dialogSettings = input.required<DialogSettings>();\r\n\r\n  #appInternalsSvc = transient(AppInternalsService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  contentItem = this.#contentItemsSvc.getAllSig(eavConstants.contentTypes.appConfiguration, undefined);\r\n\r\n  #refresh = signal(0);\r\n\r\n  appSettingsInternal = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#appInternalsSvc.getAppInternals(undefined);\r\n  });\r\n\r\n\r\n  ngOnInit() {\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.#refresh.update(value => value + 1);\r\n    });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  edit() {\r\n    const staticName = eavConstants.contentTypes.appConfiguration;\r\n    this.#contentItemsSvc.getAll(staticName).subscribe(contentItems => {\r\n      let form: EditForm;\r\n\r\n      if (contentItems.length < 1) throw new Error(`Found no settings for type ${staticName}`);\r\n      if (contentItems.length > 1) throw new Error(`Found too many settings for type ${staticName}`);\r\n      form = {\r\n        items: [EditPrep.editId(contentItems[0].Id)],\r\n      };\r\n\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n    });\r\n  }\r\n\r\n  openMetadata() {\r\n    const url = GoToMetadata.getUrlApp(\r\n      this.context.appId,\r\n      `Metadata for App: ${this.dialogSettings().Context.App.Name} (${this.context.appId})`,\r\n    );\r\n    this.#dialogRouter.navParentFirstChild([url]);\r\n  }\r\n\r\n  formatValue(value?: string): string {\r\n    return value === \"\" ? \"-\" : value ?? \"-\";\r\n  }\r\n\r\n}\r\n\r\n","@if (viewModelSig()) {\r\n  @if (isGlobal || isPrimary) {\r\n    <div class=\"alert alert-info scope-info\">\r\n      @if (isGlobal) {\r\n        This is the Global App. Anything configured here will affect all Sites and Apps in this installation.\r\n      }\r\n      @if (isPrimary) {\r\n        This is the Primary App of this Site. You can also configure sitewide settings and resources here.\r\n      }\r\n      See <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n    </div>\r\n  }\r\n  <div class=\"eav-cards-box\">\r\n    <!-- Settings -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Settings</mat-card-title>\r\n        <mat-icon>settings</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Settings are things like SQL-connection strings, default \"items-to-show\" numbers and similar. If necessary, settings like a link\r\n          to an RSS-Feed could be different in each language.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Settings</th>\r\n              <th>Custom Settings</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- Settings for Global App -->\r\n            @if (isGlobal) {\r\n              <tr>\r\n                <th>Global</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit global system settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'edit')\"\r\n                    tippy=\"Edit custom global settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'config')\"\r\n                    tippy=\"Configure fields of the custom global settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            }\r\n            <!-- Settings for Primary App -->\r\n            @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.Site)\"\r\n                    tippy=\"Edit site system settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'edit')\"\r\n                    tippy=\"Edit custom site settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'config')\"\r\n                    tippy=\"Configure fields of the custom site settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Settings for App and Content -->\r\n            @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit app system settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.settings)\" tippy=\"Edit custom app settings\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"config(eavConstants.contentTypes.settings)\"\r\n                    tippy=\"Configure fields of the custom app settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          (click)=\"analyze(AnalyzeParts.Settings)\"\r\n          tippy=\"See the result of combining all settings\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Settings</span>\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Resources -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Language Resources (i18n)</mat-card-title>\r\n        <mat-icon>translate</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Resources are used for labels and things like that in the App. They are usually needed to create multi-lingual views and such, and\r\n          should not be used for App-Settings.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Resources</th>\r\n              <th>Custom Resources</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- Resources for Global App -->\r\n            @if (isGlobal) {\r\n              <tr>\r\n                <th>Global</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit global system resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'edit')\"\r\n                    tippy=\"Edit custom global resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'config')\"\r\n                    tippy=\"Configure fields of the custom global resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            }\r\n            <!-- Resources for Primary App -->\r\n            @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.Site)\"\r\n                    tippy=\"Edit site system resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'edit')\"\r\n                    tippy=\"Edit custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'config')\"\r\n                    tippy=\"Configure fields of the custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Resources for App and Content -->\r\n            @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit app system resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.resources)\" tippy=\"Edit custom app resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"config(eavConstants.contentTypes.resources)\"\r\n                    tippy=\"Configure fields of the custom app resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          (click)=\"analyze(AnalyzeParts.Resources)\"\r\n          tippy=\"See the result of combining all resources\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Resources</span>\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Templates which are re-used in the table above -->\r\n    <ng-template #goToGlobal>\r\n      <tr>\r\n        <th>Global</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openGlobalSettings()\" tippy=\"Go to global\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template #goToSite>\r\n      <tr>\r\n        <th>Site</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openSiteSettings()\" tippy=\"Go to site\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </div>\r\n  <div class=\"eav-cards-box\">\r\n    <app-app-configuration-card [dialogSettings]=\"dialogSettings\"> </app-app-configuration-card>\r\n    <!-- LightSpeed -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Performance</mat-card-title>\r\n        <mat-icon>bolt</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>LightSpeed Output Cache to speed up page by 50-90%</p>\r\n        <app-feature-text-info [featureNameId]=\"'LightSpeedOutputCache'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/lightspeed'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a class=\"default-link\" [href]=\"'#' + getLightSpeedLink()\">\r\n          <button mat-button class=\"eav-button__with-icon\" disabled=\"{{ !lightSpeedEnabled() }}\">\r\n            <mat-icon\r\n              matBadgeColor=\"accent\"\r\n              matBadgeSize=\"small\"\r\n              [matBadge]=\"viewModelSig()?.appLightSpeedCount || null\"\r\n              matBadgePosition=\"below after\"\r\n              aria-hidden=\"false\"\r\n              class=\"eav-icon\"\r\n              >bolt</mat-icon\r\n            >\r\n            <span>Edit LightSpeed</span>\r\n          </button>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Security / CSP -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Security</mat-card-title>\r\n        <mat-icon>local_police</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>ContentSecurityPolicy (CSP) features in this App - for maximum control.</p>\r\n        <app-feature-text-info [featureNameId]=\"'ContentSecurityPolicy'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/csp'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Permissions -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Permissions</mat-card-title>\r\n        <mat-icon>person</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>Give access to the entire app (all data). Use with care.</p>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/permissions.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          [disabled]=\"!dialogSettings.Context.Enable.AppPermissions\"\r\n          (click)=\"openPermissions()\"\r\n        >\r\n          <mat-icon\r\n            matBadgeColor=\"accent\"\r\n            matBadgeSize=\"small\"\r\n            matBadgePosition=\"below after\"\r\n            [matBadge]=\"dialogSettings.Context.App.Permissions.Count || null\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n            >person</mat-icon\r\n          >\r\n          <span>\r\n            Edit Permissions\r\n            @if (!dialogSettings.Context.Enable.AppPermissions) {\r\n              @if (isGlobal) {\r\n                (not on Global App)\r\n              }\r\n              @if (isApp) {\r\n                (not on Content)\r\n              }\r\n            }\r\n          </span>\r\n        </button>\r\n        <app-docs-link-helper\r\n          [link]=\"'https://patrons.2sxc.org/features/feat/PermissionsByLanguage'\"\r\n          [label]=\"\"\r\n          [icon]=\"\"\r\n        ></app-docs-link-helper>\r\n        <button mat-button class=\"eav-button__with-icon\" (click)=\"openLanguagePermissions(langPermsEnabled())\">\r\n          <mat-icon\r\n            [matBadgeHidden]=\"langPermsEnabled()\"\r\n            matBadgeSize=\"small\"\r\n            matBadge=\"💎\"\r\n            matBadgePosition=\"below after\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n          >\r\n            person\r\n          </mat-icon>\r\n          <span>Language Permissions</span>\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n}\r\n<router-outlet></router-outlet>\r\n","import { AsyncPipe, NgTemplateOutlet } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef, computed, inject, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../content-items/services/content-items.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { SystemSettingsScopes, eavConstants } from '../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { AppScopes } from '../../shared/models/dialog-context.models';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { AppAdminHelpers } from '../app-admin-helpers';\r\nimport { ContentTypeEdit } from '../models';\r\nimport { AppInternals } from '../models/app-internals.model';\r\nimport { ContentTypesService } from '../services';\r\nimport { AppInternalsService } from '../services/app-internals.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { AnalyzeParts } from '../sub-dialogs/analyze-settings/analyze-settings.models';\r\nimport { AppConfigurationCardComponent } from './app-configuration-card/app-configuration-card.component';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration',\r\n  templateUrl: './app-configuration.component.html',\r\n  styleUrls: ['./app-configuration.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    NgTemplateOutlet,\r\n    AppConfigurationCardComponent,\r\n    FeatureTextInfoComponent,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ],\r\n})\r\nexport class AppConfigurationComponent implements OnInit, OnDestroy {\r\n\r\n  #dialogSvc = transient(DialogService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n\r\n  dialogSettings: DialogSettings;\r\n\r\n  eavConstants = eavConstants;\r\n  AnalyzeParts = AnalyzeParts;\r\n  SystemSettingsScopes = SystemSettingsScopes;\r\n  AppScopes = AppScopes;\r\n  isGlobal: boolean;\r\n  isPrimary: boolean;\r\n  isApp: boolean;\r\n\r\n  // More proper ViewModel\r\n  appSettingsInternal$ = new Subject<AppInternals>();\r\n\r\n  public appStateAdvanced = false;\r\n  public features = inject(FeaturesScopedService);\r\n\r\n  protected lightSpeedEnabled = this.features.isEnabled[FeatureNames.LightSpeed];\r\n  protected cspEnabled = this.features.isEnabled[FeatureNames.ContentSecurityPolicy];\r\n  protected langPermsEnabled = this.features.isEnabled[FeatureNames.PermissionsByLanguage];\r\n\r\n  #appInternalsService = transient(AppInternalsService);\r\n\r\n  #contentItemsService = transient(ContentItemsService);\r\n\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n\r\n  #refresh = signal(0);\r\n\r\n  appIn = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#appInternalsService.getAppInternals(undefined)\r\n  }\r\n  );\r\n\r\n  viewModelSig = computed(() => {\r\n    const appInternalsSig = this.appIn()();\r\n    if (!appInternalsSig)\r\n      return null;\r\n\r\n    const props = appInternalsSig?.EntityLists;\r\n    const lsTypeName = eavConstants.appMetadata.LightSpeed.ContentTypeName;\r\n\r\n    const result: AppConfigurationViewModel = {\r\n      appLightSpeedCount: appInternalsSig.MetadataList.Items.filter(i => i._Type.Name === lsTypeName).length,\r\n      systemSettingsCount: this.isPrimary\r\n        ? props.SettingsSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.SettingsSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customSettingsCount: props.AppSettings?.length,\r\n      customSettingsFieldsCount: appInternalsSig.FieldAll.AppSettings?.length,\r\n      systemResourcesCount: this.isPrimary\r\n        ? props.ResourcesSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.ResourcesSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customResourcesCount: props.AppResources?.length,\r\n      customResourcesFieldsCount: appInternalsSig?.FieldAll.AppResources?.length,\r\n    };\r\n\r\n    return result;\r\n  });\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.#refresh.update(value => value + 1);\r\n    });\r\n\r\n    this.#dialogConfigSvc.getCurrent$().subscribe((dialogSettings) => {\r\n      this.dialogSettings = dialogSettings;\r\n      const appScope = dialogSettings.Context.App.SettingsScope;\r\n      this.isGlobal = appScope === AppScopes.Global;\r\n      this.isPrimary = appScope === AppScopes.Site;\r\n      this.isApp = appScope === AppScopes.App;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  edit(staticName: string, systemSettingsScope?: Of<typeof SystemSettingsScopes>) {\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      let form: EditForm;\r\n\r\n      switch (staticName) {\r\n        case eavConstants.contentTypes.systemSettings:\r\n        case eavConstants.contentTypes.systemResources:\r\n          const systemSettingsEntities = contentItems.filter(i => systemSettingsScope === SystemSettingsScopes.App\r\n            ? !i.SettingsEntityScope\r\n            : i.SettingsEntityScope === SystemSettingsScopes.Site);\r\n          if (systemSettingsEntities.length > 1) {\r\n            throw new Error(`Found too many settings for type ${staticName}`);\r\n          }\r\n          const systemSettingsEntity = systemSettingsEntities[0];\r\n          form = {\r\n            items: [\r\n              systemSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName, {\r\n                  ...(systemSettingsScope === SystemSettingsScopes.Site && { SettingsEntityScope: SystemSettingsScopes.Site }),\r\n                })\r\n                : EditPrep.editId(systemSettingsEntity.Id)\r\n            ],\r\n          };\r\n          break;\r\n        case eavConstants.contentTypes.customSettings:\r\n        case eavConstants.contentTypes.customResources:\r\n          if (contentItems.length > 1) {\r\n            throw new Error(`Found too many settings for type ${staticName}`);\r\n          }\r\n          const customSettingsEntity = contentItems[0];\r\n          form = {\r\n            items: [\r\n              customSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName)\r\n                : EditPrep.editId(customSettingsEntity.Id)\r\n            ],\r\n          };\r\n          break;\r\n        default:\r\n          if (contentItems.length < 1) throw new Error(`Found no settings for type ${staticName}`);\r\n          if (contentItems.length > 1) throw new Error(`Found too many settings for type ${staticName}`);\r\n          form = {\r\n            items: [EditPrep.editId(contentItems[0].Id)],\r\n          };\r\n      }\r\n\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n    });\r\n  }\r\n\r\n  getLightSpeedLink(): string {\r\n    const form = AppAdminHelpers.getLightSpeedEditParams(this.context.appId);\r\n    const formUrl = convertFormToUrl(form);\r\n    const urlString = `edit/${formUrl}`;\r\n    return this.#dialogRouter.urlSubRoute(urlString);\r\n  }\r\n\r\n  openSiteSettings() {\r\n    const sitePrimaryApp = this.dialogSettings.Context.Site.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(sitePrimaryApp.ZoneId, sitePrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  openGlobalSettings() {\r\n    const globalPrimaryApp = this.dialogSettings.Context.System.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(globalPrimaryApp.ZoneId, globalPrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  config(staticName: string) {\r\n    this.#dialogRouter.navParentFirstChild([`fields/${staticName}`]);\r\n  }\r\n\r\n  openPermissions() {\r\n    this.#dialogRouter.navParentFirstChild([GoToPermissions.getUrlApp(this.context.appId)]);\r\n  }\r\n\r\n  openLanguagePermissions(enabled: boolean) {\r\n    if (enabled)\r\n      this.#dialogRouter.navParentFirstChild(['language-permissions']);\r\n    else\r\n      openFeatureDialog(this.matDialog, FeatureNames.PermissionsByLanguage, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  analyze(part: Of<typeof AnalyzeParts>) {\r\n    this.#dialogRouter.navParentFirstChild([`analyze/${part}`]);\r\n  }\r\n\r\n\r\n  fixContentType(staticName: string, action: 'edit' | 'config') {\r\n    this.#contentTypesSvc.retrieveContentTypes(eavConstants.scopes.configuration.value).subscribe(contentTypes => {\r\n      const contentTypeExists = contentTypes.some(ct => ct.Name === staticName);\r\n      if (contentTypeExists) {\r\n        if (action === 'edit') {\r\n          this.edit(staticName);\r\n        } else if (action === 'config') {\r\n          this.config(staticName);\r\n        }\r\n      } else {\r\n        const newContentType = {\r\n          StaticName: '',\r\n          Name: staticName,\r\n          Description: '',\r\n          Scope: eavConstants.scopes.configuration.value,\r\n          ChangeStaticName: false,\r\n          NewStaticName: '',\r\n        } as ContentTypeEdit;\r\n        this.#contentTypesSvc.save(newContentType).subscribe(success => {\r\n          if (!success) return;\r\n\r\n          if (action === 'edit') {\r\n            this.edit(staticName);\r\n          } else if (action === 'config') {\r\n            this.config(staticName);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nclass AppConfigurationViewModel {\r\n  // Lightspeed\r\n  appLightSpeedCount: number;\r\n\r\n  systemSettingsCount: number;\r\n  customSettingsCount: number;\r\n  customSettingsFieldsCount: number;\r\n  systemResourcesCount: number;\r\n  customResourcesCount: number;\r\n  customResourcesFieldsCount: number;\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[6]}