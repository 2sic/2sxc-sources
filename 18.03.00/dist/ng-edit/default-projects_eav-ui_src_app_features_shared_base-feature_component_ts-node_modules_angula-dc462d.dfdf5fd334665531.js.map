{"version":3,"file":"default-projects_eav-ui_src_app_features_shared_base-feature_component_ts-node_modules_angula-dc462d.dfdf5fd334665531.js","mappings":"mVAiBUA,MADF,UACEA,CADwB,WACSA,MAAA,wBAAoCA,QAEnEA,MADF,UACEA,CAD+B,UACzBA,MAAA,wBAEVA,mCAJmCA,MAAA,GAAAA,MAAA,GAAAA,MAAA,4BAEzBA,MAAA,GAAAA,YAAA,IAAAC,EAAAC,UAAAC,UAAA,kFAORH,MADF,UACEA,CADwB,WACSA,MAAA,WAAKA,QAEpCA,MADF,UACEA,CADyC,YACnCA,MAAA,mBAAAA,MAAAI,GAAA,MAAAH,EAAAD,MAAA,UAAAA,MAASC,EAAAI,UAAAC,gBAA0BL,EAAAC,UAASK,MAAM,GAAEP,MAAA,GAE9DA,qCAF8DA,MAAA,GAAAA,MAAAC,EAAAC,UAAAK,+CAkB9DP,MAAA,cAAyDA,MAAA,mBAAAA,MAAAQ,GAAA,MAAAP,EAAAD,MAAA,UAAAA,MAASC,EAAAQ,OAAAC,QAAc,GAAEV,MAAA,WAAKA,iDA3CzFA,MAFJ,aAEIA,CAFM,oBAENA,CADe,oBACCA,MAAA,GAClBA,UACAA,MAAA,sBACEA,MAAA,6BAGEA,MADF,UACEA,CADwB,WACSA,MAAA,SAAGA,QAElCA,MADF,WACEA,CAD+B,aACzBA,MAAA,mBAAAA,MAAAW,GAAA,MAAAV,EAAAD,QAAA,OAAAA,MAASC,EAAAI,UAAAC,gBAA0BL,EAAAC,UAASU,QAAQ,GAAEZ,MAAA,IAEhEA,YAWAA,MATA,GAAAa,EAAA,YASAb,CAT4B,GAAAc,EAAA,aAmB1Bd,MADF,WACEA,CADwB,YACSA,MAAA,uBAAgBA,QAE/CA,MADF,WACEA,CAD+B,WACzBA,MAAA,IAGZA,cAGIA,MAFJ,wBAEIA,CAF0B,SAE1BA,CADyG,eAC/FA,MAAA,kBAAWA,QACrBA,MAAA,sBACFA,QACAA,MAAA,GAAAe,EAAA,gBAIJf,kCA9CoBA,MAAA,GAAAA,MAAAC,EAAAC,UAAAc,MAGbhB,MAAA,GAAAA,MAAA,YAAAA,MAAA,IAAAC,EAAAC,UAAAe,aAAAjB,OAK6DA,MAAA,GAAAA,MAAAC,EAAAC,UAAAU,QAIhEZ,cAAAC,EAAAiB,UAAAC,WAAA,OASAnB,cAAAC,EAAAiB,UAAAE,SAAA,OAYUpB,MAAA,GAAAA,MAAAC,EAAAC,UAAAmB,SAAAC,OAAA,KAAArB,EAAAC,UAAAmB,SAAAE,SAKPvB,MAAA,GAAAA,MAAA,OAAAC,EAAAC,UAAAsB,KAAAxB,OAIHA,MAAA,GAAAA,MAAA,GAAAC,EAAAiB,UAAAO,UAAA,QCnBC,IAAMC,EAA6B,MAApC,MAAOA,EAGXC,YAC+CC,EACnCnB,GADmCoB,KAAAD,cACnCC,KAAApB,SAJZoB,KAAAC,SAAQC,SAOEF,KAAAX,WAAUc,MAAY,UAAW,IAAOH,KAAKC,SAAWD,KAAKD,aAC7DC,KAAA3B,WAAU8B,MAAY,UAAW,IAAMH,KAAKX,WAAWhB,SACvD2B,KAAAxB,aAAY4B,KAAUC,IAJ5B,iDANOR,GAA6B1B,MAIlBmC,KAAe,GAAAnC,MAAAoC,MAAA,oCAJ1BV,EAA6BW,UAAA,iCAAAC,OAAA,CAAAR,MAAA,aAAAS,YAAA,EAAAC,SAAA,CAAAxC,OAAAyC,MAAA,EAAAC,KAAA,EAAAC,OAAA,6WAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GD1B1C7C,MAAA,EAAA+C,EAAA,uBAAA/C,MAAA8C,EAAA5C,UAAA,qBCkBI8C,KAAaC,yBACbC,KAAeC,UACfC,KAAaC,KAEbC,IACAC,IAAeC,MAAAC,cAAA,YAGN/B,CAA6B,8DCrB1C,MAAMgC,EAAuB,wBAGtB,IAAMC,EAAqB,MAA5B,MAAOA,UAA6BC,IAExCC,iBAAiBjD,GACf,OAAOiB,KAAKiC,UAAmBJ,EAAsB,CACnDK,OAAQ,CAAEnD,WAEd,CAEAoD,kBAAkBC,GAChB,MAAMC,KAAcC,OAAkB,IACtC,UAAWvD,KAAUqD,EACnBpC,KAAKuC,GAAGxD,GAAQyD,UAAUnE,IACxBgE,EAAYI,OAAOC,GAAQ,IAAIA,EAAMrE,GAAQ,GAGjD,OAAOgE,CACT,CAiBAE,GAAGxD,GACD,OAAOiB,KAAK2C,cAAuBd,EAAsB,CACvDK,OAAQ,CAAEnD,WAEd,yEArCW+C,KAAoBc,GAApBd,EAAoB,0CAApBA,EAAoBe,QAApBf,EAAoBgB,WAAA,SAApBhB,CAAqB,6MCPhC3D,MAAA,uCAA4BA,MAAA,QAAAA,MAAA,EAAA4E,EAAA9B,ICcvB,IAAM+B,EAA0B,MAAjC,MAAOA,EACXC,GAEAnD,YACkCoD,EACtBtE,GADsBoB,KAAAkD,aACtBlD,KAAApB,SAJZoB,MAAAiD,KAAoB7C,KAAU0B,KAOpB9B,KAAAmD,eAAiBnD,MAAKiD,EAAkBjB,iBAAiBhC,KAAKkD,YAC9DlD,KAAAxB,aAAY4B,KAAUC,IAH5B,iDANO2C,GAA0B7E,MAI3BmC,MAAenC,MAAAoC,MAAA,oCAJdyC,EAA0BxC,UAAA,8BAAAE,YAAA,EAAAC,SAAA,CAAAxC,OAAAyC,MAAA,EAAAC,KAAA,EAAAC,OAAA,cAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,GDfvC7C,MAAA,EAAAiF,EAAA,+CAAAjF,OAAAkF,EAAApC,EAAAkC,kBAAA,KAAAE,mBCYIxD,KAA6B+B,cAAA,YAGpBoB,CAA0B,mBCJhC,IAAMM,EAAoB,MAA3B,MAAOA,EAQXC,GACAC,GACAC,GACAC,GAEA5D,cAVAE,KAAA2D,cAAgBzD,MAAM0D,WAGtB5D,KAAA6D,UAAS3D,QAAe,GAExBF,MAAAuD,KAAaO,OAAOC,MACpB/D,MAAAwD,KAAoBM,OAAOE,OAC3BhE,MAAAyD,KAAqBK,OAAOG,OAC5BjE,MAAA0D,KAAmBI,OAAOI,KAI1BlE,KAAA3B,WAAU8B,MAAY,UAAW,IAAMH,MAAK0D,EAAiBS,WAAWnE,KAAK2D,kBAE7E3D,KAAAoE,QAAOjE,MAAY,OAAQ,KACzB,MAAMkE,EAAOrE,KAAK3B,UAClB,OAAY,MAARgG,GACGrE,KAAK6D,WAAaQ,GAAM/F,YAAa,IAP9B,CAUhBgG,aACEC,EAAkBvE,MAAKuD,EAAYvD,KAAK2D,gBAAiB3D,MAAKwD,EAAmBxD,MAAKyD,EACxF,iDAzBWH,EAAoB,oCAApBA,EAAoB7C,OAAA,CAAAkD,cAAA,oBAAAE,OAAA,wBAApBP,CAAoB,KA6B3B,SAAUiB,EAAkB3F,EAAmB4F,EAAmBC,EAAoCC,GAC1G9F,EAAO+F,KAAK3B,EAA4B,CACtC4B,WAAW,EACXC,KAAML,EACNC,iBAAkBA,EAClBK,MAAO,UAGTJ,GAAmBK,cACrB,sFC1CA,IAAIC,EAAS,EACb,MAAMC,EAAsB,oBAEtBC,EAAY,IAAIC,IACtB,IAIMC,EAAoB,MAA1B,MAAMA,SACOpF,KAAK8C,UAAI,SAAAF,GAAA,WAAAA,GAA+FwC,EAAoB,CAAqD,QACjLpF,KAAKqF,UADyFlH,MAAE,CAAAmH,KACJF,EAAoB5E,UAAA,mBAAAE,YAAA,EAAAC,SAAA,CADlBxC,OAAEyC,MAAA,EAAAC,KAAA,EAAAE,SAAA,SAAAC,EAAAC,GAAA,EAAAsE,OAAA,srGAAA3D,cAAA,EAAA4D,gBAAA,GAC44G,EACx/G,OAHKJ,CAAoB,KASpBK,EAAQ,MAAd,MAAMA,EAQF,SAAIC,GACA,OAAO1F,KAAK2F,MAChB,CACA,SAAID,CAAME,GACN5F,KAAK6F,UAAUD,GACf5F,KAAK2F,OAASC,CAClB,CAEA,WAAIE,GACA,OAAO9F,KAAK+F,QAChB,CACA,WAAID,CAAQE,GACRhG,KAAKiG,uBAAuBD,EAChC,CAEA,eAAI5G,GACA,OAAOY,KAAKkG,YAChB,CACA,eAAI9G,CAAY+G,GACZnG,KAAKoG,mBAAmBD,EAC5B,CACArG,YAAYuG,EAASC,EAAaC,EAAgBC,EAAWC,GACzDzG,KAAKqG,QAAUA,EACfrG,KAAKsG,YAAcA,EACnBtG,KAAKuG,eAAiBA,EACtBvG,KAAKwG,UAAYA,EACjBxG,KAAKyG,eAAiBA,EACtBzG,KAAK2F,OAAS,UAEd3F,KAAK0G,SAAU,EAKf1G,KAAK2G,SAAW,cAEhB3G,KAAK4G,KAAO,SAEZ5G,KAAK6G,IAAM7B,IAEXhF,KAAK8G,gBAAiB,EAEtB9G,KAAK+G,yBAAwBjD,OAAOkD,MACpChH,KAAKiH,aAAYnD,OAAOoD,MACxB,MAAMC,KAASrD,OAAOsD,OACtB,IAAKlC,EAAUmC,IAAIF,GAAS,CACxBjC,EAAUoC,IAAIH,GACd,MAAMI,KAAeC,OAAgBpC,EAAsB,CACvDqC,uBAAqB3D,OAAO4D,SAEhCP,EAAOQ,UAAU,KACbzC,EAAU0C,OAAOT,GACjBI,EAAaM,SAAQ,EAE7B,CAiBJ,CAEAC,UACI,OAA0C,IAAnC9H,KAAK2G,SAASoB,QAAQ,QACjC,CAEAC,UACI,OAA2C,IAApChI,KAAK2G,SAASoB,QAAQ,SACjC,CAKAE,kBACI,OAAOjI,KAAKkI,aAChB,CACAC,WAIInI,KAAKoI,uBACDpI,KAAK8F,UAAY9F,KAAKkI,gBACtBlI,KAAKkI,cAAgBlI,KAAKqI,sBAC1BrI,KAAKiG,uBAAuBjG,KAAK8F,UAErC9F,KAAK8G,gBAAiB,CAC1B,CACAwB,cAGQtI,KAAKwG,UAAU+B,cACfvI,KAAKwG,UAAU+B,YAAYvI,KAAKkI,eAChClI,KAAKwI,yBAAyBC,UAElCzI,KAAKuG,eAAemC,kBAAkB1I,KAAKsG,YAAYqC,cAAe3I,KAAKZ,YAC/E,CAEAwJ,qBAEI,OAAO5I,KAAK+G,sBAAsB8B,YAAY7I,KAAKsG,YAAYqC,cAAe,CAC1EG,kBAAkB,GAE1B,CAEAT,sBACI,MAAMU,EAAe/I,KAAKwG,UAAUwC,cAAc,QAC5CC,EAAc,mBACpBF,SAAaG,aAAa,KAAM,qBAAqBlJ,KAAK6G,OAG1DkC,EAAaG,aAAa,cAAe,QACzCH,EAAaI,UAAU7B,IAAIrC,GACC,mBAAxBjF,KAAKyG,gBACLsC,EAAaI,UAAU7B,IAAI,2BAE/BtH,KAAKsG,YAAYqC,cAAcS,YAAYL,GAEN,mBAA1BM,uBAAgE,mBAAxBrJ,KAAKyG,eACpDzG,KAAKqG,QAAQiD,kBAAkB,KAC3BD,sBAAsB,KAClBN,EAAaI,UAAU7B,IAAI2B,EAAW,EACzC,GAILF,EAAaI,UAAU7B,IAAI2B,GAExBF,CACX,CAEA9C,uBAAuBD,GACnB,MAAMuD,EAAuB,GAAGvD,GAAc,KAAKwD,OAI/CxJ,KAAK8G,gBAAkByC,IAAyBvJ,KAAKkI,gBACrDlI,KAAKkI,cAAgBlI,KAAKqI,uBAE1BrI,KAAKkI,gBACLlI,KAAKkI,cAAcuB,YAAcF,GAErCvJ,KAAK+F,SAAWwD,CACpB,CAEAnD,mBAAmBD,GAEfnG,KAAKuG,eAAemC,kBAAkB1I,KAAKsG,YAAYqC,cAAe3I,KAAKZ,eAOtE+G,GAAkBnG,KAAK4I,uBACxB5I,KAAK0J,2BAET1J,KAAKkG,aAAeC,EAGhBnG,KAAK4I,qBACL5I,KAAKuG,eAAeoD,SAAS3J,KAAKsG,YAAYqC,cAAexC,GAG7DnG,KAAK4J,0BAEb,CACAA,2BAES5J,KAAKwI,0BACNxI,KAAKwI,wBAA0BxI,KAAKiH,UAAU+B,cAAc,QAC5DhJ,KAAKwI,wBAAwBW,UAAU7B,IAAI,wBAE/CtH,KAAKwI,wBAAwBiB,YAAczJ,KAAKZ,YAChDY,KAAKkI,eAAekB,YAAYpJ,KAAKwI,wBACzC,CACAkB,2BACI1J,KAAKwI,yBAAyBC,SAC9BzI,KAAKwI,6BAA0BqB,CACnC,CAEAhE,UAAUiE,GACN,MAAMX,EAAYnJ,KAAKsG,YAAYqC,cAAcQ,UACjDA,EAAUV,OAAO,aAAazI,KAAK2F,UAC/BmE,GACAX,EAAU7B,IAAI,aAAawC,IAEnC,CAEA1B,uBAGI,MAAM2B,EAAS/J,KAAKsG,YAAYqC,cAAcqB,iBAAiB,aAAa/E,KAC5E,UAAW8D,KAAgBkB,MAAMC,KAAKH,GAC9BhB,IAAiB/I,KAAKkI,eACtBa,EAAaN,QAGzB,QACSzI,KAAK8C,UAAI,SAAAF,GAAA,WAAAA,GAA+F6C,GAjOVtH,MAiOoCA,OAjOpCA,MAiO0DA,OAjO1DA,MAiOoFoC,MAjOpFpC,MAiOiHA,OAjOjHA,MAiO0IgM,MAAqB,IAA8D,QAC3TnK,KAAKoK,UAlOyFjM,MAAE,CAAAmH,KAkOJG,EAAQjF,UAAA,qBAAA6J,UAAA,gBAAAC,SAAA,GAAAC,aAAA,SAAAvJ,EAAAC,GAAA,EAAAD,GAlON7C,MAAE,oBAAA8C,EAAAyF,QAAFvI,CAkOM,kBAAR8C,EAAA6G,UAlOE3J,CAkOM,mBAAP8C,EAAA6G,UAlOC3J,CAkOM,oBAAP8C,EAAA+G,UAlOC7J,CAkOM,kBAAR8C,EAAA+G,UAlOE7J,CAkOM,kBAAC,UAAD8C,EAAA2F,KAlONzI,CAkOM,mBAAC,WAAD8C,EAAA2F,KAlONzI,CAkOM,kBAAC,UAAD8C,EAAA2F,KAlONzI,CAkOM,mBAAA8C,EAAAuJ,SAAAvJ,EAAA6E,QAlON3H,CAkOM,qBAAA8C,EAAAwJ,SAAA,EAAAhK,OAAA,CAAAiF,MAAA,4BAAAgB,QAAA,+BAAmIgE,OAAgBD,SAAA,iCAA8CC,OAAgB/D,SAAA,kCAAAb,QAAA,yBAAA1G,YAAA,wCAAAwH,KAAA,0BAAA4D,OAAA,6BAA2ME,QAAgBhK,YAAA,EAAAC,SAAA,CAlOlbxC,QAkOu6B,EACjhC,OA3NKsH,CAAQ,KA8QRkF,EAAc,MAApB,MAAMA,SACO3K,KAAK8C,UAAI,SAAAF,GAAA,WAAAA,GAA+F+H,EAAc,CAAoD,QAC1K3K,KAAK4K,UAxRyFzM,KAAE,CAAAmH,KAwRSqF,GAAiI,QAC1O3K,KAAK6K,UAzRyF1M,MAAE,CAAA2M,QAAA,CAyRmCC,KAAYC,KAAiBA,OAAqB,EACjM,OAJKL,CAAc,wHCjSkB,MAAA5H,EAAA,2BAAAkI,EAAA,4BAAAC,EAAAlK,EAAAC,GAAA,EAAAD,GAgG8D7C,MAAE,EAExD,OAAAgN,EAAA,oEAAAC,EAAA,4DAAAC,EAAA,sBAAAC,EAAA,cA9F9C,SAASC,EAAeC,GACpB,OAAOA,EAAOlF,YAAYqC,aAC9B,CAAC,IACK8C,EAA+B,MAArC,MAAMA,EACF3L,YAAY4L,EAAUC,GAClB3L,KAAK2L,SAAWA,EAIhB3L,KAAK4L,gBAAiB,EAItB5L,KAAK6L,YAAc,KACnB7L,KAAK8L,QAAUJ,EAASK,IAAIC,EAChC,CACAC,qBACIjM,KAAKkM,SAASC,QAAQ3J,UAAU,KAC5BxC,KAAKoM,mBACLpM,KAAK8L,QAAQO,sBAAqB,GAEtCrM,KAAKoM,kBACT,CACAA,mBACIpM,KAAKkM,SAASI,QAAQ,CAACd,EAAQe,KAC3BvM,KAAK2L,SAASa,SAASjB,EAAeC,GAAS,uBAC/CxL,KAAKyM,mBAAmBlB,EAAeC,GAAS,UAAW,IA5BlD,GA4BuEe,GAAGG,WAAU,EAErG,CACAtI,OACIpE,KAAK2M,sBACL3M,KAAK4L,gBAAiB,EACtB5L,KAAK4M,qBAAuBC,WAAW,KACnC7M,KAAKkM,SAASI,QAAQ,CAACd,EAAQe,KAC3B,IACIO,EADAC,EAAkB,EAEa,UAA/B/M,KAAK8L,QAAQkB,eAEbD,EAAkB,EAAI,GAAKR,EAC3BO,EAAY,YAGZA,EAAY9M,KAAKiN,qBAAqB,KAE1C,MAAMC,EAAc3B,EAAeC,GACnCxL,KAAKyM,mBAAmBS,EAAa,mBAAoBH,EAAgBL,WAAa,MACtF1M,KAAKyM,mBAAmBS,EAAa,UAAW,KAChDlN,KAAKyM,mBAAmBS,EAAa,YAAaJ,EAAS,EAC9D,EACF,GACP,CACAH,sBACIQ,aAAanN,KAAK4M,sBACd5M,KAAK6L,cACL7L,KAAK6L,YAAYuB,cACjBpN,KAAK6L,YAAc,KAE3B,CACAwB,OACIrN,KAAK2M,sBACL,MAAMW,EAAMtN,KAAKkM,SAASqB,IAAI,CAAC/B,EAAQe,KACnC,IAEIO,EAFAU,EAAU,IACVT,EAAkB,EAEa,UAA/B/M,KAAK8L,QAAQkB,eACbD,EAAkB,EAAI,GAAKR,EAC3BO,EAAY,WACZU,EAAU,KAGVV,EAAY9M,KAAKiN,sBAAsB,IAAMV,EAAI,GAAS,EAAJA,GAAOG,WAAa,MAE9E,MAAMQ,EAAc3B,EAAeC,GACnC,OAAAxL,KAAKyM,mBAAmBS,EAAa,mBAAoBH,EAAgBL,WAAa,MACtF1M,KAAKyM,mBAAmBS,EAAa,UAAWM,GAChDxN,KAAKyM,mBAAmBS,EAAa,YAAaJ,IAAS,EACpDW,KAAUP,EAAa,iBAAiBQ,QAAKC,KAAK,GAAE,GAG/D3N,KAAK6L,eAAc+B,KAASN,GAAK9K,UAAU,IAAOxC,KAAK4L,gBAAiB,EAC5E,CACAqB,qBAAqBrH,GACjB,MAAMiI,EAAM7N,KAAK8L,QAAQgC,UAGzB,OAF4B,OAARD,GAAwB,SAARA,EAAiB,aAAe,cAE/C,KADA,SAARA,GAA0B,UAARA,EAAkB,IAAM,IACrBjI,EAAQ,GAC9C,CAEA6G,mBAAmBsB,EAAMC,EAAOpI,GAE5B5F,KAAK2L,SAASsC,SAASF,EAAMC,EAAOpI,EACxC,QACS5F,KAAK8C,UAAI,SAAAF,GAAA,WAAAA,GAAwF6I,GAAVtN,MAA2DA,OAA3DA,MAAmFA,OAAY,CAA8C,QACpO6B,KAAKqF,UADkFlH,MAAE,CAAAmH,KACJmG,EAA+BjL,UAAA,iCAAA0N,eAAA,SAAAlN,EAAAC,EAAAkN,GAA+H,GAA/H,EAAAnN,GAD7B7C,MAAEgQ,EAC0IC,KAAgB,KAAApN,EAAA,KAAAqN,EAD5JlQ,MAAEkQ,EAAFlQ,WAAE8C,EAAAiL,SAAAmC,EAAA,GAAA3N,YAAA,EAAAC,SAAA,CAAFxC,OAAEmQ,mBAAArD,EAAArK,MAAA,EAAAC,KAAA,EAAAE,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAAF7C,MAAE4E,GAAF5E,MAAE,EAAA+M,EAAA,MAC8M,EAAAlK,GADhN7C,MAAE8C,EAAA2K,eAAA,KAGjG,EAAAhK,cAAA,GAAsB,EAC1B,OA7FK6J,CAA+B,KA4G/BO,EAAwB,MAA9B,MAAMA,EAIF,SAAIuC,GACA,OAAOvO,KAAKwO,MAChB,CACA,SAAID,CAAMA,GACNvO,KAAKwO,OAASD,EACdvO,KAAKyO,2BACT,CAIA,QAAI9J,GACA,OAAO3E,KAAK0O,KAChB,CACA,QAAI/J,CAAKA,GACL,MAAMgK,EAAe3O,KAAK0O,MAC1B1O,KAAK0O,MAAQ/J,EACTgK,IAAiB3O,KAAK0O,QACtB1O,KAAK4O,WAAWC,KAAK7O,KAAK0O,OACtB1O,KAAK8O,eACL9O,KAAKqM,uBAGjB,CAIA,aAAIyB,GACA,OAAO9N,KAAK+O,UAChB,CACA,aAAIjB,CAAUA,GACV,MAAMkB,EAAoBhP,KAAK+O,WAC/B/O,KAAK+O,WAAajB,EACdkB,IAAsBhP,KAAK8N,YAC3B9N,KAAKiP,iBAAiBD,GAAmB,GACzChP,KAAKiP,iBAAiBjP,KAAK8N,WAAW,GAClC9N,KAAK8O,eACL9O,KAAKqM,uBAGjB,CAIA,iBAAIW,GACA,OAAOhN,KAAKyG,cAChB,CACA,iBAAIuG,CAAcA,GACd,MAAMkC,EAAwBlP,KAAKyG,eACnCzG,KAAKyG,eAAiBuG,EAClBkC,IAA0BlP,KAAKyG,iBAC/BzG,KAAKiP,iBAAiBC,GAAuB,GAC7ClP,KAAKiP,iBAAiBjP,KAAKgN,eAAe,GACtChN,KAAK8O,eAELK,QAAQC,QAAQ,MAAMC,KAAK,IAAOrP,KAAK2E,MAAO,GAG1D,CACA7E,YAAYwP,EAAY3D,EAAU4D,GAC9BvP,KAAKsP,WAAaA,EAClBtP,KAAK2L,SAAWA,EAChB3L,KAAKuP,SAAWA,EAChBvP,KAAK8O,eAAgB,EACrB9O,KAAK+O,WAAa,KAClB/O,KAAK0O,OAAQ,EACb1O,KAAKyG,eAAiB,QACtBzG,KAAKwO,QAAS,EACdxO,KAAKwP,yBAA2B,KAChCxP,KAAK4O,WAAa,IAAIa,KAC1B,CACAxD,qBACIjM,KAAK8O,eAAgB,EACrB9O,KAAKqM,uBACLrM,KAAKiP,iBAAiBjP,KAAK8N,WAAW,GACtC9N,KAAKiP,iBAAiBjP,KAAKgN,eAAe,EAC9C,CACA1E,cACItI,KAAK0P,6BACT,CAIAC,SACI3P,KAAK2E,MAAQ3E,KAAK2E,IACtB,CACAiL,YACS5P,KAAKuO,OAASvO,KAAK2E,OACpB3E,KAAK2E,MAAO,EAEpB,CACA0H,uBACQrM,KAAK2E,KACL3E,KAAK6P,cAAczL,OAGnBpE,KAAK6P,cAAcxC,OAEvBrN,KAAKyO,2BACT,CACAQ,iBAAiBa,EAAWC,GACxB,MAAMC,EAAa,OAAOF,IACtBC,EACA/P,KAAK2L,SAASa,SAASxM,KAAKsP,WAAW3G,cAAeqH,GAGtDhQ,KAAK2L,SAASsE,YAAYjQ,KAAKsP,WAAW3G,cAAeqH,EAEjE,CACAvB,6BACSzO,KAAKuO,OAASvO,KAAK2E,KACpB3E,KAAKkQ,4BAGLlQ,KAAK0P,6BAEb,CACAQ,4BACSlQ,KAAKwP,2BACNxP,KAAKwP,yBAA2BxP,KAAK2L,SAASwE,OAAOnQ,KAAKuP,SAAU,QAAS,KACzEvP,KAAK2E,MAAO,IAGxB,CACA+K,8BACQ1P,KAAKwP,2BACLxP,KAAKwP,2BACLxP,KAAKwP,yBAA2B,KAExC,QACSxP,KAAK8C,UAAI,SAAAF,GAAA,WAAAA,GAAwFoJ,GAxJV7N,MAwJoDA,OAxJpDA,MAwJ8EA,OAxJ9EA,MAwJuG+I,MAAQ,CAA8C,QACpPlH,KAAKqF,UAzJkFlH,MAAE,CAAAmH,KAyJJ0G,EAAwBxL,UAAA,yBAAA0N,eAAA,SAAAlN,EAAAC,EAAAkN,GAAkY,GAAlY,EAAAnN,GAzJtB7C,MAAEgQ,EAyJuX1C,EAA+B,KAAAzK,EAAA,KAAAqN,EAzJxZlQ,MAAEkQ,EAAFlQ,WAAE8C,EAAA4O,cAAAxB,EAAA+B,MAAA,GAAA9F,SAAA,EAAAC,aAAA,SAAAvJ,EAAAC,GAAA,EAAAD,GAAF7C,MAAE,0BAyJJ8C,EAAA2O,UAAU,GAAc,EAAA5O,GAzJtB7C,MAAE,aAAA8C,EAAA0D,KAyJoB,EAAAlE,OAAA,CAAA8N,MAAA,QAAA5J,KAAA,OAAAmJ,UAAA,YAAAd,cAAA,iBAAAqD,QAAA,CAAAzB,WAAA,cAAAlO,YAAA,EAAAC,SAAA,CAzJtBxC,OAAEmQ,mBAAAlD,EAAAxK,MAAA,EAAAC,KAAA,EAAAC,OAAA,qCAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAAF7C,MAAEgN,GAAFhN,MAAE,WAAFA,MAAE,GAAFA,MAAE,KAAFA,QA6JtF,EAAAoH,OAAA,okJAAA3D,cAAA,GACmoJ,EAChpJ,OA5IKoK,CAAwB,KA4KxBsE,EAA+B,MAArC,MAAMA,EAIF,MAAIC,GACA,OAAOvQ,KAAKwQ,IAChB,CACA1Q,YAAY4L,GACR1L,KAAKwQ,MAAO,EACZxQ,KAAK8L,QAAUJ,EAASK,IAAIC,EAChC,CACA4D,SAASa,GACAzQ,KAAK8L,QAAQyC,QACdvO,KAAK8L,QAAQ6D,SACbc,EAAMC,kBAEd,QACS1Q,KAAK8C,UAAI,SAAAF,GAAA,WAAAA,GAAwF0N,GAhNVnS,MAgN2DA,OAAW,CAA8C,QAC3M6B,KAAKqF,UAjNkFlH,MAAE,CAAAmH,KAiNJgL,EAA+B9P,UAAA,iCAAA8J,SAAA,EAAAC,aAAA,SAAAvJ,EAAAC,GAAA,EAAAD,GAjN7B7C,MAAE,iBAAAwS,GAAA,OAiNJ1P,EAAA2O,SAAAe,EAAgB,GAAe,EAAA3P,GAjN7B7C,MAAE,WAAA8C,EAAAsP,GAiN2B,EAAA9P,OAAA,CAAA+P,KAAA,QAAA9P,YAAA,EAAAC,SAAA,CAjN7BxC,OAAEmQ,mBAAAhD,EAAA1K,MAAA,EAAAC,KAAA,EAAAE,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAAF7C,MAAEkN,GAAFlN,MAAE,GAiNiR,EAAAyD,cAAA,GAAsB,EAC5Y,OAnBK0O,CAA+B","names":["i0","ctx_r1","feature","isEnabled","_r3","clipboard","copyToClipboard","guid","_r4","dialog","close","_r1","nameId","FeatureDetailsDialogComponent_Conditional_0_Conditional_13_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_14_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_26_Template","name","description","mySpecs","showStatus","showGuid","security","Impact","Message","link","showClose","FeatureDetailsDialogComponent","constructor","dialogSpecs","this","specs","input","computedObj","transient","ClipboardService","MAT_DIALOG_DATA","i1","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","FeatureDetailsDialogComponent_Conditional_0_Template","MatCardModule","i2","MatButtonModule","i3","MatIconModule","i4","SafeHtmlPipe","TranslateModule","i5","encapsulation","webApiFeatureDetails","FeatureDetailService","HttpServiceBase","getFeatureDetail","getSignal","params","getFeatureDetails","nameIds","featureList","signal","xx","subscribe","update","prev","getHttpApiUrl","__ngFactoryType__","factory","ɵfac","_c0","FeatureInfoDialogComponent","#featureDetailSvc","dialogData","featureDetails","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0","FeatureComponentBase","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","featureNameId","required","showIf","inject","MatDialog","ViewContainerRef","ChangeDetectorRef","FeaturesScopedService","getCurrent","show","feat","openDialog","openFeatureDialog","featureId","viewContainerRef","changeDetectorRef","open","autoFocus","data","width","markForCheck","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","styles","changeDetection","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","delete","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","booleanAttribute","MatBadgeModule","ɵmod","ɵinj","imports","A11yModule","MatCommonModule","_c1","EcoFabSpeedDialActionsComponent_Conditional_0_Template","_c2","_c3","_c4","_c5","getHostElement","button","EcoFabSpeedDialActionsComponent","injector","renderer","miniFabVisible","hideMiniFab","_parent","get","EcoFabSpeedDialComponent","ngAfterContentInit","_buttons","changes","initButtonStates","setActionsVisibility","forEach","i","addClass","changeElementStyle","toString","resetAnimationState","showMiniFabAnimation","setTimeout","transform","transitionDelay","animationMode","getTranslateFunction","hostElement","clearTimeout","unsubscribe","hide","obs","map","opacity","fromEvent","pipe","take","forkJoin","dir","direction","elem","style","setStyle","contentQueries","dirIndex","MatMiniFabButton","_t","ngContentSelectors","fixed","_fixed","_processOutsideClickState","_open","previousOpen","openChange","emit","isInitialized","_direction","previousDirection","_setElementClass","previousAnimationMode","Promise","resolve","then","elementRef","document","_documentClickUnlistener","EventEmitter","_unsetDocumentClickListener","toggle","_onClick","_childActions","elemClass","isAdd","finalClass","removeClass","_setDocumentClickListener","listen","first","outputs","EcoFabSpeedDialTriggerComponent","sp","spin","event","stopPropagation","$event"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./node_modules/@ecodev/fab-speed-dial/fesm2022/ecodev-fab-speed-dial.mjs"],"sourcesContent":["@if (feature()) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature().name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button class=\"eav-card-action-button\" color=\"accent\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n      @if (mySpecs().showClose != false) {\r\n        <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">Close</button>\r\n      }\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-feature-details-dialog',\r\n  templateUrl: './feature-details-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n    SafeHtmlPipe,\r\n    TranslateModule,\r\n  ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","import { Injectable, signal, Signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBase {\r\n\r\n  getFeatureDetail(nameId: string): Signal<Feature> {\r\n    return this.getSignal<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n\r\n  getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n    const featureList = signal<Feature[]>([]);\r\n    for (const nameId of nameIds) {\r\n      this.xx(nameId).subscribe(feature => {\r\n        featureList.update(prev => [...prev, feature]);\r\n      });\r\n    }\r\n    return featureList;\r\n  }\r\n\r\n  // TODO: Daniel fragen, getFeatureDetails(nameIds: string[]) ist nicht korrekt\r\n  // getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n  //   console.log('getFeatureDetails', nameIds);\r\n  //   const featureList = signal<Feature[]>([]);\r\n  //   for (const nameId of nameIds) {\r\n  //   console.log('getFeatureDetails', nameId);\r\n\r\n\r\n  //     const x = this.getFeatureDetail(nameId) ;\r\n  //     featureList.update(prev => [...prev, x()]);\r\n  //   }\r\n  //   return featureList;\r\n  // }\r\n\r\n  // Remove later\r\n  xx(nameId: string): Observable<Feature> {\r\n    return this.getHttpApiUrl<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n\r\n\r\n\r\n}\r\n","@if (featureDetails(); as feature) {\r\n  <app-feature-details-dialog [specs]=\"{ feature: feature, showGuid: false, showStatus: true, showClose: true }\"></app-feature-details-dialog>\r\n}\r\n","import { Component, Inject } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { transient } from \"projects/core\";\r\nimport { FeatureDetailsDialogComponent } from \"../../apps-management/licence-info/feature-details-dialog/feature-details-dialog.component\";\r\nimport { ClipboardService } from \"../../shared/services/clipboard.service\";\r\nimport { FeatureDetailService } from \"../services/feature-detail.service\";\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    FeatureDetailsDialogComponent\r\n  ]\r\n})\r\nexport class FeatureInfoDialogComponent {\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n  ) { }\r\n\r\n  protected featureDetails = this.#featureDetailSvc.getFeatureDetail(this.dialogData);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesScopedService } from '../features-scoped.service';\r\n\r\n/**\r\n * Base component for various UI components which inform that a feature is not enabled.\r\n * It's meant to show the indicator/warning, and open a dialog with more information about the feature.\r\n */\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesScopedService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n","import * as i0 from '@angular/core';\nimport { Component, ContentChildren, EventEmitter, ViewEncapsulation, Inject, Input, HostBinding, Output, ContentChild, HostListener } from '@angular/core';\nimport { MatMiniFabButton } from '@angular/material/button';\nimport { DOCUMENT } from '@angular/common';\nimport { fromEvent, forkJoin } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst Z_INDEX_ITEM = 23;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getHostElement(button) {\n    return button._elementRef.nativeElement;\n}\nclass EcoFabSpeedDialActionsComponent {\n    constructor(injector, renderer) {\n        this.renderer = renderer;\n        /**\n         * Whether the min-fab button exist in DOM\n         */\n        this.miniFabVisible = false;\n        /**\n         * When we will remove mini-fab buttons from DOM, after the animation is complete\n         */\n        this.hideMiniFab = null;\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n    ngAfterContentInit() {\n        this._buttons.changes.subscribe(() => {\n            this.initButtonStates();\n            this._parent.setActionsVisibility();\n        });\n        this.initButtonStates();\n    }\n    initButtonStates() {\n        this._buttons.forEach((button, i) => {\n            this.renderer.addClass(getHostElement(button), 'eco-fab-action-item');\n            this.changeElementStyle(getHostElement(button), 'z-index', '' + (Z_INDEX_ITEM - i).toString());\n        });\n    }\n    show() {\n        this.resetAnimationState();\n        this.miniFabVisible = true;\n        this.showMiniFabAnimation = setTimeout(() => {\n            this._buttons.forEach((button, i) => {\n                let transitionDelay = 0;\n                let transform;\n                if (this._parent.animationMode === 'scale') {\n                    // Incremental transition delay of 65ms for each action button\n                    transitionDelay = 3 + 65 * i;\n                    transform = 'scale(1)';\n                }\n                else {\n                    transform = this.getTranslateFunction('0');\n                }\n                const hostElement = getHostElement(button);\n                this.changeElementStyle(hostElement, 'transition-delay', transitionDelay.toString() + 'ms');\n                this.changeElementStyle(hostElement, 'opacity', '1');\n                this.changeElementStyle(hostElement, 'transform', transform);\n            });\n        }, 50); // Be sure that @if can show elements before trying to animate them\n    }\n    resetAnimationState() {\n        clearTimeout(this.showMiniFabAnimation);\n        if (this.hideMiniFab) {\n            this.hideMiniFab.unsubscribe();\n            this.hideMiniFab = null;\n        }\n    }\n    hide() {\n        this.resetAnimationState();\n        const obs = this._buttons.map((button, i) => {\n            let opacity = '1';\n            let transitionDelay = 0;\n            let transform;\n            if (this._parent.animationMode === 'scale') {\n                transitionDelay = 3 - 65 * i;\n                transform = 'scale(0)';\n                opacity = '0';\n            }\n            else {\n                transform = this.getTranslateFunction((55 * (i + 1) - i * 5).toString() + 'px');\n            }\n            const hostElement = getHostElement(button);\n            this.changeElementStyle(hostElement, 'transition-delay', transitionDelay.toString() + 'ms');\n            this.changeElementStyle(hostElement, 'opacity', opacity);\n            this.changeElementStyle(hostElement, 'transform', transform);\n            return fromEvent(hostElement, 'transitionend').pipe(take(1));\n        });\n        // Wait for all animation to finish, then destroy their elements\n        this.hideMiniFab = forkJoin(obs).subscribe(() => (this.miniFabVisible = false));\n    }\n    getTranslateFunction(value) {\n        const dir = this._parent.direction;\n        const translateFn = dir === 'up' || dir === 'down' ? 'translateY' : 'translateX';\n        const sign = dir === 'down' || dir === 'right' ? '-' : '';\n        return translateFn + '(' + sign + value + ')';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    changeElementStyle(elem, style, value) {\n        // FIXME - Find a way to create a \"wrapper\" around the action button(s) provided by the user, so we don't change it's style tag\n        this.renderer.setStyle(elem, style, value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.0\", ngImport: i0, type: EcoFabSpeedDialActionsComponent, deps: [{ token: i0.Injector }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.1.0\", type: EcoFabSpeedDialActionsComponent, isStandalone: true, selector: \"eco-fab-speed-dial-actions\", queries: [{ propertyName: \"_buttons\", predicate: MatMiniFabButton }], ngImport: i0, template: `@if (miniFabVisible) {\n        <ng-content select=\"[mat-mini-fab]\" />\n    }`, isInline: true }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.0\", ngImport: i0, type: EcoFabSpeedDialActionsComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'eco-fab-speed-dial-actions',\n                    template: `@if (miniFabVisible) {\n        <ng-content select=\"[mat-mini-fab]\" />\n    }`,\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.Injector }, { type: i0.Renderer2 }], propDecorators: { _buttons: [{\n                type: ContentChildren,\n                args: [MatMiniFabButton]\n            }] } });\n/** @dynamic @see https://github.com/angular/angular/issues/20351#issuecomment-344009887 */\nclass EcoFabSpeedDialComponent {\n    /**\n     * Whether this speed dial is fixed on screen (user cannot change it by clicking)\n     */\n    get fixed() {\n        return this._fixed;\n    }\n    set fixed(fixed) {\n        this._fixed = fixed;\n        this._processOutsideClickState();\n    }\n    /**\n     * Whether this speed dial is opened\n     */\n    get open() {\n        return this._open;\n    }\n    set open(open) {\n        const previousOpen = this._open;\n        this._open = open;\n        if (previousOpen !== this._open) {\n            this.openChange.emit(this._open);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n    /**\n     * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        const previousDirection = this._direction;\n        this._direction = direction;\n        if (previousDirection !== this.direction) {\n            this._setElementClass(previousDirection, false);\n            this._setElementClass(this.direction, true);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n    /**\n     * The animation mode to open the speed dial. Can be 'fling' or 'scale'\n     */\n    get animationMode() {\n        return this._animationMode;\n    }\n    set animationMode(animationMode) {\n        const previousAnimationMode = this._animationMode;\n        this._animationMode = animationMode;\n        if (previousAnimationMode !== this._animationMode) {\n            this._setElementClass(previousAnimationMode, false);\n            this._setElementClass(this.animationMode, true);\n            if (this.isInitialized) {\n                // To start another detect lifecycle and force the \"close\" on the action buttons\n                Promise.resolve(null).then(() => (this.open = false));\n            }\n        }\n    }\n    constructor(elementRef, renderer, document) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.document = document;\n        this.isInitialized = false;\n        this._direction = 'up';\n        this._open = false;\n        this._animationMode = 'fling';\n        this._fixed = false;\n        this._documentClickUnlistener = null;\n        this.openChange = new EventEmitter();\n    }\n    ngAfterContentInit() {\n        this.isInitialized = true;\n        this.setActionsVisibility();\n        this._setElementClass(this.direction, true);\n        this._setElementClass(this.animationMode, true);\n    }\n    ngOnDestroy() {\n        this._unsetDocumentClickListener();\n    }\n    /**\n     * Toggle the open state of this speed dial\n     */\n    toggle() {\n        this.open = !this.open;\n    }\n    _onClick() {\n        if (!this.fixed && this.open) {\n            this.open = false;\n        }\n    }\n    setActionsVisibility() {\n        if (this.open) {\n            this._childActions.show();\n        }\n        else {\n            this._childActions.hide();\n        }\n        this._processOutsideClickState();\n    }\n    _setElementClass(elemClass, isAdd) {\n        const finalClass = `eco-${elemClass}`;\n        if (isAdd) {\n            this.renderer.addClass(this.elementRef.nativeElement, finalClass);\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);\n        }\n    }\n    _processOutsideClickState() {\n        if (!this.fixed && this.open) {\n            this._setDocumentClickListener();\n        }\n        else {\n            this._unsetDocumentClickListener();\n        }\n    }\n    _setDocumentClickListener() {\n        if (!this._documentClickUnlistener) {\n            this._documentClickUnlistener = this.renderer.listen(this.document, 'click', () => {\n                this.open = false;\n            });\n        }\n    }\n    _unsetDocumentClickListener() {\n        if (this._documentClickUnlistener) {\n            this._documentClickUnlistener();\n            this._documentClickUnlistener = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.0\", ngImport: i0, type: EcoFabSpeedDialComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.0\", type: EcoFabSpeedDialComponent, isStandalone: true, selector: \"eco-fab-speed-dial\", inputs: { fixed: \"fixed\", open: \"open\", direction: \"direction\", animationMode: \"animationMode\" }, outputs: { openChange: \"openChange\" }, host: { listeners: { \"click\": \"_onClick()\" }, properties: { \"class.eco-opened\": \"this.open\" } }, queries: [{ propertyName: \"_childActions\", first: true, predicate: EcoFabSpeedDialActionsComponent, descendants: true }], ngImport: i0, template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\" />\n            <ng-content select=\"eco-fab-speed-dial-actions\" />\n        </div>\n    `, isInline: true, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{-webkit-transform:rotate(360deg);transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-align:center;-webkit-align-items:center;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{-webkit-transition:all .6s cubic-bezier(.4,0,.2,1);transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:-webkit-box;display:-webkit-flex;display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;-webkit-transition:all .3s cubic-bezier(.55,0,.55,.2);transition:all .3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{-webkit-transform:scale(0);transform:scale(0);-webkit-transition:all .3s cubic-bezier(.55,0,.55,.2);transition:all .3s cubic-bezier(.55,0,.55,.2);-webkit-transition-duration:.14286s;transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{-webkit-box-ordinal-group:2;-webkit-order:1;order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;flex-direction:column;-webkit-box-ordinal-group:3;-webkit-order:2;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{-webkit-box-ordinal-group:3;-webkit-order:2;order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{-webkit-box-orient:vertical;-webkit-box-direction:reverse;-webkit-flex-direction:column-reverse;flex-direction:column-reverse;-webkit-box-ordinal-group:2;-webkit-order:1;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{-webkit-box-ordinal-group:3;-webkit-order:2;order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row-reverse;flex-direction:row-reverse;-webkit-box-ordinal-group:2;-webkit-order:1;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{-webkit-box-ordinal-group:2;-webkit-order:1;order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;flex-direction:row;-webkit-box-ordinal-group:3;-webkit-order:2;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\\n\"], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.0\", ngImport: i0, type: EcoFabSpeedDialComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'eco-fab-speed-dial', template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\" />\n            <ng-content select=\"eco-fab-speed-dial-actions\" />\n        </div>\n    `, encapsulation: ViewEncapsulation.None, standalone: true, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{-webkit-transform:rotate(360deg);transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-align:center;-webkit-align-items:center;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{-webkit-transition:all .6s cubic-bezier(.4,0,.2,1);transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:-webkit-box;display:-webkit-flex;display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;-webkit-transition:all .3s cubic-bezier(.55,0,.55,.2);transition:all .3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{-webkit-transform:scale(0);transform:scale(0);-webkit-transition:all .3s cubic-bezier(.55,0,.55,.2);transition:all .3s cubic-bezier(.55,0,.55,.2);-webkit-transition-duration:.14286s;transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{-webkit-box-ordinal-group:2;-webkit-order:1;order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;flex-direction:column;-webkit-box-ordinal-group:3;-webkit-order:2;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{-webkit-box-ordinal-group:3;-webkit-order:2;order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{-webkit-box-orient:vertical;-webkit-box-direction:reverse;-webkit-flex-direction:column-reverse;flex-direction:column-reverse;-webkit-box-ordinal-group:2;-webkit-order:1;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{-webkit-box-ordinal-group:3;-webkit-order:2;order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row-reverse;flex-direction:row-reverse;-webkit-box-ordinal-group:2;-webkit-order:1;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{-webkit-box-ordinal-group:2;-webkit-order:1;order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;flex-direction:row;-webkit-box-ordinal-group:3;-webkit-order:2;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { fixed: [{\n                type: Input\n            }], open: [{\n                type: HostBinding,\n                args: ['class.eco-opened']\n            }, {\n                type: Input\n            }], direction: [{\n                type: Input\n            }], animationMode: [{\n                type: Input\n            }], openChange: [{\n                type: Output\n            }], _childActions: [{\n                type: ContentChild,\n                args: [EcoFabSpeedDialActionsComponent]\n            }], _onClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\nclass EcoFabSpeedDialTriggerComponent {\n    /**\n     * Whether this trigger should spin (360dg) while opening the speed dial\n     */\n    get sp() {\n        return this.spin;\n    }\n    constructor(injector) {\n        this.spin = false;\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n    _onClick(event) {\n        if (!this._parent.fixed) {\n            this._parent.toggle();\n            event.stopPropagation();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.1.0\", ngImport: i0, type: EcoFabSpeedDialTriggerComponent, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.1.0\", type: EcoFabSpeedDialTriggerComponent, isStandalone: true, selector: \"eco-fab-speed-dial-trigger\", inputs: { spin: \"spin\" }, host: { listeners: { \"click\": \"_onClick($event)\" }, properties: { \"class.eco-spin\": \"this.sp\" } }, ngImport: i0, template: ` <ng-content select=\"[mat-fab]\" />`, isInline: true }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.1.0\", ngImport: i0, type: EcoFabSpeedDialTriggerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'eco-fab-speed-dial-trigger',\n                    template: ` <ng-content select=\"[mat-fab]\" />`,\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.Injector }], propDecorators: { sp: [{\n                type: HostBinding,\n                args: ['class.eco-spin']\n            }], spin: [{\n                type: Input\n            }], _onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\n/*\n * Public API Surface of fab-speed-dial\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent };\n"],"x_google_ignoreList":[6,7]}