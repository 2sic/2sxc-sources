{"version":3,"file":"projects_eav-ui_src_app_app-administration_data_data_component_ts.f0faa57810a64064.js","mappings":"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","names":["i0","ctx_r0","urlTo","contentType","Metadata","length","Permissions","Count","_r2","do","EditInfo","DisableRename","DisableDelete","DataActionsComponent","agInit","params","this","data","enablePermissions","enablePermissionsGetter","guidRegex","test","StaticName","refresh","verb","selectors","standalone","features","decls","vars","consts","template","rf","ctx","DataActionsComponent_Conditional_1_Template","DataActionsComponent_Conditional_2_Template","DataActionsComponent_Conditional_3_Template","DataActionsComponent_Conditional_4_Template","DataActionsComponent_Conditional_5_Template","DataActionsComponent_Conditional_6_Template","DataActionsComponent_ng_template_12_Template","DisableEdit","Properties","DisableMetadata","menu_r3","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","encapsulation","DataFieldsComponent","value","tooltip","ReadOnly","ReadOnlyMessage","SharedDefId","icon","fieldsUrl","DataItemsComponent","itemsUrl","addItemUrl","styles","scopeOption_r1","name","label","ctx_r2","createGhost","DataComponent","BaseComponent","#snackBar","#contentTypeSvc","#contentExportSvc","#dialogConfigSvc","#dialogRouter","constructor","super","isDebug","inject","GlobalConfigService","MatSnackBar","transient","ContentTypesService","ContentExportService","DialogConfigAppService","DialogRoutingService","contentTypes","signal","undefined","scope","scopeOptions","gridOptions","#buildGridOptions","dropdownInsertValue","ngOnInit","#fetchScopes","#refreshScopeOnRouteChange","doOnDialogClosed","#fetchContentTypes","getCurrent$","subscribe","Context","Enable","AppPermissions","filesDropped","files","importFile","substring","lastIndexOf","toLocaleLowerCase","from","toString","pipe","take","fileString","contentTypeName","split","find","ct","Name","#openDataImport","open","duration","importType","navRelative","state","editContentType","NameId","retrieveContentTypes","_compareLabel","Label","replace","RegExp","set","eavConstants","scopes","default","getScopesV2","scopeList","manual","filter","sOld","sNew","withNiceLabel","map","s","countInfo","typesInherited","typesTotal","sourceName","window","prompt","_","changeScope","newScope","subscriptions","add","router","events","event","NavigationEnd","getParam","startWith","mapUntilChanged","m","option","includes","newScopeOption","typesOfApp","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","cellRendererParams","idFieldParamsTooltipGetter","TextWidePrimary","headerName","field","sort","comparator","valueA","valueB","nodeA","nodeB","isInverted","localeCompare","cellRenderer","p","AgGridHelper","cellLink","#urlTo","Items","#routeAddItem","Fields","TextWideMin100","cellClass","valueGetter","onCellClicked","TextWideFlex3","Description","ActionsPinnedRight4","#routeCreateOrEditMetadata","GoToPermissions","getUrlContentType","GoToMetadata","Id","GoToDevRest","getUrlData","#exportType","#deleteContentType","url","urlSubRoute","convertFormToUrl","items","EditPrep","newFromType","form","editId","newMetadata","metadata","Prefill","#routeMetadata","exportJson","confirm","delete","$event","DataComponent_For_7_Template","DataComponent_Conditional_15_Template","MatDialogActions","MatFormFieldModule","MatSelectModule","FormsModule","MatOptionModule","MatButtonModule","i5","i6","RouterOutlet","SxcGridModule","i7","DragAndDropDirective","fn","distinctUntilChanged","mapUntilObjChanged","isEqual","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵfac","__ngFactoryType__","ɵcmp","type","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.html","./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.html","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.ts","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["<div class=\"actions-component\">\r\n  @if (!contentType.EditInfo.DisableEdit || contentType.Properties) {\r\n    <a class=\"eav-grid-action-button default-link highlight\" matRipple\r\n      tippy=\"Description and more\"\r\n      [href]=\"urlTo('createUpdateMetaData')\"\r\n    >\r\n      <mat-icon>edit</mat-icon>\r\n    </a>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>edit</mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableMetadata) {\r\n    <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Metadata\" [href]=\"urlTo('openMetadata')\">\r\n      <mat-icon [matBadge]=\"contentType.Metadata.length\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" [matBadgeHidden]=\"!contentType.Metadata.length\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"contentType.Metadata.length\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" matBadgeDisabled=\"true\" [matBadgeHidden]=\"!contentType.Metadata.length\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableEdit && enablePermissions) {\r\n    <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Permissions\" [href]=\"urlTo('openPermissions')\">\r\n      <mat-icon [matBadge]=\"contentType.Permissions.Count\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" [matBadgeHidden]=\"!contentType.Permissions.Count\" aria-hidden=\"false\">\r\n      person</mat-icon>\r\n    </a>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"contentType.Permissions.Count\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" matBadgeDisabled=\"true\" [matBadgeHidden]=\"!contentType.Permissions.Count\"\r\n        aria-hidden=\"false\">\r\n      person</mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <a mat-menu-item [disabled]=\"contentType.EditInfo.DisableRename\" [href]=\"urlTo('editContentType')\">\r\n      <mat-icon>settings</mat-icon>\r\n      <span>Rename</span>\r\n    </a>\r\n    <a mat-menu-item [href]=\"urlTo('openRestApi')\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </a>\r\n    <button mat-menu-item (click)=\"do('typeExport')\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export content type</span>\r\n    </button>\r\n    <a mat-menu-item [href]=\"urlTo('dataExport')\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export data</span>\r\n    </a>\r\n    <a mat-menu-item [href]=\"urlTo('dataImport')\">\r\n      <mat-icon>cloud_upload</mat-icon>\r\n      <span>Import data</span>\r\n    </a>\r\n    <button mat-menu-item [disabled]=\"contentType.EditInfo.DisableDelete\" (click)=\"do('deleteContentType')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { guidRegex } from '../../../shared/constants/guid.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models/content-type.model';\r\n\r\ntype GoToUrls = 'createUpdateMetaData'\r\n  | 'openPermissions'\r\n  | 'editContentType'\r\n  | 'openMetadata'\r\n  | 'openRestApi'\r\n  | 'dataExport'\r\n  | 'dataImport';\r\n\r\ntype DataActions = 'typeExport' | 'deleteContentType';\r\n\r\n@Component({\r\n  selector: 'app-data-actions',\r\n  templateUrl: './data-actions.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class DataActionsComponent implements ICellRendererAngularComp {\r\n  contentType: ContentType;\r\n  enablePermissions: boolean;\r\n  public params: {\r\n    enablePermissionsGetter(): boolean;\r\n    do(verb: DataActions, contentType: ContentType): void;\r\n    urlTo(verb: GoToUrls, contentType: ContentType): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & DataActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    const enablePermissions = this.params.enablePermissionsGetter();\r\n    this.enablePermissions = enablePermissions && guidRegex().test(this.contentType.StaticName);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: DataActions): void {\r\n    this.params.do(verb, this.contentType);\r\n  }\r\n\r\n  urlTo(verb: GoToUrls): string {\r\n    return this.params.urlTo(verb, this.contentType);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models/content-type.model';\r\n\r\n@Component({\r\n  selector: 'app-data-fields',\r\n  templateUrl: './data-fields.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class DataFieldsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  tooltip: string;\r\n  icon: string;\r\n\r\n  // TODO: @2pp - change all cases where Ag-Grid has separate interfaces to use this params mechanism\r\n  // 2dm will brief you\r\n  // 1. put type directly on the params (and make public)\r\n  // 2. make type checks (like in agInit) use this, as well as the type checks in the grid-definitions\r\n  // 3. where simple, call it directly from the HTML, don't create more methods which just call this again\r\n  public params: {\r\n    fieldsUrl(contentType: ContentType): string;\r\n  };\r\n  protected contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataFieldsComponent[\"params\"]): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n    this.tooltip = !this.contentType.EditInfo.ReadOnly\r\n      ? 'Edit fields'\r\n      : `${this.contentType.EditInfo.ReadOnlyMessage ? `${this.contentType.EditInfo.ReadOnlyMessage}\\n\\n` : ''}This ContentType shares the definition of #${this.contentType.SharedDefId} so you can't edit it here. Read 2sxc.org/help?tag=shared-types`;\r\n    this.icon = !this.contentType.EditInfo.ReadOnly ? 'dns' : 'share';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple [tippy]=\"tooltip\" [href]=\"params.fieldsUrl(contentType)\">\r\n    <mat-icon [matBadge]=\"value\" matBadgePosition=\"below after\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!value\" aria-hidden=\"false\">\r\n      {{icon}}\r\n    </mat-icon>\r\n  </a>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-data-items',\r\n  templateUrl: './data-items.component.html',\r\n  styleUrls: ['./data-items.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class DataItemsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  \r\n  /** Params, directly typed here and anywhere it's used should use this type definition */\r\n  public params: {\r\n    addItemUrl(contentType: ContentType): string;\r\n    itemsUrl(contentType: ContentType): string;\r\n  };\r\n\r\n  protected contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataItemsComponent[\"params\"]): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"{{ value }} items\" [href]=\"params.itemsUrl(contentType)\">\r\n    <div class=\"text-icon\">{{ value }}</div>\r\n  </a>\r\n\r\n  <!-- TODO: fix color again -->\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Add item\" [href]=\"params.addItemUrl(contentType)\">\r\n    <mat-icon>add</mat-icon>\r\n  </a>\r\n</div>","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"contentTypes()\" [gridOptions]=\"gridOptions\" appDragAndDrop\r\n    [allowedFileTypes]=\"'xml,json'\" (filesDropped)=\"filesDropped($event)\">\r\n  </ag-grid-angular>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field eav-scope-dropdown\">\r\n        <mat-select [ngModel]=\"scope()\" name=\"Scope\" (ngModelChange)=\"changeScope($event)\">\r\n          @for (scopeOption of (scopeOptions()); track scopeOption) {\r\n          <mat-option [value]=\"scopeOption.name\">\r\n            {{ 'Scope: ' + scopeOption.label }}\r\n          </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Scope: Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import content type\" (click)=\"importType()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Content Type</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Create a ghost content type\"\r\n        (click)=\"createGhost()\">\r\n        <mat-icon class=\"eav-icon\">share</mat-icon>\r\n        <span>Ghost</span>\r\n      </button>\r\n      }\r\n    </div>\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new content type\"\r\n      (click)=\"editContentType(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, inject, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { NavigationEnd, RouterOutlet } from '@angular/router';\r\nimport { filter, from, map, startWith, take } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../../content-import/content-import-dialog.config';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { AgGridHelper } from '../../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { toString } from '../../shared/helpers/file-to-base64.helper';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\nimport { ContentType } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { ContentTypesService } from '../services/content-types.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { DataActionsComponent } from './data-actions/data-actions.component';\r\nimport { DataFieldsComponent } from './data-fields/data-fields.component';\r\nimport { DataItemsComponent } from './data-items/data-items.component';\r\n\r\n@Component({\r\n  selector: 'app-data',\r\n  templateUrl: './data.component.html',\r\n  styleUrls: ['./data.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n    DragAndDropDirective,\r\n  ],\r\n})\r\nexport class DataComponent extends BaseComponent implements OnInit, OnDestroy {\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n  #snackBar = inject(MatSnackBar);\r\n\r\n  #contentTypeSvc = transient(ContentTypesService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor() { super(); }\r\n\r\n  contentTypes = signal<ContentType[]>(undefined);\r\n  scope = signal<string>(undefined);\r\n  scopeOptions = signal<ScopeDetailsDto[]>([]);\r\n\r\n  /** Possible scopes - the ones from the backend + manually entered scopes by the current user */\r\n  gridOptions = this.#buildGridOptions();\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  enablePermissions!: boolean;\r\n\r\n  ngOnInit() {\r\n    this.#fetchScopes();\r\n    this.#refreshScopeOnRouteChange();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#fetchContentTypes());\r\n\r\n    this.#dialogConfigSvc.getCurrent$().subscribe(data => {\r\n      this.enablePermissions = data.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        from(toString(files[0])).pipe(take(1)).subscribe(fileString => {\r\n          const contentTypeName = fileString.split('<Entity Type=\"')[1]?.split('\"')[0];\r\n          const contentType = this.contentTypes().find(ct => ct.Name === contentTypeName);\r\n          if (contentType == null) {\r\n            const message = `Cannot find Content Type named '${contentTypeName}'. Please open Content Type Import dialog manually.`;\r\n            this.#snackBar.open(message, null, { duration: 5000 });\r\n            return;\r\n          }\r\n          this.#openDataImport(contentType, files);\r\n        });\r\n        break;\r\n      case 'json':\r\n        this.importType(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importType(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  editContentType(contentType: ContentType) {\r\n    if (!contentType) {\r\n      this.#dialogRouter.navRelative(['add']);\r\n    } else {\r\n      if (contentType.EditInfo.ReadOnly) return;\r\n      this.#dialogRouter.navRelative([`${contentType.NameId}/edit`]);\r\n    }\r\n  }\r\n\r\n  #fetchContentTypes() {\r\n    this.#contentTypeSvc.retrieveContentTypes(this.scope()).subscribe(contentTypes => {\r\n      for (const contentType of contentTypes) {\r\n        contentType._compareLabel = contentType.Label.replace(/\\p{Emoji}/gu, 'ž');\r\n      }\r\n      this.contentTypes.set(contentTypes);\r\n      if (this.scope() !== eavConstants.scopes.default.value) {\r\n        const message = 'Warning! You are in a special scope. Changing things here could easily break functionality';\r\n        this.#snackBar.open(message, null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  #fetchScopes() {\r\n    this.#contentTypeSvc.getScopesV2().subscribe(scopeList => {\r\n      // Merge the new scopes with the existing ones - in case there were manual scopes added\r\n      // If old scope list had a manual scope which the server didn't send, re-add it here\r\n      const manual = this.scopeOptions()\r\n        .filter(sOld => scopeList.find(sNew => sNew.name === sOld.name) == null);\r\n\r\n      // Add a nice label to each scope containing count-information of types\r\n      const withNiceLabel = scopeList.map(s => {\r\n        let countInfo = !s.typesInherited\r\n          ? `${s.typesTotal} types`               // only not-inherited\r\n          : (s.typesInherited == s.typesTotal)\r\n            ? s.typesInherited + ' sys types'     // only inherited\r\n            : `${s.typesTotal} types / ${s.typesInherited} system`;\r\n        return ({ ...s, label: s.name + ` - ${countInfo}` });\r\n      });\r\n\r\n      this.scopeOptions.set([...withNiceLabel, ...manual]);\r\n    });\r\n  }\r\n\r\n  createGhost() {\r\n    const sourceName = window.prompt('To create a ghost content-type enter source static name / id - this is a very advanced operation - read more about it on 2sxc.org/help?tag=ghost');\r\n    if (!sourceName) return;\r\n    this.#snackBar.open('Saving...');\r\n    this.#contentTypeSvc.createGhost(sourceName).subscribe(_ => {\r\n      this.#snackBar.open('Saved', null, { duration: 2000 });\r\n      this.#fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n    }\r\n    this.#dialogRouter.navRelative(['..', newScope]);\r\n  }\r\n\r\n  /**\r\n   * Refreshes the scope when the route changes.\r\n   * ...also adds a scope name if the route scope is not found in the list of possible scopes.\r\n   * This is to allow an admin to enter a custom scope.\r\n   * Note 2024-03-04 2dm - not sure if this auto-add feature is still needed though...\r\n   */\r\n  #refreshScopeOnRouteChange() {\r\n    this.subscriptions.add(\r\n      this.#dialogRouter.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        map(() => this.#dialogRouter.getParam('scope')),\r\n        startWith(this.#dialogRouter.getParam('scope')),\r\n        filter(scope => !!scope),\r\n        mapUntilChanged(m => m),\r\n      ).subscribe(scope => {\r\n        this.scope.set(scope);\r\n\r\n        // If we can't find the scope in the list of options, add it as it was entered manually\r\n        if (!this.scopeOptions().map(option => option.name).includes(scope)) {\r\n          const newScopeOption: ScopeDetailsDto = {\r\n            name: scope,\r\n            label: scope,\r\n            typesTotal: 0,\r\n            typesInherited: 0,\r\n            typesOfApp: 0,\r\n          };\r\n          this.scopeOptions.set([...this.scopeOptions(), newScopeOption]);\r\n        }\r\n        this.#fetchContentTypes();\r\n      })\r\n    );\r\n  }\r\n\r\n  //#region Grid\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentType>('StaticName'),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'ContentType',\r\n          field: 'Label',\r\n          sort: 'asc',\r\n          comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {\r\n            const contentTypeA: ContentType = nodeA.data;\r\n            const contentTypeB: ContentType = nodeB.data;\r\n            return contentTypeA._compareLabel.localeCompare(contentTypeB._compareLabel);\r\n          },\r\n          cellRenderer: (p: { data: ContentType }) => AgGridHelper.cellLink(this.#urlTo(`items/${p.data.NameId}`), p.data.Label),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Items,\r\n          field: 'Items',\r\n          cellRenderer: DataItemsComponent,\r\n          cellRendererParams: ({\r\n            addItemUrl: (ct) => this.#urlTo(`edit/${this.#routeAddItem(ct)}`),\r\n            itemsUrl: (ct) => this.#urlTo(`items/${ct.NameId}`),\r\n          } satisfies DataItemsComponent[\"params\"]),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Fields,\r\n          field: 'Fields',\r\n          cellRenderer: DataFieldsComponent,\r\n          cellRendererParams: ({\r\n            fieldsUrl: (contentType) => this.#urlTo(`fields/${contentType.NameId}`),\r\n          } satisfies DataFieldsComponent[\"params\"]),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideMin100,\r\n          field: 'Name',\r\n          cellClass: (p) => `${p.data.EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' '),\r\n          valueGetter: (p: { data: ContentType }) => p.data?.Name,\r\n          onCellClicked: (p) => this.editContentType(p.data),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n          valueGetter: (p: { data: ContentType }) => p.data?.Properties?.Description,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: DataActionsComponent,\r\n          cellRendererParams: ({\r\n            enablePermissionsGetter: () => this.enablePermissions,\r\n            urlTo: (verb, ct) => {\r\n              switch (verb) {\r\n                case 'createUpdateMetaData': return this.#urlTo(`edit/${this.#routeCreateOrEditMetadata(ct)}`);\r\n                case 'openPermissions': return this.#urlTo(GoToPermissions.getUrlContentType(ct.NameId));\r\n                case 'editContentType': return this.#urlTo(ct.EditInfo.ReadOnly ? '' : `${ct.NameId}/edit`);\r\n                case 'openMetadata': return this.#urlTo(GoToMetadata.getUrlContentType(ct.NameId, `Metadata for Content Type: ${ct.Name} (${ct.Id})`));\r\n                case 'openRestApi': return this.#urlTo(GoToDevRest.getUrlData(ct));\r\n                case 'dataExport': return this.#urlTo(`export/${ct.NameId}`);\r\n                case 'dataImport': return this.#urlTo(`${ct.NameId}/import`);\r\n              }\r\n            },\r\n            do: (verb, ct) => {\r\n              switch (verb) {\r\n                // case 'createUpdateMetaData': this.#createOrEditMetadata(contentType); break;\r\n                // case 'openPermissions': this.#openPermissions(contentType); break;\r\n                // case 'editContentType': this.editContentType(contentType); break;\r\n                // case 'openMetadata': this.#openMetadata(contentType); break;\r\n                // case 'openRestApi': this.#openRestApi(contentType); break;\r\n                case 'typeExport': this.#exportType(ct); break;\r\n                // case 'dataExport': this.#openDataExport(contentType); break;\r\n                // case 'dataImport': this.#openDataImport(contentType); break;\r\n                case 'deleteContentType': this.#deleteContentType(ct); break;\r\n              }\r\n            }\r\n          } satisfies DataActionsComponent['params']),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Actions in the grid\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #routeAddItem(contentType: ContentType): string {\r\n    return convertFormToUrl({\r\n      items: [EditPrep.newFromType(contentType.NameId)],\r\n    } satisfies EditForm);\r\n  }\r\n\r\n  #routeCreateOrEditMetadata(contentType: ContentType): string {\r\n    const form: EditForm = {\r\n      items: [\r\n        !contentType.Properties\r\n          ? {\r\n              ...EditPrep.newMetadata(contentType.NameId, eavConstants.contentTypes.contentType, eavConstants.metadata.contentType),\r\n              Prefill: {\r\n                Label: contentType.Name,\r\n                Description: contentType.Description\r\n              },\r\n            }\r\n          : EditPrep.editId(contentType.Properties.Id),\r\n      ],\r\n    };\r\n    return convertFormToUrl(form);\r\n  }\r\n\r\n\r\n  // #createOrEditMetadata(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([`edit/${this.#routeCreateOrEditMetadata(contentType)}`]);\r\n  // }\r\n\r\n  // #openPermissions(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([GoToPermissions.getUrlContentType(contentType.NameId)]);\r\n  // }\r\n\r\n  #routeMetadata(ct: ContentType) {\r\n    return GoToMetadata.getUrlContentType(ct.NameId, `Metadata for Content Type: ${ct.Name} (${ct.Id})`);\r\n  }\r\n\r\n  // #openMetadata(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([this.#routeMetadata(contentType)]);\r\n  // }\r\n\r\n  // #openRestApi(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([GoToDevRest.getUrlData(contentType)]);\r\n  // }\r\n\r\n  #exportType(contentType: ContentType) {\r\n    this.#contentExportSvc.exportJson(contentType.NameId);\r\n  }\r\n\r\n  // #openDataExport(contentType: ContentType) {\r\n  //   this.#dialogRouter.navRelative([`export/${contentType.NameId}`]);\r\n  // }\r\n\r\n  #openDataImport(contentType: ContentType, files?: File[]) {\r\n    this.#dialogRouter.navRelative([`${contentType.NameId}/import`], { state: { files } satisfies ContentImportDialogData });\r\n  }\r\n\r\n  #deleteContentType(contentType: ContentType) {\r\n    if (!confirm(`Are you sure you want to delete '${contentType.Name}' (${contentType.Id})?`)) return;\r\n    this.#snackBar.open('Deleting...');\r\n    this.#contentTypeSvc.delete(contentType).subscribe(_ => {\r\n      this.#snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[9]}