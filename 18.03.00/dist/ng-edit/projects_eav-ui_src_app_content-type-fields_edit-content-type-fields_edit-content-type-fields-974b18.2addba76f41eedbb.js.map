{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fields-974b18.2addba76f41eedbb.js","mappings":"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","names":["dataTypeLabels","Boolean","label","calculateTypeLabel","DataTypeCatalog","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","i0","ctx_r1","fieldNameError","staticName_r5","errors","reservedNames","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Conditional_0_Template","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Conditional_1_Template","pattern","dataType_r7","name","icon","option_r8","EditContentTypeFieldsComponent_Conditional_6_For_4_For_34_Conditional_4_Template","inputType","_c2","isObsolete","$event","field_r4","_r3","$implicit","StaticName","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Template","Éµ$index_19_r6","$index","filterInputTypeOptions","resetInputType","calculateHints","Type","EditContentTypeFieldsComponent_Conditional_6_For_4_For_20_Template","InputType","EditContentTypeFieldsComponent_Conditional_6_For_4_For_34_Template","fieldNamePattern","editMode","touched","findIcon","findLabel","dataTypes","dataTypeHints","tmp_31_0","getInputTypeOption","tmp_32_0","filteredInputTypeOptions","inputTypeHints","_r1","save","EditContentTypeFieldsComponent_Conditional_6_For_4_Template","dialog","close","fields","ngForm_r9","form","valid","saving$","EditContentTypeFieldsComponent","BaseComponent","#contentType","#inputTypeOptions","#contentTypesSvc","#contentTypesFieldsSvc","constructor","route","snackBar","super","this","hostClass","calculateTypeIcon","loading$","BehaviorSubject","transient","ContentTypesService","ContentTypesFieldsService","disableClose","subscriptions","add","backdropClick","subscribe","event","dirty","confirm","ngAfterViewInit","autoFocusInputField","setTimeout","first","nativeElement","focus","trackField","index","field","ngOnInit","snapshot","paramMap","get","contentTypeStaticName","contentType$","retrieveContentType","pipe","share","fields$","switchMap","contentType","getFields","dataTypes$","typeListRetrieve","map","rawDataTypes","calculateDataTypes","rawDataType","push","inputTypes$","getInputTypesList","reservedNames$","getReservedNames","forkJoin","inputTypes","ReservedNamesValidatorDirective","mergeReserved","editFieldId","parseInt","editField","find","Id","i","InputTypeCatalog","StringDefault","IsTitle","length","SortOrder","next","ngOnDestroy","complete","filter","option","dataType","toLocaleLowerCase","defaultInputType","DefaultSuffix","some","selectedDataType","selectedInputType","inputTypeOption","obsoleteMessage","inputName","open","doneAndClose","duration","rename","updateInputType","of","concatMap","catchError","error","toArray","i1","i2","i3","selectors","viewQuery","rf","ctx","NgForm","EditContentTypeFieldsComponent_Conditional_3_Template","EditContentTypeFieldsComponent_Conditional_4_Template","EditContentTypeFieldsComponent_Conditional_5_Template","EditContentTypeFieldsComponent_Conditional_6_Template","undefined","FormsModule","i4","MatFormFieldModule","i5","MatInputModule","i6","MatSelectModule","i7","i8","MatIconModule","i9","MatOptionModule","NgClass","MatDialogActions","MatButtonModule","i10","AsyncPipe","TranslateModule","FieldHintComponent","styles","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","input","isShort","toggleIsShort","inputs","standalone","features","ngContentSelectors","_c0","decls","vars","consts","template","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","NgTemplateOutlet","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","reduce","accumulator","seed","operate","scanInternals","arguments"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js"],"sourcesContent":["import { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: calculateTypeLabel(DataTypeCatalog.Boolean), description: 'Yes/no or true/false values' },\r\n  Custom: { label: calculateTypeLabel(DataTypeCatalog.Custom), description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: calculateTypeLabel(DataTypeCatalog.DateTime), description: 'For date, time or combined values' },\r\n  Empty: { label: calculateTypeLabel(DataTypeCatalog.Empty), description: 'Use to structure your form' },\r\n  Entity: { label: calculateTypeLabel(DataTypeCatalog.Entity), description: 'One or more other content-items' },\r\n  Hyperlink: { label: calculateTypeLabel(DataTypeCatalog.Hyperlink), description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: calculateTypeLabel(DataTypeCatalog.Number), description: 'Any kind of number' },\r\n  String: { label: calculateTypeLabel(DataTypeCatalog.String), description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      @if (editMode === undefined) {\r\n        Fields\r\n      }\r\n      @if (editMode === null) {\r\n        Add Fields\r\n      }\r\n      @if (editMode != null) {\r\n        Edit Field\r\n      }\r\n    </div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n    <form #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n      <div class=\"eav-dialog-content\">\r\n        @for (field of fields; track field; let i = $index) {\r\n          <div class=\"eav-row-container\">\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Name</mat-label>\r\n                <input\r\n                  matInput\r\n                  [pattern]=\"fieldNamePattern\"\r\n                  [appReservedNames]=\"reservedNames\"\r\n                  [(ngModel)]=\"field.StaticName\"\r\n                  [name]=\"'StaticName' + i\"\r\n                  #staticName=\"ngModel\"\r\n                  [disabled]=\"editMode === 'inputType'\"\r\n                  #autoFocusInputField\r\n                />\r\n              </mat-form-field>\r\n              @if (staticName.touched && staticName.errors) {\r\n                @if (staticName.errors.pattern) {\r\n                  <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                }\r\n                @if (staticName.errors.reservedNames) {\r\n                  <app-field-hint [isError]=\"true\">\r\n                    {{ staticName.errors.reservedNames }}\r\n                  </app-field-hint>\r\n                }\r\n              }\r\n            </div>\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Data Type</mat-label>\r\n                <mat-select\r\n                  (selectionChange)=\"filterInputTypeOptions(i); resetInputType(i); calculateHints(i)\"\r\n                  [(ngModel)]=\"field.Type\"\r\n                  [name]=\"'Type' + i\"\r\n                  [disabled]=\"editMode != null\"\r\n                >\r\n                  <mat-select-trigger>\r\n                    <mat-icon class=\"eav-type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n                    <span>{{ findLabel(field.Type) }}</span>\r\n                  </mat-select-trigger>\r\n                  @for (dataType of dataTypes; track dataType) {\r\n                    <mat-option [value]=\"dataType.name\">\r\n                      <mat-icon class=\"eav-type-icon\">{{ dataType.icon }}</mat-icon>\r\n                      <span>{{ dataType.label }}</span>\r\n                    </mat-option>\r\n                  }\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n            </div>\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Input Type</mat-label>\r\n                <mat-select\r\n                  (selectionChange)=\"calculateHints(i)\"\r\n                  [(ngModel)]=\"field.InputType\"\r\n                  [name]=\"'InputType' + i\"\r\n                  [disabled]=\"editMode === 'name'\"\r\n                >\r\n                  <mat-select-trigger>\r\n                    <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n                    <mat-icon class=\"eav-input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n                  </mat-select-trigger>\r\n                  @for (option of filteredInputTypeOptions[i]; track option) {\r\n                    <mat-option [value]=\"option.inputType\" [ngClass]=\"{ 'eav-input-obsolete': option.isObsolete }\">\r\n                      <!-- div is needed here because <mat-option> by default puts mat-icon on the first place if it exists -->\r\n                      <div>\r\n                        <span>{{ option.label }}</span>\r\n                        @if (option.icon) {\r\n                          <mat-icon class=\"eav-input-icon\">{{ option.icon }}</mat-icon>\r\n                        }\r\n                      </div>\r\n                    </mat-option>\r\n                  }\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      <!-- Save / cancel buttons -->\r\n      <mat-dialog-actions>\r\n        <div class=\"spacer\"></div>\r\n        <button mat-raised-button type=\"button\" (click)=\"dialog.close()\">Cancel</button>\r\n        <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || (saving$ | async)\">Save</button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>\r\n","import { AsyncPipe, NgClass } from '@angular/common';\r\nimport { AfterViewInit, Component, ElementRef, HostBinding, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { BehaviorSubject, catchError, concatMap, filter, forkJoin, map, of, share, switchMap, toArray } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { Field, FieldInputTypeOption } from '../../shared/fields/field.model';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\nimport { ReservedNamesValidatorDirective } from './reserved-names.directive';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatOptionModule,\r\n    NgClass,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    FieldHintComponent,\r\n  ],\r\n})\r\nexport class EditContentTypeFieldsComponent extends BaseComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n  @ViewChildren('autoFocusInputField') autoFocusInputField!: QueryList<ElementRef>;\r\n\r\n  fields: Partial<Field>[] = [];\r\n  reservedNames: Record<string, string> = {};\r\n  editMode: 'name' | 'inputType';\r\n  dataTypes: DataType[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  findLabel = calculateTypeLabel;\r\n  loading$ = new BehaviorSubject(true);\r\n  saving$ = new BehaviorSubject(false);\r\n\r\n  #contentType: ContentType;\r\n  #inputTypeOptions: FieldInputTypeOption[];\r\n\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected dialog: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    // private matDialog: MatDialog,\r\n  ) {\r\n    super();\r\n    this.dialog.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialog.backdropClick().subscribe(event => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.dialog.close();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Wait for the inputFields to be available\r\n    if (this.autoFocusInputField) {\r\n      setTimeout(() => {\r\n        this.autoFocusInputField.first.nativeElement.focus();\r\n      }, 250); // Delay execution to ensure the view is fully rendered\r\n    }\r\n  }\r\n\r\n  trackField(index: number, field: any): any {\r\n    return field.StaticName; // Replace with your unique field identifier\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n    const contentType$ = this.#contentTypesSvc.retrieveContentType(contentTypeStaticName).pipe(share());\r\n    const fields$ = contentType$.pipe(switchMap(contentType => this.#contentTypesFieldsSvc.getFields(contentType.StaticName)));\r\n    const dataTypes$ = this.#contentTypesFieldsSvc.typeListRetrieve().pipe(map(rawDataTypes => calculateDataTypes(rawDataTypes)));\r\n    const inputTypes$ = this.#contentTypesFieldsSvc.getInputTypesList();\r\n    const reservedNames$ = this.#contentTypesFieldsSvc.getReservedNames();\r\n\r\n    forkJoin([contentType$, fields$, dataTypes$, inputTypes$, reservedNames$]).subscribe(\r\n      ([contentType, fields, dataTypes, inputTypes, reservedNames]) => {\r\n        this.#contentType = contentType;\r\n        this.dataTypes = dataTypes;\r\n        this.#inputTypeOptions = inputTypes;\r\n        // this.existingFields = fields;\r\n\r\n        this.reservedNames = ReservedNamesValidatorDirective.mergeReserved(reservedNames, fields);\r\n\r\n        if (this.editMode != null) {\r\n          const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n          const editField = fields.find(field => field.Id === editFieldId);\r\n          if (this.editMode === 'name')\r\n            delete this.reservedNames[editField.StaticName];\r\n          this.fields.push(editField);\r\n        } else {\r\n          for (let i = 1; i <= 8; i++) {\r\n            this.fields.push({\r\n              Id: 0,\r\n              Type: DataTypeCatalog.String,\r\n              InputType: InputTypeCatalog.StringDefault,\r\n              StaticName: '',\r\n              IsTitle: fields.length === 0,\r\n              SortOrder: fields.length + i,\r\n            });\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < this.fields.length; i++) {\r\n          this.filterInputTypeOptions(i);\r\n          this.calculateHints(i);\r\n        }\r\n\r\n        this.loading$.next(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.saving$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  // closeDialog() {\r\n  //   this.dialog.close();\r\n  // }\r\n\r\n  filterInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.#inputTypeOptions.filter(\r\n      option => option.dataType === this.fields[index].Type.toLocaleLowerCase()\r\n    );\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    let defaultInputType = this.fields[index].Type.toLocaleLowerCase() + InputTypeCatalog.DefaultSuffix as Of<typeof InputTypeCatalog>;\r\n    const defaultExists = this.filteredInputTypeOptions[index].some(option => option.inputType === defaultInputType);\r\n    if (!defaultExists)\r\n      defaultInputType = this.filteredInputTypeOptions[index][0].inputType;\r\n    this.fields[index].InputType = defaultInputType;\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.#inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType?.description ?? '';\r\n    this.inputTypeHints[index] = selectedInputType?.isObsolete\r\n      ? `OBSOLETE - ${selectedInputType.obsoleteMessage}`\r\n      : selectedInputType?.description ?? '';\r\n  }\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.#inputTypeOptions.find(option => option.inputType === inputName);\r\n  }\r\n\r\n  // addSharedField() {\r\n  //   this.matDialog.open(AddSharingFieldsComponent, {\r\n  //     autoFocus: false,\r\n  //     width: '1600px',\r\n  //     data: { contentType: this.#contentType, existingFields: this.existingFields }\r\n  //   });\r\n  // }\r\n\r\n  save() {\r\n    this.saving$.next(true);\r\n    this.snackBar.open('Saving...');\r\n\r\n    const doneAndClose = () => {\r\n      this.saving$.next(false);\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.dialog.close();\r\n    }\r\n    if (this.editMode != null) {\r\n      const field = this.fields[0];\r\n      if (this.editMode === 'name') {\r\n        this.#contentTypesFieldsSvc.rename(field.Id, this.#contentType.Id, field.StaticName)\r\n          .subscribe(() => doneAndClose());\r\n      } else if (this.editMode === 'inputType') {\r\n        this.#contentTypesFieldsSvc.updateInputType(field.Id, field.StaticName, field.InputType)\r\n          .subscribe(() => doneAndClose());\r\n      }\r\n    } else {\r\n      of(...this.fields).pipe(\r\n        filter(field => !!field.StaticName),\r\n        concatMap(field =>\r\n          this.#contentTypesFieldsSvc.add(field, this.#contentType.Id).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(() => doneAndClose());\r\n    }\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n"],"x_google_ignoreList":[7]}