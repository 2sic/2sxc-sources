{"version":3,"file":"projects_eav-ui_src_app_app-administration_web-api-rest-api_web-api-rest-api_component_ts.b7cf8ae2c350b2cf.js","mappings":"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","names":["i0","endpoint_r1","path","name","WebApiRestApiComponent_Conditional_5_For_1_Template","ctx_r1","webApisTypes","sort","WebApiRestApiComponent","#sourceSvc","#dialogRouter","#getAllWebApis","constructor","fb","this","transient","SourceService","DialogRoutingService","getWebApisSig","computed","webApis","urlSegments","url","split","encodedUrlPath","length","replace","selectedContentType","find","webApi","webApiTypeForm","get","setValue","group","webApiType","openRestApi","apiRoute","navParentFirstChild","encodeURIComponent","i1","selectors","standalone","features","decls","vars","consts","template","rf","ctx","$event","WebApiRestApiComponent_Conditional_5_Template","MatSelectModule","i2","i3","i4","MatButtonModule","MatCardModule","MatIconModule","ReactiveFormsModule","RouterOutlet","SxcGridModule","encapsulation","appFilesAsset","apiExplorerAppApiFiles","HttpServiceBase","viewKey","global","urlItems","getHttpApiUrl","params","appId","templateIdOrPath","pipe","map","view","Type","toLocaleLowerCase","Extension","save","http","post","apiUrl","getAll","mask","Files","forEach","file","Shared","getWebApis","files","isShared","isCompiled","splitIndex","lastIndexOf","fileExtIndex","folder","substring","endpointPath","edition","apiFilesSignal","getSignal","getWebApiDetails","apiPath","zoneId","getPredefinedTemplates","purpose","type","getPreview","templateKey","create","test","i","EntityId","toString","IsShared","Path","templateId","__ngFactoryType__","factory","Éµfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/web-api-rest-api/web-api-rest-api.component.html","./projects/eav-ui/src/app/app-administration/web-api-rest-api/web-api-rest-api.component.ts","./projects/eav-ui/src/app/code-editor/services/source.service.ts"],"sourcesContent":["<form [formGroup]=\"webApiTypeForm\">\r\n  <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n    <mat-label>Endpoint</mat-label>\r\n    <mat-select formControlName=\"webApiType\" (valueChange)=\"openRestApi($event)\">\r\n      @if (webApisTypes()) {\r\n        @for (endpoint of webApisTypes().sort(); track endpoint) {\r\n          <mat-option [value]=\"endpoint.path\">\r\n            {{ endpoint.name }}\r\n          </mat-option>\r\n        }\r\n      }\r\n    </mat-select>\r\n  </mat-form-field>\r\n</form>\r\n\r\n<router-outlet></router-outlet>\r\n","import { Component, computed } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../../core';\r\nimport { SourceService } from '../../code-editor/services/source.service';\r\nimport { DevRestQueryComponent } from '../../dev-rest/query/query.component';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-web-api-rest-api',\r\n  standalone: true,\r\n  imports: [\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    DevRestQueryComponent,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n  ],\r\n  templateUrl: './web-api-rest-api.component.html',\r\n})\r\nexport class WebApiRestApiComponent {\r\n  #sourceSvc = transient(SourceService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  #getAllWebApis = this.#sourceSvc.getWebApisSig();\r\n\r\n  webApisTypes = computed(() => {\r\n    const webApis = this.#getAllWebApis();\r\n    const urlSegments = this.#dialogRouter.url.split('/');\r\n    const urlPath = urlSegments[urlSegments.length - 1]\r\n    var encodedUrlPath = urlPath.replace(\"%252F\", \"/\");\r\n\r\n    const selectedContentType = webApis.find(webApi => webApi.path === encodedUrlPath);\r\n\r\n    if (selectedContentType)\r\n      this.webApiTypeForm.get('webApiType').setValue(selectedContentType.path);\r\n\r\n    return webApis;\r\n  });\r\n\r\n  webApiTypeForm: FormGroup = this.fb.group({\r\n    webApiType: ['']\r\n  });\r\n\r\n  constructor(private fb: FormBuilder,) { }\r\n\r\n  openRestApi(apiRoute: string): void {\r\n    if (!apiRoute) return;\r\n    this.#dialogRouter.navParentFirstChild([encodeURIComponent(apiRoute)]);\r\n  }\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { WebApi, WebApiDetails } from '../../app-administration/models';\r\nimport { ViewOrFileIdentifier } from '../../shared/models/edit-form.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { FileAsset } from '../models/file-asset.model';\r\nimport { PredefinedTemplatesResponse } from '../models/predefined-template.model';\r\nimport { Preview } from '../models/preview.models';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\nconst appFilesAll = 'admin/AppFiles/AppFiles';\r\nconst appFilesAsset = 'admin/AppFiles/asset';\r\nconst appFilesCreate = 'admin/AppFiles/create';\r\nconst apiExplorerInspect = 'admin/ApiExplorer/inspect';\r\nconst apiExplorerAppApiFiles = 'admin/ApiExplorer/AppApiFiles';\r\nconst appFilesPredefinedTemplates = 'admin/AppFiles/GetTemplates';\r\nconst appFilesPreview = 'admin/AppFiles/preview';\r\n\r\n@Injectable()\r\nexport class SourceService extends HttpServiceBase {\r\n\r\n  /** ViewKey is templateId or path */\r\n  get(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[]): Observable<SourceView> {\r\n    return this.getHttpApiUrl<SourceView>(appFilesAsset, {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        ...this.templateIdOrPath(viewKey, global, urlItems),\r\n      },\r\n    }).pipe(\r\n      map(view => {\r\n        if (view.Type.toLocaleLowerCase() === 'auto') {\r\n          switch (view.Extension.toLocaleLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    );\r\n  }\r\n\r\n  // TODO: For Code Editor,\r\n  // getSig(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[], initial: undefined): Signal<SourceView> {\r\n  //   // Signal fÃ¼r die SourceView erstellen\r\n  //   const temp = this.getSignal<SourceView>(appFilesAsset, {\r\n  //     params: {\r\n  //       appId: this.appId,\r\n  //       global,\r\n  //       ...this.templateIdOrPath(viewKey, global, urlItems),\r\n  //     },\r\n  //   }, initial);\r\n  //   return computed(() => {\r\n  //     const result = temp();\r\n\r\n  //     if (result && result.Type.toLocaleLowerCase() === 'auto') {\r\n  //       switch (result.Extension.toLocaleLowerCase()) {\r\n  //         case '.cs':\r\n  //         case '.cshtml':\r\n  //           result.Type = 'Razor';\r\n  //           break;\r\n  //         case '.html':\r\n  //         case '.css':\r\n  //         case '.js':\r\n  //           result.Type = 'Token';\r\n  //           break;\r\n  //       }\r\n  //     }\r\n\r\n  //     return result;\r\n  //   });\r\n  // }\r\n\r\n\r\n  /** ViewKey is templateId or path */\r\n  save(viewKey: string, global: boolean, view: SourceView, urlItems: ViewOrFileIdentifier[]): Observable<boolean> {\r\n    return this.http.post<boolean>(this.apiUrl(appFilesAsset), view, {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        ...this.templateIdOrPath(viewKey, global, urlItems),\r\n      },\r\n    });\r\n  }\r\n\r\n  getAll(mask?: string): Observable<FileAsset[]> {\r\n    return this.getHttpApiUrl<{ Files: FileAsset[] }>(appFilesAll, {\r\n      params: {\r\n        appId: this.appId,\r\n        ...(mask && { mask }),\r\n      },\r\n    }).pipe(\r\n      map(({ Files }) => {\r\n        Files.forEach(file => {\r\n          file.Shared ??= false;\r\n        });\r\n        return Files;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getWebApis(): Observable<WebApi[]> {\r\n    return this.getHttpApiUrl<{ files: WebApi[] }>(apiExplorerAppApiFiles, {\r\n      params: {\r\n        appId: this.appId,\r\n      },\r\n    }).pipe(\r\n      map(({ files }) => {\r\n        files.forEach(file => {\r\n          file.isShared ??= false;\r\n          file.isCompiled ??= false;\r\n        });\r\n        return files;\r\n      }),\r\n    ).pipe(\r\n      map(files => {\r\n        const webApis: WebApi[] = files.map(file => {\r\n          const splitIndex = file.path.lastIndexOf('/');\r\n          const fileExtIndex = file.path.lastIndexOf('.');\r\n          const folder = file.path.substring(0, splitIndex);\r\n          const name = file.path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path: file.path, folder, name, isShared: file.isShared, endpointPath: file.endpointPath, isCompiled: file.isCompiled, edition: file.edition };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getWebApisSig(): Signal<WebApi[]> {\r\n    // Get the signal that retrieves the API files\r\n    const apiFilesSignal = this.getSignal<{ files: WebApi[] }>(apiExplorerAppApiFiles, {\r\n      params: {\r\n        appId: this.appId,\r\n      },\r\n    });\r\n\r\n    // Use a computed signal to transform the data\r\n    const webApisSignal = computed(() => {\r\n      const files = apiFilesSignal()?.files;\r\n\r\n      if(!files) {\r\n        return [];\r\n      }\r\n\r\n      // Ensure the default values for `isShared` and `isCompiled`\r\n      files.forEach(file => {\r\n        file.isShared ??= false;\r\n        file.isCompiled ??= false;\r\n      });\r\n\r\n      // Map the files to the desired WebApi format\r\n      return files.map(file => {\r\n        const splitIndex = file.path.lastIndexOf('/');\r\n        const fileExtIndex = file.path.lastIndexOf('.');\r\n        const folder = file.path.substring(0, splitIndex);\r\n        const name = file.path.substring(splitIndex + 1, fileExtIndex);\r\n\r\n        return {\r\n          path: file.path,\r\n          folder,\r\n          name,\r\n          isShared: file.isShared,\r\n          endpointPath: file.endpointPath,\r\n          isCompiled: file.isCompiled,\r\n          edition: file.edition,\r\n        } as WebApi;\r\n      });\r\n    });\r\n\r\n    return webApisSignal;\r\n  }\r\n\r\n\r\n  getWebApiDetails(apiPath: string): Observable<WebApiDetails> {\r\n    return this.getHttpApiUrl<WebApiDetails>(apiExplorerInspect, {\r\n      params: { appId: this.appId, zoneId: this.zoneId, path: apiPath },\r\n    });\r\n  }\r\n\r\n  getPredefinedTemplates(purpose?: 'Template' | 'Search' | 'Api', type?: 'Token' | 'Razor'): Observable<PredefinedTemplatesResponse> {\r\n    return this.getHttpApiUrl<PredefinedTemplatesResponse>(appFilesPredefinedTemplates, {\r\n      params: {\r\n        ...(purpose && { purpose }),\r\n        ...(type && { type }),\r\n      },\r\n    });\r\n  }\r\n\r\n  getPreview(path: string, global: boolean, templateKey: string): Observable<Preview> {\r\n    return this.getHttpApiUrl<Preview>(appFilesPreview, {\r\n      params: {\r\n        appId: this.appId,\r\n        path,\r\n        templateKey,\r\n        global,\r\n      },\r\n    });\r\n  }\r\n\r\n  create(path: string, global: boolean, templateKey: string): Observable<boolean> {\r\n    return this.http.post<boolean>(this.apiUrl(appFilesCreate), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        purpose: 'auto',\r\n        path,\r\n        templateKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  private templateIdOrPath(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[]) {\r\n    if (/^[0-9]*$/g.test(viewKey)) {\r\n      const path = urlItems.find(i => i.EntityId?.toString() === viewKey && i.IsShared === global)?.Path;\r\n      return {\r\n        templateId: viewKey,\r\n        ...(path != null && { path }),\r\n      };\r\n    } else {\r\n      return { path: viewKey };\r\n    }\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}