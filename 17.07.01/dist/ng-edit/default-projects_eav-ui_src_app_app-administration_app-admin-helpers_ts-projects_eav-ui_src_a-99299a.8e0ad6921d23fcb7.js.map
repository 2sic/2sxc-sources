{"version":3,"file":"default-projects_eav-ui_src_app_app-administration_app-admin-helpers_ts-projects_eav-ui_src_a-99299a.8e0ad6921d23fcb7.js","mappings":"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","names":["AppAdminHelpers","getLightSpeedEditParams","appId","items","ContentTypeName","eavConstants","appMetadata","LightSpeed","For","Target","metadata","app","target","TargetType","targetType","Number","Singleton","webApiZoneRoot","ZoneService","constructor","http","context","dnnContext","this","getLanguages","get","$2sxc","apiUrl","toggleLanguage","code","enable","params","cultureCode","toString","getSystemInfo","getLanguagesPermissions","webApiAppRoot","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","wxM","factory","ɵfac","FeatureNames","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","ContentSecurityPolicy","PermissionsByLanguage","FieldShareConfigManagement","_r7","ctx_r6","openDialog","vm_r4","feature","icon","FeatureTextInfoComponent_Conditional_0_Conditional_0_Template","ctx","show","FeatureTextInfoComponent","FeatureComponentBase","asInfo","value","asInfo$","next","dialog","viewContainerRef","featuresService","changeDetectorRef","super","BehaviorSubject","viewModel$","combineLatest","feature$","show$","pipe","map","In1","selectors","inputs","features","decls","vars","consts","template","rf","FeatureTextInfoComponent_Conditional_0_Template","FeatureTextInfoComponent_Conditional_2_Template","FeatureTextInfoComponent_ng_template_3_Template","FeatureTextInfoComponent_contFlowTmp","FeaturesModule","_angular_core__WEBPACK_IMPORTED_MODULE_0__","a4G","s3X","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","getFeatureDetails","featureNameId","webApiRoot","nameId","id_r4","_r6","ctx_r5","copyToClipboard","link_r7","_r9","ctx_r8","findOutMore","FeatureInfoDialogComponent_Conditional_0_Conditional_15_Template","FeatureInfoDialogComponent_Conditional_0_Conditional_17_Template","_r11","ctx_r10","closeDialog","Name","Description","IsEnabled","FeatureInfoDialogComponent_Conditional_0_contFlowTmp","NameId","Link","FeatureInfoDialogComponent","dialogData","dialogRef","snackBar","featureDetailService","ngOnInit","text","open","duration","link","window","close","MAT_DIALOG_DATA","core","FeatureInfoDialogComponent_Conditional_0_Template","FeatureInfoDialogComponent_contFlowTmp","featureNameId$","showIf","showIf$","switchMap","featName","get$","feat","featureId","autoFocus","data","width","markForCheck","Sc5","TippyStandaloneDirective","elementRef","ngOnChanges","changes","tooltip","tippy","nativeElement","animation","arrow","tippyArrow","placement","theme","allowHTML","tippyAllowHtml","setContent","tippyDisabled","disable","tippyPlacement","setProps","tippyShowDelay","showDelay","parseInt","delay","ngOnDestroy","destroy","_angular_core__WEBPACK_IMPORTED_MODULE_1__","standalone","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","DialogService","openCodeFile","path","isShared","templateId","form","Path","EntityId","hashParams","buildHashParam","keyDialog","DialogTypeConstants","Develop","keyIsShared","keyItems","JSON","stringify","url","buildFullUrl","openQueryDesigner","queryId","PipelineDesigner","keyPipelineId","openAppsManagement","zoneId","tab","extras","keyZoneId","Zone","Object","keys","length","keyExtras","openAppAdministration","scope","keyAppId","App","buildSharedHashParams","keyModuleId","moduleId","keyContentBlockId","contentBlockId","keyPartOfPage","sessionStorage","getItem","keyDebug","key","rawKey","replace","prefix","valueTemp","_","encodeURIComponent","oldHref","keyUrl","oldUrl","URL","newHref","origin","pathname","search","allHashParams","entries","reduce","acc","_angular_core__WEBPACK_IMPORTED_MODULE_3__","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","sxcVersion","suffix","getTranslation","lang","catchError","console","warn","of","nextId","BADGE_CONTENT_CLASS","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","type","hostAttrs","hostVars","hostBindings","hidden","disabled","booleanAttribute","MatBadgeModule","ɵmod","ɵinj","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/app-admin-helpers.ts","./projects/eav-ui/src/app/apps-management/services/zone.service.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/directives/tippy-Standalone.directive.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/dialog.service.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { eavConstants } from '../shared/constants/eav.constants';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\n\r\nexport class AppAdminHelpers {\r\n  public static getLightSpeedEditParams(appId: number) {\r\n    const form: EditForm = {\r\n      items: [\r\n        {\r\n          ContentTypeName: eavConstants.appMetadata.LightSpeed.ContentTypeName,\r\n          For: {\r\n            Target: eavConstants.metadata.app.target,\r\n            TargetType: eavConstants.metadata.app.targetType,\r\n            Number: appId,\r\n            Singleton: true,\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    return form;\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { SiteLanguage, SiteLanguagePermissions } from '../models/site-language.model';\r\nimport { SystemInfoSet } from '../models/system-info.model';\r\n\r\nconst webApiZoneRoot = 'admin/zone/';\r\n\r\n@Injectable()\r\nexport class ZoneService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getLanguages() {\r\n    return this.http.get<SiteLanguage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiZoneRoot + 'GetLanguages'));\r\n  }\r\n\r\n  toggleLanguage(code: string, enable: boolean) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiZoneRoot + 'SwitchLanguage'), {\r\n      params: { cultureCode: code, enable: enable.toString() },\r\n    });\r\n  }\r\n\r\n  getSystemInfo() {\r\n    return this.http.get<SystemInfoSet>(this.dnnContext.$2sxc.http.apiUrl(webApiZoneRoot + 'GetSystemInfo'));\r\n  }\r\n\r\n  getLanguagesPermissions() {\r\n    return this.http.get<SiteLanguagePermissions[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'languages'), {\r\n      params: { appId: this.context.appId },\r\n    });\r\n  }\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n};\r\n","@if (viewModel$ | async; as vm) {\r\n  @if (vm.show) {\r\n    <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: vm.feature\">\r\n      <mat-icon class=\"icon icon-{{vm.icon}}\">{{ vm.icon }}</mat-icon>\r\n      <div class=\"feature-text-info-content\">\r\n        <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n        <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      </div>\r\n    </div>\r\n  }\r\n} @else {\r\n  <div>loading...</div>\r\n}\r\n<ng-template #loading>\r\n  <div>loading...</div>\r\n</ng-template>","import { ChangeDetectorRef, Component, Input, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\nimport { BehaviorSubject, map, Observable, combineLatest, switchMap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss']\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  @Input()\r\n  public set asInfo(value: boolean) { this.asInfo$.next(value); }\r\n  asInfo$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<FeatureTextInfoViewModel>;\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef , featuresService);\r\n    this.viewModel$ = combineLatest([this.feature$, this.asInfo$, this.show$]).pipe(map(([feature, asInfo, show]) => \r\n      ({\r\n        feature,\r\n        icon: asInfo ? 'info' : 'warning',\r\n        show\r\n      })));\r\n  }\r\n\r\n}\r\n\r\ninterface FeatureTextInfoViewModel {\r\n  feature: FeatureSummary;\r\n  icon: string;\r\n  show: boolean;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ vm.feature.Name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ (vm.feature.IsEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n        </div>\r\n      </div>\r\n      @if (vm.feature.NameId; as id) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">ID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      @if (vm.feature.Link; as link) {\r\n        <button mat-raised-button color=\"accent\"\r\n          class=\"eav-card-action-button\" (click)=\"findOutMore(link)\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          {{ \"Features.FindOutMore\" | translate }}\r\n        </button>\r\n      }\r\n      <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n        {{ \"Features.Close\" | translate }}\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.IsEnabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      width: '400px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport tippy, { Instance, Placement, Props } from 'tippy.js';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n    selector: '[tippy]',\r\n    standalone: true\r\n})\r\nexport class TippyStandaloneDirective implements OnChanges, OnDestroy {\r\n  /** Message to show in Tippy */\r\n  @Input() tippy: string | null | undefined;\r\n\r\n  /** disable Tippy */\r\n  @Input() tippyDisabled: string | boolean | null | undefined;\r\n\r\n  /**\r\n   * 'top' | 'top-start' | 'top-end' |\r\n   * 'right' | 'right-start' | 'right-end' |\r\n   * 'bottom' | 'bottom-start' | 'bottom-end' |\r\n   * 'left' | 'left-start' | 'left-end' |\r\n   * 'auto' | 'auto-start' | 'auto-end'\r\n   */\r\n  @Input() tippyPlacement: string | null | undefined;\r\n\r\n  /** delay showing Tippy in ms */\r\n  @Input() tippyShowDelay: string | number | null | undefined;\r\n\r\n  /** enable html in Tippy */\r\n  @Input() tippyAllowHtml: boolean | null | undefined;\r\n\r\n  /** show arrow in Tippy - only respected on setup, changes ATM not handled */\r\n  @Input() tippyArrow: boolean | null | undefined;\r\n\r\n  private tooltip: Instance<Props>;\r\n\r\n  constructor(private elementRef: ElementRef<HTMLElement>) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Init Tooltip on first round\r\n    if (this.tooltip == null)\r\n      this.tooltip = tippy(this.elementRef.nativeElement, {\r\n        animation: 'scale-subtle',\r\n        arrow: !!this.tippyArrow,\r\n        duration: [100, 50],\r\n        placement: 'bottom',\r\n        theme: '2sxc',\r\n        allowHTML: !!this.tippyAllowHtml,\r\n      });\r\n\r\n    if (changes['tippy'] != null)\r\n      this.tooltip.setContent(this.tippy);\r\n\r\n    if (changes['tippyDisabled'] != null)\r\n      this.tippyDisabled ? this.tooltip.disable() : this.tooltip.enable();\r\n\r\n    if (changes['tippyPlacement'] != null)\r\n      this.tooltip.setProps({ placement: this.tippyPlacement as Placement });\r\n\r\n    if (changes['tippyShowDelay'] != null) {\r\n      const showDelay = typeof this.tippyShowDelay === 'number' ? this.tippyShowDelay : parseInt(this.tippyShowDelay, 10);\r\n      this.tooltip.setProps({ delay: [showDelay, null] });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.tooltip?.destroy();\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DialogTypeConstants } from '../constants/dialog-type.constants';\r\n// tslint:disable-next-line:max-line-length\r\nimport { keyAppId, keyContentBlockId, keyDebug, keyDialog, keyExtras, keyIsShared, keyItems, keyModuleId, keyPartOfPage, keyPipelineId, keyUrl, keyZoneId, prefix } from '../constants/session.constants';\r\nimport { DialogHashParams, ExtrasParam } from '../models/dialog-url-params.model';\r\nimport { EditForm, ViewOrFileIdentifier } from '../models/edit-form.model';\r\nimport { Context } from './context';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  constructor(private context: Context) { }\r\n\r\n  openCodeFile(path: string, isShared: boolean, templateId?: number) {\r\n    const dialog = DialogTypeConstants.Develop;\r\n    const form = {\r\n      items: [{\r\n        Path: path,\r\n        ...(templateId != null && { EntityId: templateId }),\r\n      }] as ViewOrFileIdentifier[]\r\n    };\r\n\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyDialog, dialog),\r\n      ...this.buildHashParam(keyIsShared, isShared.toString()),\r\n      ...this.buildHashParam(keyItems, JSON.stringify(form.items)),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openQueryDesigner(queryId: number) {\r\n    const dialog = DialogTypeConstants.PipelineDesigner;\r\n    const form: EditForm = {\r\n      items: [{ EntityId: queryId }],\r\n    };\r\n\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyDialog, dialog),\r\n      ...this.buildHashParam(keyPipelineId, queryId.toString()),\r\n      ...this.buildHashParam(keyItems, JSON.stringify(form.items)),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openAppsManagement(zoneId: number, tab?: string) {\r\n    const extras: ExtrasParam = {\r\n      ...(tab && { tab }),\r\n    };\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, zoneId.toString()),\r\n      ...this.buildHashParam(keyDialog, DialogTypeConstants.Zone),\r\n      ...(Object.keys(extras).length ? this.buildHashParam(keyExtras, JSON.stringify(extras)) : ''),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openAppAdministration(zoneId: number, appId: number, tab?: string, scope?: string) {\r\n    const extras: ExtrasParam = {\r\n      ...(tab && { tab }),\r\n      ...(scope && { scope }),\r\n    };\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, zoneId.toString()),\r\n      ...this.buildHashParam(keyAppId, appId.toString()),\r\n      ...this.buildHashParam(keyDialog, DialogTypeConstants.App),\r\n      ...(Object.keys(extras).length ? this.buildHashParam(keyExtras, JSON.stringify(extras)) : ''),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  /** A lot of the link is identical when opening the admin-dialogs in a new window */\r\n  private buildSharedHashParams() {\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, this.context.zoneId.toString()),\r\n      ...this.buildHashParam(keyAppId, this.context.appId.toString()),\r\n      ...this.buildHashParam(keyModuleId, this.context.moduleId?.toString()),\r\n      ...this.buildHashParam(keyContentBlockId, this.context.contentBlockId?.toString()),\r\n      ...this.buildHashParam(keyPartOfPage),\r\n      ...(sessionStorage.getItem(keyDebug) ? this.buildHashParam(keyDebug) : {}),\r\n    };\r\n    return hashParams;\r\n  }\r\n\r\n  /** Encodes param if necessary */\r\n  private buildHashParam(key: string, value?: string) {\r\n    const rawKey = key.replace(prefix, '');\r\n    const valueTemp = (value != null) ? value : sessionStorage.getItem(key);\r\n    const rawValue = encodeURIComponent(valueTemp);\r\n    const hashParam: DialogHashParams = { [rawKey]: rawValue };\r\n    return hashParam;\r\n  }\r\n\r\n  private buildFullUrl(hashParams: DialogHashParams) {\r\n    const oldHref = sessionStorage.getItem(keyUrl);\r\n    const oldUrl = new URL(oldHref);\r\n    const newHref = oldUrl.origin + oldUrl.pathname + oldUrl.search;\r\n\r\n    const allHashParams: DialogHashParams = {\r\n      ...this.buildSharedHashParams(),\r\n      ...hashParams,\r\n    };\r\n    const hashUrl = Object.entries(allHashParams).reduce((acc, [key, value]) => `${acc}&${key}=${value}`, '').replace('&', '#');\r\n    return newHref + hashUrl;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatBadge, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[16]}