{"version":3,"file":"projects_eav-ui_src_app_app-administration_app-configuration_app-configuration_component_ts-p-0529b1.3441a5090c7defe6.js","mappings":"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","names":["webApiRoot","AppInternalsService","HttpServiceBase","constructor","this","getAppInternalsSig","httpToSignal","http","get","apiUrl","params","appId","getAppInternals","__ngFactoryType__","factory","ɵfac","AnalyzeParts","Settings","Resources","i0","tmp_7_0","icon_r2","undefined","label_r3","AppConfigurationCardComponent","#appInternalsSvc","#contentItemsSvc","#dialogRouter","context","snackBar","contentItem","signal","appSettingsInternal","transient","ContentItemsService","DialogRoutingService","clipboard","ClipboardService","ngOnInit","fetchSettings","doOnDialogClosed","getAll","eavConstants","contentTypes","appConfiguration","subscribe","contentItems","set","ngOnDestroy","dismiss","edit","staticName","form","length","Error","items","EditPrep","editId","Id","formUrl","convertFormToUrl","navParentFirstChild","openMetadata","url","GoToMetadata","getUrlApp","dialogSettings","Context","App","Name","x","formatValue","value","i1","i2","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","_r1","copyToClipboard","DisplayName","Folder","Version","RequiredVersion","RequiredDnnVersion","RequiredOqtaneVersion","AppConfigurationCardComponent_ng_container_44_Template","AppConfigurationCardComponent_ng_template_55_Template","tmp_2_0","tmp_4_0","tmp_6_0","tmp_8_0","tmp_10_0","tmp_12_0","docsLink_r5","_c0","tmp_15_0","EntityLists","ToSxcContentApp","tmp_16_0","MetadataList","Items","MatCardModule","i3","MatIconModule","i4","NgTemplateOutlet","MatButtonModule","i5","MatBadgeModule","i6","TippyDirective","styles","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_1_Template","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_2_Template","ctx_r1","isGlobal","isPrimary","_r3","systemSettings","SystemSettingsScopes","fixContentType","customSettings","vm_r4","systemSettingsCount","customSettingsCount","customSettingsFieldsCount","_r5","Site","AppConfigurationComponent_Conditional_0_Conditional_23_ng_container_14_Template","goToGlobal_r6","_r7","settings","config","AppConfigurationComponent_Conditional_0_Conditional_24_ng_container_14_Template","AppConfigurationComponent_Conditional_0_Conditional_24_ng_container_15_Template","goToSite_r8","_r9","systemResources","customResources","systemResourcesCount","customResourcesCount","customResourcesFieldsCount","_r10","AppConfigurationComponent_Conditional_0_Conditional_54_ng_container_14_Template","_r11","resources","AppConfigurationComponent_Conditional_0_Conditional_55_ng_container_14_Template","AppConfigurationComponent_Conditional_0_Conditional_55_ng_container_15_Template","_r12","openGlobalSettings","_r13","openSiteSettings","AppConfigurationComponent_Conditional_0_Conditional_118_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_118_Conditional_1_Template","isApp","AppConfigurationComponent_Conditional_0_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_22_Template","AppConfigurationComponent_Conditional_0_Conditional_23_Template","AppConfigurationComponent_Conditional_0_Conditional_24_Template","AppConfigurationComponent_Conditional_0_ng_container_27_Template","analyze","AppConfigurationComponent_Conditional_0_Conditional_53_Template","AppConfigurationComponent_Conditional_0_Conditional_54_Template","AppConfigurationComponent_Conditional_0_Conditional_55_Template","AppConfigurationComponent_Conditional_0_ng_container_58_Template","AppConfigurationComponent_Conditional_0_ng_template_64_Template","AppConfigurationComponent_Conditional_0_ng_template_66_Template","AppConfigurationComponent_Conditional_0_ng_container_82_Template","openLightSpeed","AppConfigurationComponent_Conditional_0_ng_container_100_Template","AppConfigurationComponent_Conditional_0_ng_container_112_Template","openPermissions","AppConfigurationComponent_Conditional_0_Conditional_118_Template","AppConfigurationComponent_Conditional_0_ng_container_119_Template","openLanguagePermissions","langPermsEnabled","docsLink_r14","_c1","lightSpeedEnabled","appLightSpeedCount","_c2","_c3","Enable","AppPermissions","Permissions","Count","_c4","icon_r15","label_r16","AppConfigurationComponent","#dialogSvc","#contentTypesSvc","#appInternalsService","#contentItemsService","#dialogConfigSvc","matDialog","viewContainerRef","changeDetectorRef","DialogService","ContentTypesService","AppScopes","appSettingsInternal$","Subject","appStateAdvanced","inject","FeaturesScopedService","isEnabled","FeatureNames","LightSpeed","cspEnabled","ContentSecurityPolicy","PermissionsByLanguage","DialogConfigAppService","viewModel$","pipe","map","s","props","lsTypeName","appMetadata","ContentTypeName","filter","i","_Type","SettingsSystem","SettingsEntityScope","AppSettings","FieldAll","ResourcesSystem","AppResources","getCurrent$","appScope","SettingsScope","Global","systemSettingsScope","systemSettingsEntities","systemSettingsEntity","newFromType","customSettingsEntity","AppAdminHelpers","getLightSpeedEditParams","sitePrimaryApp","PrimaryApp","openAppAdministration","ZoneId","AppId","globalPrimaryApp","System","GoToPermissions","enabled","openFeatureDialog","part","next","action","retrieveContentTypes","scopes","configuration","some","ct","save","StaticName","Description","Scope","ChangeStaticName","NewStaticName","success","AppConfigurationComponent_Conditional_0_Template","AppConfigurationComponent_ng_template_2_Template","tmp_1_0","i7","FeatureTextInfoComponent","RouterOutlet","AsyncPipe","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","contentType","webApiEntityList","importQuery","file","from","toBase64","switchMap","fileBase64","post","ContentBase64","Success","Messages","clonePipeline","id","toString","delete","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","import","formData","FormData","append","zoneId","export","window","open","getPolymorphism","getUsage","guid","webApiFieldsAll","webApiSetTitle","webApiTypeRoot","webApiFieldsGetShared","ContentTypesFieldsService","paramsAppId","more","appid","typeListRetrieve","getInputTypesList","inputConfigs","dataType","Type","substring","indexOf","inputType","label","Label","description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","#getShareinfo","getAncestors","getDescendants","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","name","contentTypeId","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","JSON","stringify","setTitle","item","rename","fieldId","newName","IsTitle","add","newField","ContentTypeId","Index","SortOrder","updateInputType","field","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-internals.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.models.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AppInternals } from '../../app-administration/models/app-internals.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { httpToSignal } from '../../shared/signals/signal.utilities';\r\n\r\nconst webApiRoot = 'admin/appinternals/get';\r\n\r\n@Injectable()\r\nexport class AppInternalsService extends HttpServiceBase {\r\n\r\n  /**\r\n   * Fetches AppInternals for given key\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n  getAppInternals(): Observable<AppInternals> {\r\n    return this.http.get<AppInternals>(this.apiUrl(webApiRoot), {\r\n      params: {\r\n        appId: this.appId,\r\n      },\r\n    });\r\n  }\r\n\r\n  // New with Signal\r\n  getAppInternalsSig = httpToSignal('getAppInternals',\r\n    this.http.get<AppInternals>(this.apiUrl(webApiRoot), {\r\n      params: {\r\n        appId: this.appId,\r\n      },\r\n    })\r\n  );\r\n\r\n  // TODO: Only for Tesing\r\n  // httpToSignalTest<T>(name: string, httpRequest: Observable<T>, initialValue: T = null): Signal<T> {\r\n  //    console.log(\"call Http\");\r\n  //   const sig = signal(initialValue, { equal: isEqual }) as WritableSignal<T>;\r\n\r\n  //   // Logging the initial value\r\n  //   // console.log('Initial value before HTTP request:', initialValue);\r\n  //   // HTTP request pipe\r\n  //   httpRequest.subscribe(value => {\r\n  //     sig.set(value);\r\n  //     // Logging after HTTP request completion\r\n  //     // console.log('HTTP request completed, signal set to:', value);\r\n  //   });\r\n\r\n  //   return named(name, sig.asReadonly());\r\n  // }\r\n\r\n\r\n}\r\n","\r\nexport const AnalyzeParts = {\r\n  Settings: 'Settings',\r\n  Resources: 'Resources',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport interface SettingsStackItem {\r\n  Path: string;\r\n  Priority: number;\r\n  Source: string;\r\n  TotalResults: number;\r\n  Type: string;\r\n  Value: string;\r\n  _value: string;\r\n}\r\n","<!-- App Config -->\r\n<mat-card class=\"eav-card\">\r\n  <mat-card-header class=\"eav-card-header\">\r\n    <mat-card-title>Configuration</mat-card-title>\r\n    <mat-icon>redeem</mat-icon>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <p>\r\n    <div class=\"eav-info-row\">\r\n      <div class=\"eav-info-row__label\">Name:</div>\r\n      <div class=\"eav-info-row__value\">\r\n        <span [tippy]=\"'Click to copy to clipboard'\"\r\n          (click)=\"clipboard.copyToClipboard(contentItem().DisplayName)\">{{formatValue(contentItem()?.DisplayName)}}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"eav-info-row\">\r\n      <div class=\"eav-info-row__label\">Folder:</div>\r\n      <div class=\"eav-info-row__value\">\r\n        <span [tippy]=\"'Click to copy to clipboard'\"\r\n          (click)=\"clipboard.copyToClipboard(contentItem().Folder)\">{{formatValue(contentItem()?.Folder)}}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"eav-info-row\">\r\n      <div class=\"eav-info-row__label\">Version:</div>\r\n      <div class=\"eav-info-row__value\">\r\n        <span [tippy]=\"'Click to copy to clipboard'\"\r\n          (click)=\"clipboard.copyToClipboard(contentItem().Version)\">{{formatValue(contentItem()?.Version)}}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"eav-info-row\">\r\n      <div class=\"eav-info-row__label\">For</div>\r\n      <div class=\"eav-info-row__value\">\r\n        <b>2sxc: </b><span [tippy]=\"'Click to copy to clipboard'\"\r\n          (click)=\"clipboard.copyToClipboard(contentItem().RequiredVersion)\"> {{formatValue(contentItem()?.RequiredVersion)}}\r\n        </span>\r\n        <b> DNN: </b><span [tippy]=\"'Click to copy to clipboard'\"\r\n          (click)=\"clipboard.copyToClipboard(contentItem().RequiredDnnVersion)\">\r\n          {{formatValue(contentItem()?.RequiredDnnVersion)}} </span>\r\n        <b> Oqt: </b><span [tippy]=\"'Click to copy to clipboard'\"\r\n          (click)=\"clipboard.copyToClipboard(contentItem().RequiredOqtaneVersion)\">\r\n          {{formatValue(contentItem()?.RequiredOqtaneVersion)}} </span>\r\n      </div>\r\n    </div>\r\n    <!-- </p> -->\r\n  </mat-card-content>\r\n  <div class=\"eav-card-space-div\"></div>\r\n  <mat-card-actions align=\"start\">\r\n    <ng-container\r\n      *ngTemplateOutlet=\"docsLink; context: { link: 'https://docs.2sxc.org/basics/app/configuration.html' }\"></ng-container>\r\n    <button mat-button class=\"eav-button__with-icon\" (click)=\"edit()\">\r\n      <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        [matBadge]=\"appSettingsInternal()?.EntityLists?.ToSxcContentApp.length || null\" matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\" class=\"eav-icon\">edit</mat-icon>\r\n      <span>Edit</span>\r\n    </button>\r\n    <button mat-button class=\"eav-button__with-icon\" (click)=\"openMetadata()\">\r\n      <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        [matBadge]=\"appSettingsInternal()?.MetadataList.Items.length || null\" matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\" class=\"eav-icon\">local_offer</mat-icon>\r\n      <span>Metadata</span>\r\n    </button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n\r\n<ng-template #docsLink let-icon let-label let-link=\"link\">\r\n  <a mat-button class=\"eav-button__with-icon\" href=\"{{link}}\" target=\"_blank\" [tippy]=\"'online documentation'\">\r\n    <mat-icon class=\"eav-icon\">{{ icon ?? \"menu_book\" }}</mat-icon>\r\n    <span>{{ label }}</span>\r\n  </a>\r\n</ng-template>\r\n","import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../../core';\r\nimport { ContentItem } from '../../../content-items/models/content-item.model';\r\nimport { ContentItemsService } from '../../../content-items/services/content-items.service';\r\nimport { GoToMetadata } from '../../../metadata';\r\nimport { eavConstants } from '../../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../../shared/helpers/url-prep.helper';\r\nimport { DialogSettings } from '../../../shared/models/dialog-settings.model';\r\nimport { EditForm, EditPrep } from '../../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../../shared/routing/dialog-routing.service';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { Context } from '../../../shared/services/context';\r\nimport { AppInternals } from '../../models/app-internals.model';\r\nimport { AppInternalsService } from '../../services/app-internals.service';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration-card',\r\n  templateUrl: './app-configuration-card.component.html',\r\n  styleUrls: ['./app-configuration-card.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class AppConfigurationCardComponent implements OnInit, OnDestroy {\r\n  @Input() dialogSettings: DialogSettings;\r\n\r\n  contentItem = signal<ContentItem>(undefined);\r\n  appSettingsInternal = signal<AppInternals>(undefined);\r\n\r\n  #appInternalsSvc = transient(AppInternalsService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.fetchSettings();\r\n    this.#dialogRouter.doOnDialogClosed(() => { this.fetchSettings(); });\r\n\r\n    this.#contentItemsSvc.getAll(eavConstants.contentTypes.appConfiguration).subscribe(contentItems => {\r\n      this.contentItem.set(contentItems[0]);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  edit() {\r\n    const staticName = eavConstants.contentTypes.appConfiguration;\r\n    this.#contentItemsSvc.getAll(staticName).subscribe(contentItems => {\r\n      let form: EditForm;\r\n\r\n      if (contentItems.length < 1) throw new Error(`Found no settings for type ${staticName}`);\r\n      if (contentItems.length > 1) throw new Error(`Found too many settings for type ${staticName}`);\r\n      form = {\r\n        items: [EditPrep.editId(contentItems[0].Id)],\r\n      };\r\n\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n    });\r\n  }\r\n\r\n  openMetadata() {\r\n    const url = GoToMetadata.getUrlApp(\r\n      this.context.appId,\r\n      `Metadata for App: ${this.dialogSettings.Context.App.Name} (${this.context.appId})`,\r\n    );\r\n    this.#dialogRouter.navParentFirstChild([url]);\r\n  }\r\n\r\n  private fetchSettings() {\r\n    const getObservable = this.#appInternalsSvc.getAppInternals();\r\n    getObservable.subscribe(x => {\r\n      // 2dm - New mode for Reactive UI\r\n      this.appSettingsInternal.set(x);\r\n    });\r\n  }\r\n\r\n  formatValue(value?: string): string {\r\n    return value === \"\" ? \"-\" : value ?? \"-\";\r\n  }\r\n\r\n}\r\n\r\n","@if (viewModel$ | async; as vm) {\r\n\r\n  <!-- TODO:: @2dg WIP Sig -->\r\n  <!-- <pre>\r\n    <span>Test1:{{vm.customSettingsFieldsCount}}</span>\r\n    <span>Test2:{{viewModelSig().customSettingsFieldsCount}}</span>\r\n  </pre> -->\r\n\r\n  @if (isGlobal || isPrimary) {\r\n    <div class=\"alert alert-info scope-info\">\r\n      @if (isGlobal) {\r\n        This is the Global App. Anything configured here will affect all Sites and Apps in this installation.\r\n      }\r\n      @if (isPrimary) {\r\n        This is the Primary App of this Site. You can also configure sitewide settings and resources here.\r\n      }\r\n      See <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n    </div>\r\n  }\r\n  <div class=\"eav-cards-box\">\r\n    <!-- Settings -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Settings</mat-card-title>\r\n        <mat-icon>settings</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Settings are things like SQL-connection strings, default \"items-to-show\" numbers and similar.\r\n          If necessary, settings like a link to an RSS-Feed could be different in each language.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Settings</th>\r\n              <th>Custom Settings</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- Settings for Global App -->\r\n            @if (isGlobal) {\r\n              <tr>\r\n                <th>Global</th>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit global system settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.systemSettingsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'edit')\"\r\n                    tippy=\"Edit custom global settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customSettingsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                  <button mat-icon-button (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'config')\"\r\n                    tippy=\"Configure fields of the custom global settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customSettingsFieldsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">dns</mat-icon>\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            }\r\n            <!-- Settings for Primary App -->\r\n            @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.Site)\"\r\n                    tippy=\"Edit site system settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.systemSettingsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'edit')\"\r\n                    tippy=\"Edit custom site settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customSettingsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                  <button mat-icon-button (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'config')\"\r\n                    tippy=\"Configure fields of the custom site settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customSettingsFieldsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">dns</mat-icon>\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Settings for App and Content -->\r\n            @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit app system settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.systemSettingsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.settings)\" tippy=\"Edit custom app settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customSettingsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                  <button mat-icon-button (click)=\"config(eavConstants.contentTypes.settings)\"\r\n                    tippy=\"Configure fields of the custom app settings\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customSettingsFieldsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">dns</mat-icon>\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <ng-container *ngTemplateOutlet=\"docsLink; context: { link: 'https://go.2sxc.org/settings' }\"></ng-container>\r\n        <button mat-button class=\"eav-button__with-icon\" (click)=\"analyze(AnalyzeParts.Settings)\" tippy=\"See the result of combining all settings\">\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Settings</span>\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Resources -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Language Resources (i18n)</mat-card-title>\r\n        <mat-icon>translate</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Resources are used for labels and things like that in the App.\r\n          They are usually needed to create multi-lingual views and such, and should not be used for App-Settings.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Resources</th>\r\n              <th>Custom Resources</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- Resources for Global App -->\r\n            @if (isGlobal) {\r\n              <tr>\r\n                <th>Global</th>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit global system resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.systemResourcesCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'edit')\"\r\n                    tippy=\"Edit custom global resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customResourcesCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                  <button mat-icon-button (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'config')\"\r\n                    tippy=\"Configure fields of the custom global resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customResourcesFieldsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">dns</mat-icon>\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            }\r\n            <!-- Resources for Primary App -->\r\n            @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.Site)\"\r\n                    tippy=\"Edit site system resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.systemResourcesCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'edit')\"\r\n                    tippy=\"Edit custom site resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customResourcesCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                  <button mat-icon-button (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'config')\"\r\n                    tippy=\"Configure fields of the custom site resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customResourcesFieldsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">dns</mat-icon>\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Resources for App and Content -->\r\n            @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit app system resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.systemResourcesCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.resources)\"\r\n                    tippy=\"Edit custom app resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customResourcesCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">edit</mat-icon>\r\n                  </button>\r\n                  <button mat-icon-button (click)=\"config(eavConstants.contentTypes.resources)\"\r\n                    tippy=\"Configure fields of the custom app resources\">\r\n                    <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.customResourcesFieldsCount || null\"\r\n                    matBadgePosition=\"below after\" aria-hidden=\"false\">dns</mat-icon>\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <ng-container *ngTemplateOutlet=\"docsLink; context: { link: 'https://go.2sxc.org/settings' }\"></ng-container>\r\n        <button mat-button class=\"eav-button__with-icon\" (click)=\"analyze(AnalyzeParts.Resources)\" tippy=\"See the result of combining all resources\">\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Resources</span>\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Templates which are re-used in the table above -->\r\n    <ng-template #goToGlobal>\r\n      <tr>\r\n        <th>Global</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openGlobalSettings()\" tippy=\"Go to global\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template #goToSite>\r\n      <tr>\r\n        <th>Site</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openSiteSettings()\" tippy=\"Go to site\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </div>\r\n  <div class=\"eav-cards-box\">\r\n    <app-app-configuration-card [dialogSettings]=\"dialogSettings\">\r\n    </app-app-configuration-card>\r\n    <!-- LightSpeed -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Performance</mat-card-title>\r\n        <mat-icon>bolt</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          LightSpeed Output Cache to speed up page by 50-90%\r\n        </p>\r\n        <app-feature-text-info [featureNameId]=\"'LightSpeedOutputCache'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <ng-container *ngTemplateOutlet=\"docsLink; context: { link: 'https://go.2sxc.org/lightspeed' }\"></ng-container>\r\n        <button mat-button  class=\"eav-button__with-icon\" (click)=\"openLightSpeed()\" disabled=\"{{!lightSpeedEnabled()}}\">\r\n          <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadge]=\"vm.appLightSpeedCount || null\"\r\n          matBadgePosition=\"below after\" aria-hidden=\"false\" class=\"eav-icon\">bolt</mat-icon>\r\n          <span>Edit LightSpeed</span>\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Security / CSP -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Security</mat-card-title>\r\n        <mat-icon>local_police</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          ContentSecurityPolicy (CSP) features in this App - for maximum control.\r\n        </p>\r\n        <app-feature-text-info [featureNameId]=\"'ContentSecurityPolicy'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <ng-container *ngTemplateOutlet=\"docsLink; context: { link: 'https://go.2sxc.org/csp' }\"></ng-container>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Permissions -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Permissions</mat-card-title>\r\n        <mat-icon>person</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Give access to the entire app (all data). Use with care.\r\n        </p>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <ng-container *ngTemplateOutlet=\"docsLink; context: { link: 'https://docs.2sxc.org/basics/app/permissions.html' }\"></ng-container>\r\n        <button mat-button class=\"eav-button__with-icon\" [disabled]=\"!dialogSettings.Context.Enable.AppPermissions\" (click)=\"openPermissions()\">\r\n          <mat-icon matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgePosition=\"below after\"\r\n          [matBadge]=\"dialogSettings.Context.App.Permissions.Count || null\" aria-hidden=\"false\" class=\"eav-icon\">person</mat-icon>\r\n          <span>\r\n            Edit Permissions\r\n            @if (!dialogSettings.Context.Enable.AppPermissions) {\r\n              @if (isGlobal) {\r\n                (not on Global App)\r\n              }\r\n              @if (isApp) {\r\n                (not on Content)\r\n              }\r\n            }\r\n          </span>\r\n        </button>\r\n        <ng-container *ngTemplateOutlet=\"docsLink; context: { link: 'https://patrons.2sxc.org/features/feat/PermissionsByLanguage' }\"></ng-container>\r\n        <button mat-button class=\"eav-button__with-icon\" (click)=\"openLanguagePermissions(langPermsEnabled())\">\r\n          <mat-icon [matBadgeHidden]=\"langPermsEnabled()\" matBadgeSize=\"small\" matBadge=\"💎\"\r\n            matBadgePosition=\"below after\" aria-hidden=\"false\" class=\"eav-icon\">\r\n            person\r\n          </mat-icon>\r\n          <span>Language Permissions</span>\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n}\r\n\r\n<ng-template #docsLink let-icon let-label let-link=\"link\">\r\n  <a mat-button class=\"eav-button__with-icon\" href=\"{{link}}\" target=\"_blank\" [tippy]=\"'online documentation'\">\r\n    <mat-icon class=\"eav-icon\">{{ icon ?? \"menu_book\" }}</mat-icon>\r\n    <span>{{ label }}</span>\r\n  </a>\r\n</ng-template>\r\n<router-outlet></router-outlet>\r\n","import { AsyncPipe, NgTemplateOutlet } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef, inject } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Observable, Subject, map } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { ContentItemsService } from '../../content-items/services/content-items.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { SystemSettingsScopes, eavConstants } from '../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { AppScopes } from '../../shared/models/dialog-context.models';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { AppAdminHelpers } from '../app-admin-helpers';\r\nimport { ContentTypeEdit } from '../models';\r\nimport { AppInternals } from '../models/app-internals.model';\r\nimport { ContentTypesService } from '../services';\r\nimport { AppInternalsService } from '../services/app-internals.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { AnalyzeParts } from '../sub-dialogs/analyze-settings/analyze-settings.models';\r\nimport { AppConfigurationCardComponent } from './app-configuration-card/app-configuration-card.component';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration',\r\n  templateUrl: './app-configuration.component.html',\r\n  styleUrls: ['./app-configuration.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    NgTemplateOutlet,\r\n    AppConfigurationCardComponent,\r\n    FeatureTextInfoComponent,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class AppConfigurationComponent implements OnInit, OnDestroy {\r\n\r\n  #dialogSvc = transient(DialogService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n\r\n  dialogSettings: DialogSettings;\r\n\r\n  eavConstants = eavConstants;\r\n  AnalyzeParts = AnalyzeParts;\r\n  SystemSettingsScopes = SystemSettingsScopes;\r\n  AppScopes = AppScopes;\r\n  isGlobal: boolean;\r\n  isPrimary: boolean;\r\n  isApp: boolean;\r\n\r\n  // More proper ViewModel\r\n  appSettingsInternal$ = new Subject<AppInternals>();\r\n  viewModel$: Observable<AppConfigurationViewModel>;\r\n\r\n  public appStateAdvanced = false;\r\n  public features = inject(FeaturesScopedService);\r\n\r\n  protected lightSpeedEnabled = this.features.isEnabled[FeatureNames.LightSpeed];\r\n  protected cspEnabled = this.features.isEnabled[FeatureNames.ContentSecurityPolicy];\r\n  protected langPermsEnabled = this.features.isEnabled[FeatureNames.PermissionsByLanguage];\r\n\r\n  #appInternalsService = transient(AppInternalsService);\r\n\r\n  #contentItemsService = transient(ContentItemsService);\r\n\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  // TODO:: WIP\r\n  // loadData = signal(0);\r\n\r\n  // viewModelSig = computed(() => {\r\n  //   const load = this.loadData(); // Signal aufrufen\r\n  //   const s = this.#appInternalsService.getAppInternalsSig(); // Signal aufrufen\r\n  //   console.log('2dg computed', s.FieldAll.AppSettings?.length, load);\r\n\r\n  //   const props = s.EntityLists;\r\n  //   const lsTypeName = eavConstants.appMetadata.LightSpeed.ContentTypeName;\r\n\r\n  //   const result: AppConfigurationViewModel = {\r\n  //     appLightSpeedCount: s.MetadataList.Items.filter(i => i._Type.Name === lsTypeName).length,\r\n  //     systemSettingsCount: this.isPrimary\r\n  //       ? props.SettingsSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n  //       : props.SettingsSystem.filter(i => !i.SettingsEntityScope).length,\r\n  //     customSettingsCount: props.AppSettings?.length,\r\n  //     customSettingsFieldsCount: s.FieldAll.AppSettings?.length,\r\n  //     systemResourcesCount: this.isPrimary\r\n  //       ? props.ResourcesSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n  //       : props.ResourcesSystem.filter(i => !i.SettingsEntityScope).length,\r\n  //     customResourcesCount: props.AppResources?.length,\r\n  //     customResourcesFieldsCount: s.FieldAll.AppResources?.length,\r\n  //   };\r\n\r\n  //   return result;\r\n  // });\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    // New with proper ViewModel\r\n    this.viewModel$ = this.appSettingsInternal$.pipe(\r\n      map(s => {\r\n        const props = s.EntityLists;\r\n        const lsTypeName = eavConstants.appMetadata.LightSpeed.ContentTypeName;\r\n        const result: AppConfigurationViewModel = {\r\n          appLightSpeedCount: s.MetadataList.Items.filter(i => i._Type.Name == lsTypeName).length,\r\n          systemSettingsCount: this.isPrimary\r\n            ? props.SettingsSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n            : props.SettingsSystem.filter(i => !i.SettingsEntityScope).length,\r\n          customSettingsCount: props.AppSettings?.length,\r\n          customSettingsFieldsCount: s.FieldAll.AppSettings?.length,\r\n          systemResourcesCount: this.isPrimary\r\n            ? props.ResourcesSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n            : props.ResourcesSystem.filter(i => !i.SettingsEntityScope).length,\r\n          customResourcesCount: props.AppResources?.length,\r\n          customResourcesFieldsCount: s.FieldAll.AppResources?.length,\r\n        }\r\n        return result;\r\n      }));\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.fetchSettings();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchSettings());\r\n\r\n    this.#dialogConfigSvc.getCurrent$().subscribe((dialogSettings) => {\r\n      this.dialogSettings = dialogSettings;\r\n      const appScope = dialogSettings.Context.App.SettingsScope;\r\n      this.isGlobal = appScope === AppScopes.Global;\r\n      this.isPrimary = appScope === AppScopes.Site;\r\n      this.isApp = appScope === AppScopes.App;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  edit(staticName: string, systemSettingsScope?: Of<typeof SystemSettingsScopes>) {\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      let form: EditForm;\r\n\r\n      switch (staticName) {\r\n        case eavConstants.contentTypes.systemSettings:\r\n        case eavConstants.contentTypes.systemResources:\r\n          const systemSettingsEntities = contentItems.filter(i => systemSettingsScope === SystemSettingsScopes.App\r\n            ? !i.SettingsEntityScope\r\n            : i.SettingsEntityScope === SystemSettingsScopes.Site);\r\n          if (systemSettingsEntities.length > 1) {\r\n            throw new Error(`Found too many settings for type ${staticName}`);\r\n          }\r\n          const systemSettingsEntity = systemSettingsEntities[0];\r\n          form = {\r\n            items: [\r\n              systemSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName, {\r\n                  ...(systemSettingsScope === SystemSettingsScopes.Site && { SettingsEntityScope: SystemSettingsScopes.Site }),\r\n                })\r\n                : EditPrep.editId(systemSettingsEntity.Id)\r\n            ],\r\n          };\r\n          break;\r\n        case eavConstants.contentTypes.customSettings:\r\n        case eavConstants.contentTypes.customResources:\r\n          if (contentItems.length > 1) {\r\n            throw new Error(`Found too many settings for type ${staticName}`);\r\n          }\r\n          const customSettingsEntity = contentItems[0];\r\n          form = {\r\n            items: [\r\n              customSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName)\r\n                : EditPrep.editId(customSettingsEntity.Id)\r\n            ],\r\n          };\r\n          break;\r\n        default:\r\n          if (contentItems.length < 1) throw new Error(`Found no settings for type ${staticName}`);\r\n          if (contentItems.length > 1) throw new Error(`Found too many settings for type ${staticName}`);\r\n          form = {\r\n            items: [EditPrep.editId(contentItems[0].Id)],\r\n          };\r\n      }\r\n\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n    });\r\n  }\r\n\r\n  openLightSpeed() {\r\n    const form = AppAdminHelpers.getLightSpeedEditParams(this.context.appId);\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n  }\r\n\r\n  openSiteSettings() {\r\n    const sitePrimaryApp = this.dialogSettings.Context.Site.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(sitePrimaryApp.ZoneId, sitePrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  openGlobalSettings() {\r\n    const globalPrimaryApp = this.dialogSettings.Context.System.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(globalPrimaryApp.ZoneId, globalPrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  config(staticName: string) {\r\n    this.#dialogRouter.navParentFirstChild([`fields/${staticName}`]);\r\n  }\r\n\r\n  openPermissions() {\r\n    this.#dialogRouter.navParentFirstChild([GoToPermissions.getUrlApp(this.context.appId)]);\r\n  }\r\n\r\n  openLanguagePermissions(enabled: boolean) {\r\n    if (enabled)\r\n      this.#dialogRouter.navParentFirstChild(['language-permissions']);\r\n    else\r\n      openFeatureDialog(this.matDialog, FeatureNames.PermissionsByLanguage, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  analyze(part: Of<typeof AnalyzeParts>) {\r\n    this.#dialogRouter.navParentFirstChild([`analyze/${part}`]);\r\n  }\r\n\r\n  private fetchSettings() {\r\n    // TODO:: WIP\r\n    // const x = this.loadData();\r\n    // this.loadData.set(x +1);\r\n\r\n    const getObservable = this.#appInternalsService.getAppInternals();\r\n    getObservable.subscribe(x => {\r\n      // 2dm - New mode for Reactive UI\r\n      this.appSettingsInternal$.next(x);\r\n    });\r\n  }\r\n\r\n  fixContentType(staticName: string, action: 'edit' | 'config') {\r\n    this.#contentTypesSvc.retrieveContentTypes(eavConstants.scopes.configuration.value).subscribe(contentTypes => {\r\n      const contentTypeExists = contentTypes.some(ct => ct.Name === staticName);\r\n      if (contentTypeExists) {\r\n        if (action === 'edit') {\r\n          this.edit(staticName);\r\n        } else if (action === 'config') {\r\n          this.config(staticName);\r\n        }\r\n      } else {\r\n        const newContentType = {\r\n          StaticName: '',\r\n          Name: staticName,\r\n          Description: '',\r\n          Scope: eavConstants.scopes.configuration.value,\r\n          ChangeStaticName: false,\r\n          NewStaticName: '',\r\n        } as ContentTypeEdit;\r\n        this.#contentTypesSvc.save(newContentType).subscribe(success => {\r\n          if (!success) return;\r\n\r\n          if (action === 'edit') {\r\n            this.edit(staticName);\r\n          } else if (action === 'config') {\r\n            this.config(staticName);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nclass AppConfigurationViewModel {\r\n  // Lightspeed\r\n  appLightSpeedCount: number;\r\n\r\n  systemSettingsCount: number;\r\n  customSettingsCount: number;\r\n  customSettingsFieldsCount: number;\r\n  systemResourcesCount: number;\r\n  customResourcesCount: number;\r\n  customResourcesFieldsCount: number;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.apiUrl(webApiEntityList), {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.apiUrl(webApiViews), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiDataTypes), this.paramsAppId());\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiInputTypes), this.paramsAppId())\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => ({\r\n            dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n            inputType: config.Type,\r\n            label: config.Label,\r\n            description: config.Description,\r\n            isDefault: config.IsDefault,\r\n            isObsolete: config.IsObsolete,\r\n            isRecommended: config.IsRecommended,\r\n            obsoleteMessage: config.ObsoleteMessage,\r\n            icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n          } satisfies FieldInputTypeOption));\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiReservedNames));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), this.paramsAppId({ staticName: contentTypeStaticName }))\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId());\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfo(webApiFieldsGetShared, attributeId);\r\n    // return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfo(endpoint: string, attributeId: number) {\r\n    return this.http.get<Field[]>(this.apiUrl(endpoint), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[10]}