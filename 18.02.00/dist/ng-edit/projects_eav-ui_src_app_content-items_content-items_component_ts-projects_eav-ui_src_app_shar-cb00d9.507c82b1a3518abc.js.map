{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts-projects_eav-ui_src_app_shar-cb00d9.507c82b1a3518abc.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","__ngFactoryType__","factory","ɵfac","ExportAppPartsService","getContentInfo","webApiAppPartsRoot","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","EntityFilterComponent","constructor","filter","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","includes","items","headerName","idFltr","itm","getModel","filterType","setModel","model","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","selectors","viewQuery","rf","ctx","i0","$event","_r1","FormsModule","i1","MatRadioModule","MatFormFieldModule","i2","MatInputModule","i3","styles","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","verb","standalone","features","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","encapsulation","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","TippyDirective","ctx_r1","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","onOpenMetadata","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","NgClass","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","eavConstants","keyTypes","number","test","patternWholeNumber","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","dropdownInsertValue","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","valid","CreateMetadataDialogComponent","BaseComponent","dialog","super","hostClass","contentItemsService","transient","ContentItemsService","contentTypesService","ngOnInit","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","default","subscriptions","add","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","UiControl","disable","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","i6","MatOptionModule","i7","NgTemplateOutlet","MatButtonModule","i8","i9","MatDialogActions","MatSlideToggleModule","i10","AsyncPipe","FieldHintComponent","ClickStopPropagationDirective","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","debugFilter","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","matDialog","viewContainerRef","changeDetectorRef","log","classLog","isDebug","inject","GlobalConfigService","EntityEditService","ContentExportService","DialogRoutingService","signal","undefined","gridOptions","defaultGridOptions","#gridApi$","#contentTypeStaticName","getParam","fetchContentType","fetchItems","fetchColumns","doOnDialogClosed","onGridReady","set","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","a","setFilterModel","GoToMetadata","getUrlEntity","_Title","navRelative","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","importFile","lastIndexOf","toLocaleLowerCase","importContent","importItem","state","createMetadata","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","onCellClicked","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","clone","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","exportEntity","_RepositoryId","err","dismiss","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_34_Template","Name","tmp_1_0","Properties","ListInstructions","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","ImportAppService","importApp","changedName","retryOnDuplicate","MessageType","FileUploadMessageTypes","Warning","folderName","Text","of","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","inputs","ngContentSelectors","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","onClick","stopPropagation","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","webApiFieldsAll","webApiSetTitle","webApiFieldsGetShared","ContentTypesFieldsService","paramsAppId","more","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","indexOf","inputType","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","fields","fld","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","#getShareinfo","getAncestors","getDescendants","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","stringify","setTitle","rename","fieldId","newName","IsTitle","Error","newField","ContentTypeId","Index","SortOrder","updateInputType","Custom","Empty","Hyperlink","String","logSpecs","ServiceBase","router","route","snapshot","paramMap","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","callback","l","fnIf","childDialogClosed$","end","navPath","navigate","commands","relativeTo","navParentFirstChild","parent","firstChild","events","NavigationEnd","pairwise","hadChildBefore","hasChildNow","create","update","entityId","tryForce","webApiEntityRoot","force","all","getEntities","getAvailableEntities","EntityService","queryService","QueryService","getEntities$","contentTypeName","shareReplay","entitiesFilter","itemIds","Default","parentId","parentField","getFromQuery","queryUrl","hasParams","urlParams","Guids","Subscription","destroy","unsubscribe"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { AppInfo } from '../models/app-info.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.apiUrl(webApiEntityList), {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.apiUrl(webApiViews), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n  ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"do('clone')\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n  ],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n  standalone: true,\r\n  imports: [TippyDirective,],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n  <div class=\"eav-grid-action-button highlight\" matRipple\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n      matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  }\r\n  @if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n  <div class=\"eav-grid-action-button disabled\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n      : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    MatRippleModule,\r\n    NgClass,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: Of<typeof MetadataKeyTypes> = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      This is a special operation to add an item which is metadata for another item,\r\n      see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n    </p>\r\n    <form [formGroup]=\"form\">\r\n      <!-- Target Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Target</mat-label>\r\n        @if (vm.guidedMode) {\r\n        <mat-select formControlName=\"targetType\" required>\r\n          @for (option of targetTypeOptions; track option) {\r\n          <mat-option [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          }\r\n          @if (vm.unknownTargetType) {\r\n          <mat-option [value]=\"vm.formValues.targetType\">\r\n            {{ vm.formValues.targetType }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedMode) {\r\n        <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n      <app-field-hint [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n        doing\r\n      </app-field-hint>\r\n      }\r\n      @if (vm.targetTypeHint) {\r\n      <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      }\r\n      <!-- Key Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key type</mat-label>\r\n        <mat-select formControlName=\"keyType\" required>\r\n          @for (option of vm.keyTypeOptions; track option) {\r\n          <mat-option [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      <!-- Content Type for Content Items -->\r\n      @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n          @for (contentType of vm.contentTypes; track contentType) {\r\n          <mat-option [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <!-- Scope for Content Types -->\r\n      @if (vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n      vm.formValues.targetType === eavConstants.metadata.contentType.targetType)) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Scope</mat-label>\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n          @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n          <mat-option [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n      <!-- Key -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key</mat-label>\r\n        @if (vm.guidedMode) {\r\n          @switch (vm.formValues.targetType) {\r\n            @case (eavConstants.metadata.entity.targetType) {\r\n              @if (vm.guidedKey) {\r\n              <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                @for (item of vm.contentItems; track item) {\r\n                  <mat-option [value]=\"item.Guid\">\r\n                    {{ item.Title }} ({{ item.Id }})\r\n                  </mat-option>\r\n                }\r\n              </mat-select>\r\n              }\r\n              @else {\r\n                <input matInput type=\"text\" formControlName=\"key\" required>\r\n              }\r\n            }\r\n            @case (eavConstants.metadata.contentType.targetType) {\r\n              @if (vm.guidedKey) {\r\n              <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                @for (contentType of vm.contentTypes; track contentType) {\r\n                  <mat-option [value]=\"contentType.StaticName\">\r\n                    {{ contentType.Label }}\r\n                  </mat-option>\r\n                }\r\n              </mat-select>\r\n              }\r\n              @else {\r\n                <input matInput type=\"text\" formControlName=\"key\" required>\r\n              }\r\n            }\r\n            @default {\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            }\r\n          }\r\n        }\r\n        @else {\r\n          @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n            <input matInput type=\"text\" formControlName=\"key\" required>\r\n          }\r\n          @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n            <input matInput type=\"number\" formControlName=\"key\" required>\r\n          }\r\n        }\r\n        <ng-template #defaultKeyInput>\r\n          @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n            <input matInput type=\"text\" formControlName=\"key\" required>\r\n          }\r\n          @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n            <input matInput type=\"number\" formControlName=\"key\" required>\r\n          }\r\n        </ng-template>\r\n        @if (vm.guidedMode && vm.guidedKeyExists) {\r\n          <div matTextSuffix class=\"eav-selection-suffix\">\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n              [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\" (click)=\"toggleGuidedKey(true)\">\r\n              <mat-icon class=\"eav-icon\">search</mat-icon>\r\n            </button>\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n              [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\" (click)=\"toggleGuidedKey(false)\">\r\n              <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n            </button>\r\n          </div>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n        <app-field-hint [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n        <app-field-hint [isError]=\"true\">\r\n          Must be a whole number\r\n        </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n        <app-field-hint [isError]=\"true\">\r\n          Must be a valid GUID\r\n        </app-field-hint>\r\n      }\r\n    </form>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <mat-slide-toggle color=\"accent\"\r\n      [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n      [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n      {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n    </mat-slide-toggle>\r\n    <div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </mat-dialog-actions>\r\n</div>\r\n}\r\n","import { AsyncPipe, NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyTypes, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: Of<typeof MetadataKeyTypes>[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<Of<typeof MetadataKeyTypes>[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n  \r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialog: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<Of<typeof MetadataKeyTypes>[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.form.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.form.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRadioModule,\r\n    FormsModule,\r\n  ],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ contentType()?.Label || contentType()?.Name }} Data\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n    <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    }\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items()\" [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n      }\r\n    </div>\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, inject, OnDestroy, OnInit, signal, ViewContainerRef } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, filter, take } from 'rxjs';\r\nimport { transient } from '../../../../core';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../shared/logging';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n\r\n  log = classLog({ContentItemsComponent});\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  contentType = signal<ContentType>(undefined);\r\n  items = signal<ContentItem[]>(undefined);\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  #gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.#gridApi$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.#contentTypesSvc.retrieveContentType(this.#contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType.set(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.#contentItemsSvc.getAll(this.#contentTypeStaticName).subscribe(items => {\r\n      this.items.set(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumns(this.#contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.#gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.#gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.#gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.#dialogRouter.navRelative([`export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`]);\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.#dialogRouter.navRelative([`${this.#contentTypeStaticName}/import`], { state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.matDialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [ EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor) ],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (p) => {\r\n          const item: ContentItem = p.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        onCellClicked: (p: { data: ContentItem }) => this.editItem(p.data),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'clone': this.clone(item); break;\r\n                case 'export': this.export(item); break;\r\n                case 'delete': this.delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n  standalone: true,\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n\r\n    // This should never be added here, as it's often on a link, and the default behavior (link open) should happen\r\n    // event.preventDefault();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n  standalone: true\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiDataTypes), this.paramsAppId());\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiInputTypes), this.paramsAppId())\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => ({\r\n            dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n            inputType: config.Type,\r\n            label: config.Label,\r\n            description: config.Description,\r\n            isDefault: config.IsDefault,\r\n            isObsolete: config.IsObsolete,\r\n            isRecommended: config.IsRecommended,\r\n            obsoleteMessage: config.ObsoleteMessage,\r\n            icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n          } satisfies FieldInputTypeOption));\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiReservedNames));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), this.paramsAppId({ staticName: contentTypeStaticName }))\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId());\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfo(webApiFieldsGetShared, attributeId);\r\n    // return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfo(endpoint: string, attributeId: number) {\r\n    return this.http.get<Field[]>(this.apiUrl(endpoint), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({DialogRoutingService}, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBase } from './http-service-base';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBase {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}