{"version":3,"file":"projects_eav-ui_src_app_app-administration_web-api-rest-api_web-api-rest-api_component_ts.0e77908ded93f1b2.js","mappings":"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","names":["i0","endpoint_r1","path","name","WebApiRestApiComponent_Conditional_5_For_1_Template","ctx","sort","WebApiRestApiComponent","#sourceSvc","#dialogRouter","constructor","fb","this","transient","SourceService","DialogRoutingService","webApis$","BehaviorSubject","undefined","ngOnInit","fetchWebApis","webApiTypeForm","group","webApiType","getWebApis","subscribe","webApis","next","urlSegments","url","split","encodedUrlPath","length","replace","selectedContentType","find","webApi","get","setValue","openRestApi","apiRoute","navParentFirstChild","encodeURIComponent","i1","selectors","standalone","features","decls","vars","consts","template","rf","$event","WebApiRestApiComponent_Conditional_5_Template","tmp_1_0","MatSelectModule","i2","i3","i4","MatButtonModule","MatCardModule","MatIconModule","ReactiveFormsModule","AsyncPipe","RouterOutlet","SxcGridModule","encapsulation","appFilesAsset","HttpServiceBase","viewKey","global","urlItems","http","apiUrl","params","appId","templateIdOrPath","pipe","map","view","Type","toLocaleLowerCase","Extension","save","post","getAll","mask","Files","forEach","file","Shared","files","isShared","isCompiled","splitIndex","lastIndexOf","fileExtIndex","folder","substring","endpointPath","edition","getWebApiDetails","apiPath","zoneId","getPredefinedTemplates","purpose","type","getPreview","templateKey","create","test","i","EntityId","toString","IsShared","Path","templateId","__ngFactoryType__","factory","Éµfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/web-api-rest-api/web-api-rest-api.component.html","./projects/eav-ui/src/app/app-administration/web-api-rest-api/web-api-rest-api.component.ts","./projects/eav-ui/src/app/code-editor/services/source.service.ts"],"sourcesContent":["<form [formGroup]=\"webApiTypeForm\">\r\n  <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n    <mat-label>Endpoint</mat-label>\r\n    <mat-select formControlName=\"webApiType\" (valueChange)=\"openRestApi($event)\">\r\n      @if (webApis$ | async; as endpoints) {\r\n        @for (endpoint of endpoints.sort() ; track endpoint) {\r\n        <mat-option [value]=\"endpoint.path\">\r\n          {{ endpoint.name }}\r\n        </mat-option>\r\n        }\r\n      }\r\n    </mat-select>\r\n  </mat-form-field>\r\n</form>\r\n\r\n<router-outlet></router-outlet>\r\n","import { AsyncPipe } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { SourceService } from '../../code-editor/services/source.service';\r\nimport { DevRestQueryComponent } from '../../dev-rest/query/query.component';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { WebApi } from '../models';\r\n\r\n@Component({\r\n  selector: 'app-web-api-rest-api',\r\n  standalone: true,\r\n  imports: [\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    AsyncPipe,\r\n    DevRestQueryComponent,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n  ],\r\n  templateUrl: './web-api-rest-api.component.html',\r\n})\r\nexport class WebApiRestApiComponent {\r\n  #sourceSvc = transient(SourceService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  webApis$ = new BehaviorSubject<WebApi[]>(undefined);\r\n  webApiTypeForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchWebApis();\r\n    this.webApiTypeForm = this.fb.group({\r\n      webApiType: ['']\r\n    });\r\n  }\r\n\r\n  fetchWebApis() {\r\n    this.#sourceSvc.getWebApis().subscribe((webApis: WebApi[]) => {\r\n      this.webApis$.next(webApis);\r\n      // When Route are reload and have some Guid in the Route\r\n      const urlSegments = this.#dialogRouter.url.split('/');\r\n      const urlPath = urlSegments[urlSegments.length - 1]\r\n      var encodedUrlPath = urlPath.replace(\"%252F\", \"/\");\r\n\r\n      const selectedContentType = webApis.find(webApi => webApi.path === encodedUrlPath);\r\n\r\n      if (selectedContentType)\r\n        this.webApiTypeForm.get('webApiType').setValue(selectedContentType.path);\r\n    });\r\n  }\r\n\r\n  openRestApi(apiRoute: string): void {\r\n    if (!apiRoute) return;\r\n    this.#dialogRouter.navParentFirstChild([encodeURIComponent(apiRoute)]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { WebApi, WebApiDetails } from '../../app-administration/models';\r\nimport { ViewOrFileIdentifier } from '../../shared/models/edit-form.model';\r\nimport { FileAsset } from '../models/file-asset.model';\r\nimport { PredefinedTemplatesResponse } from '../models/predefined-template.model';\r\nimport { Preview } from '../models/preview.models';\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst appFilesAll = 'admin/AppFiles/AppFiles';\r\nconst appFilesAsset = 'admin/AppFiles/asset';\r\nconst appFilesCreate = 'admin/AppFiles/create';\r\nconst apiExplorerInspect = 'admin/ApiExplorer/inspect';\r\nconst apiExplorerAppApiFiles = 'admin/ApiExplorer/AppApiFiles';\r\nconst appFilesPredefinedTemplates = 'admin/AppFiles/GetTemplates';\r\nconst appFilesPreview = 'admin/AppFiles/preview';\r\n\r\n@Injectable()\r\nexport class SourceService extends HttpServiceBase {\r\n\r\n  /** ViewKey is templateId or path */\r\n  get(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[]): Observable<SourceView> {\r\n    return this.http.get<SourceView>(this.apiUrl(appFilesAsset), {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        ...this.templateIdOrPath(viewKey, global, urlItems),\r\n      },\r\n    }).pipe(\r\n      map(view => {\r\n        if (view.Type.toLocaleLowerCase() === 'auto') {\r\n          switch (view.Extension.toLocaleLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** ViewKey is templateId or path */\r\n  save(viewKey: string, global: boolean, view: SourceView, urlItems: ViewOrFileIdentifier[]): Observable<boolean> {\r\n    return this.http.post<boolean>(this.apiUrl(appFilesAsset), view, {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        ...this.templateIdOrPath(viewKey, global, urlItems),\r\n      },\r\n    });\r\n  }\r\n\r\n  getAll(mask?: string): Observable<FileAsset[]> {\r\n    return this.http.get<{ Files: FileAsset[] }>(this.apiUrl(appFilesAll), {\r\n      params: {\r\n        appId: this.appId,\r\n        ...(mask && { mask }),\r\n      },\r\n    }).pipe(\r\n      map(({ Files }) => {\r\n        Files.forEach(file => {\r\n          file.Shared ??= false;\r\n        });\r\n        return Files;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getWebApis(): Observable<WebApi[]> {\r\n    return this.http.get<{ files: WebApi[] }>(this.apiUrl(apiExplorerAppApiFiles), {\r\n      params: {\r\n        appId: this.appId,\r\n      },\r\n    }).pipe(\r\n      map(({ files }) => {\r\n        files.forEach(file => {\r\n          file.isShared ??= false;\r\n          file.isCompiled ??= false;\r\n        });\r\n        return files;\r\n      }),\r\n    ).pipe(\r\n      map(files => {\r\n        const webApis: WebApi[] = files.map(file => {\r\n          const splitIndex = file.path.lastIndexOf('/');\r\n          const fileExtIndex = file.path.lastIndexOf('.');\r\n          const folder = file.path.substring(0, splitIndex);\r\n          const name = file.path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path: file.path, folder, name, isShared: file.isShared, endpointPath: file.endpointPath, isCompiled: file.isCompiled, edition: file.edition };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getWebApiDetails(apiPath: string): Observable<WebApiDetails> {\r\n    return this.http.get<WebApiDetails>(this.apiUrl(apiExplorerInspect), {\r\n      params: { appId: this.appId, zoneId: this.zoneId, path: apiPath },\r\n    });\r\n  }\r\n\r\n  getPredefinedTemplates(purpose?: 'Template' | 'Search' | 'Api', type?: 'Token' | 'Razor'): Observable<PredefinedTemplatesResponse> {\r\n    return this.http.get<PredefinedTemplatesResponse>(this.apiUrl(appFilesPredefinedTemplates), {\r\n      params: {\r\n        ...(purpose && { purpose }),\r\n        ...(type && { type }),\r\n      },\r\n    });\r\n  }\r\n\r\n  getPreview(path: string, global: boolean, templateKey: string): Observable<Preview> {\r\n    return this.http.get<Preview>(this.apiUrl(appFilesPreview), {\r\n      params: {\r\n        appId: this.appId,\r\n        path,\r\n        templateKey,\r\n        global,\r\n      },\r\n    });\r\n  }\r\n\r\n  create(path: string, global: boolean, templateKey: string): Observable<boolean> {\r\n    return this.http.post<boolean>(this.apiUrl(appFilesCreate), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        purpose: 'auto',\r\n        path,\r\n        templateKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  private templateIdOrPath(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[]) {\r\n    if (/^[0-9]*$/g.test(viewKey)) {\r\n      const path = urlItems.find(i => i.EntityId?.toString() === viewKey && i.IsShared === global)?.Path;\r\n      return {\r\n        templateId: viewKey,\r\n        ...(path != null && { path }),\r\n      };\r\n    } else {\r\n      return { path: viewKey };\r\n    }\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}