{"version":3,"file":"projects_eav-ui_src_app_content-items_import-content-item_import-content-item_component_ts-pr-ca2267.8b23820f299dac2e.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","__ngFactoryType__","factory","ɵfac","ExportAppPartsService","getContentInfo","webApiAppPartsRoot","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","ImportContentItemComponent","constructor","dialogData","uploadType","UploadTypes","ContentItem","contentItemsService","transient","ContentItemsService","title","description","allowedFileTypes","upload$","importItem","i0","MAT_DIALOG_DATA","selectors","standalone","features","decls","vars","consts","template","rf","ctx","FileUploadDialogComponent","encapsulation","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","webApiFieldsAll","webApiSetTitle","webApiFieldsGetShared","ContentTypesFieldsService","paramsAppId","more","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","#getShareinfo","getAncestors","getDescendants","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","JSON","stringify","setTitle","item","rename","fieldId","newName","IsTitle","Error","add","newField","ContentTypeId","Index","SortOrder","updateInputType","field","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","logSpecs","all","getEntities","getAvailableEntities","webApiEntityRoot","EntityService","log","classLog","queryService","QueryService","getEntities$","fnIf","filter","p","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","data","Default","entityId","force","parentId","parentField","parent","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","Guids","i1","i2"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.html","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { AppInfo } from '../models/app-info.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.apiUrl(webApiEntityList), {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.apiUrl(webApiViews), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { transient } from '../../../../../core';\r\nimport { FileUploadDialogComponent, FileUploadDialogData, UploadTypes } from '../../shared/components/file-upload-dialog';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\n\r\n@Component({\r\n  selector: 'app-import-content-item',\r\n  templateUrl: './import-content-item.component.html',\r\n  standalone: true,\r\n  imports: [FileUploadDialogComponent,],\r\n})\r\nexport class ImportContentItemComponent {\r\n\r\n  uploadType = UploadTypes.ContentItem;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData) {\r\n    dialogData.title ??= `Import Single Item`;\r\n    dialogData.description ??= `Select an item file (json) from your computer to import.`;\r\n    dialogData.allowedFileTypes ??= 'json';\r\n    dialogData.upload$ ??= (files) => this.contentItemsService.importItem(files[0]);\r\n  }\r\n\r\n}\r\n","<app-file-upload-dialog [uploadType]=\"uploadType\"></app-file-upload-dialog>\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiDataTypes), this.paramsAppId());\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiInputTypes), this.paramsAppId())\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => ({\r\n            dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n            inputType: config.Type,\r\n            label: config.Label,\r\n            description: config.Description,\r\n            isDefault: config.IsDefault,\r\n            isObsolete: config.IsObsolete,\r\n            isRecommended: config.IsRecommended,\r\n            obsoleteMessage: config.ObsoleteMessage,\r\n            icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n          } satisfies FieldInputTypeOption));\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiReservedNames));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), this.paramsAppId({ staticName: contentTypeStaticName }))\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId());\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfo(webApiFieldsGetShared, attributeId);\r\n    // return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfo(endpoint: string, attributeId: number) {\r\n    return this.http.get<Field[]>(this.apiUrl(endpoint), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}