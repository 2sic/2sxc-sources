{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_analyze-settings_analyze-settings_comp-6cd38e.f37bfc3ebded8237.js","mappings":"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","names":["webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","HttpServiceBase","getAll","contentType","this","http","get","apiUrl","webApiEntityList","params","appId","importQuery","file","from","toBase64","pipe","switchMap","fileBase64","post","AppId","ContentBase64","map","success","Success","Messages","clonePipeline","id","Id","toString","delete","__ngFactoryType__","factory","Éµfac","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","import","formData","FormData","append","zoneId","export","url","window","open","getPolymorphism","getUsage","guid","AnalyzeSettingsKeyComponent","constructor","clipboard","transient","ClipboardService","agInit","key","value","refresh","selectors","standalone","features","i0","decls","vars","consts","template","rf","ctx","copyToClipboard","MatRippleModule","i1","TippyDirective","styles","ctx_r0","totalResults","_r2","openDetails","AnalyzeSettingsTotalResultsComponent","stackItem","data","AnalyzeSettingsTotalResultsComponent_Conditional_0_Template","AnalyzeSettingsTotalResultsComponent_Conditional_1_Template","MatIconModule","i2","view_r1","Guid","Name","AnalyzeSettingsComponent","#viewsSvc","#analyzeSettingsSvc","#dialogRouter","dialog","gridOptions","buildGridOptions","AnalyzeSettingsService","DialogRoutingService","views","signal","selectedView","undefined","stack","part","getParam","ngOnInit","getViews","getStack","closeDialog","close","changeView","viewGuid","set","subscribe","defaultGridOptions","columnDefs","ColumnDefinitions","TextWideActionClass","headerName","field","cellRenderer","AnalyzeSettingsValueComponent","TextNarrow","Items","width","cellClass","cellRendererParams","navRelative","Path","$event","AnalyzeSettingsComponent_For_19_Template","MatButtonModule","i3","RouterOutlet","MatFormFieldModule","i4","MatSelectModule","i5","i6","FormsModule","i7","MatOptionModule","SxcGridModule","i8","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.apiUrl(webApiEntityList), {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.apiUrl(webApiViews), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { transient } from '../../../../../../../core/transient';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { ClipboardService } from '../../../../shared/services/clipboard.service';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-key',\r\n  templateUrl: './analyze-settings-key.component.html',\r\n  styleUrls: ['./analyze-settings-key.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class AnalyzeSettingsKeyComponent implements ICellRendererAngularComp {\r\n  key: string;\r\n\r\n  constructor() { }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.key = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div matRipple class=\"key-box highlight\" [tippy]=\"key\" (click)=\"clipboard.copyToClipboard(key)\">\r\n  <span class=\"key\">{{ key }}</span>\r\n</div>\r\n","@if (totalResults <= 1) {\r\n  <div class=\"input-component no-click\">\r\n    <div>{{ totalResults }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>search</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (totalResults > 1) {\r\n  <div matRipple class=\"input-component highlight\" tippy=\"Open details\" (click)=\"openDetails()\">\r\n    <div class=\"text\">{{ totalResults }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>search</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { SettingsStackItem } from '../analyze-settings.models';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results.models';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-total-results',\r\n  templateUrl: './analyze-settings-total-results.component.html',\r\n  styleUrls: ['./analyze-settings-total-results.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    MatRippleModule,\r\n  ],\r\n})\r\nexport class AnalyzeSettingsTotalResultsComponent implements ICellRendererAngularComp {\r\n  totalResults: number;\r\n\r\n  private stackItem: SettingsStackItem;\r\n  private params: ICellRendererParams & AnalyzeSettingsTotalResultsParams;\r\n\r\n  agInit(params: ICellRendererParams & AnalyzeSettingsTotalResultsParams): void {\r\n    this.totalResults = params.value;\r\n    this.params = params;\r\n    this.stackItem = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openDetails(): void {\r\n    this.params.openDetails(this.stackItem);\r\n  }\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-mdc-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Analyze {{ part }}</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <div class=\"padding-class\">\r\n    <p class=\"dialog-description\">\r\n      Settings and Resources are consolidated from many sources. Here you see what the resulting values would be.\r\n    </p>\r\n    <router-outlet></router-outlet>\r\n    <mat-form-field color=\"accent\" class=\"view-select-box\">\r\n      <mat-label>Merge settings / resources of a View</mat-label>\r\n      <mat-select [ngModel]=\"selectedView()\" (ngModelChange)=\"changeView($event)\">\r\n        <mat-option [value]=\"undefined\">No view selected - this is how APIs see the data</mat-option>\r\n        @for (view of views(); track view) {\r\n        <mat-option [value]=\"view.Guid\">{{ view.Name }}</mat-option>\r\n        }\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper padding-class\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"stack()\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n    <div class=\"grid-more-actions-box\"></div>\r\n  </div>\r\n</div>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Of, transient } from '../../../../../../core';\r\nimport { ColumnDefinitions } from '../../../shared/ag-grid/column-definitions';\r\nimport { defaultGridOptions } from '../../../shared/constants/default-grid-options.constants';\r\nimport { SxcGridModule } from '../../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../../shared/routing/dialog-routing.service';\r\nimport { View } from '../../models';\r\nimport { ViewsService } from '../../services';\r\nimport { AnalyzeSettingsService } from '../../services/analyze-settings.service';\r\nimport { AnalyzeSettingsKeyComponent } from './analyze-settings-key/analyze-settings-key.component';\r\nimport { AnalyzeSettingsTotalResultsComponent } from './analyze-settings-total-results/analyze-settings-total-results.component';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results/analyze-settings-total-results.models';\r\nimport { AnalyzeSettingsValueComponent } from './analyze-settings-value/analyze-settings-value.component';\r\nimport { AnalyzeParts, SettingsStackItem } from './analyze-settings.models';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings',\r\n  templateUrl: './analyze-settings.component.html',\r\n  styleUrls: ['./analyze-settings.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class AnalyzeSettingsComponent implements OnInit {\r\n  part: Of<typeof AnalyzeParts>;\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  #viewsSvc = transient(ViewsService);\r\n  #analyzeSettingsSvc = transient(AnalyzeSettingsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  views = signal<View[]>([]);\r\n  selectedView = signal<string>(undefined);\r\n  stack = signal<SettingsStackItem[]>([]);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<AnalyzeSettingsComponent>,\r\n  ) {\r\n    this.part = this.#dialogRouter.getParam('part') as Of<typeof AnalyzeParts>;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getViews();\r\n    this.getStack();\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  changeView(viewGuid: string): void {\r\n    this.selectedView.set(viewGuid);\r\n    this.getStack();\r\n  }\r\n\r\n  private getViews(): void {\r\n    this.#viewsSvc.getAll().subscribe(views => {\r\n      this.views.set(views);\r\n    });\r\n  }\r\n\r\n  private getStack(): void {\r\n    this.#analyzeSettingsSvc.getStack(this.part, undefined, this.selectedView(), true).subscribe(stack => {\r\n      this.stack.set(stack);\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.TextWideActionClass,\r\n          headerName: 'Key',\r\n          field: 'Path',\r\n          cellRenderer: AnalyzeSettingsKeyComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideActionClass,\r\n          headerName: 'Value',\r\n          field: '_value',\r\n          cellRenderer: AnalyzeSettingsValueComponent,\r\n        },\r\n        {\r\n          field: 'Source',\r\n          ...ColumnDefinitions.TextNarrow,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Items,\r\n          headerName: 'Total',\r\n          field: 'TotalResults',\r\n          width: 72,\r\n          cellClass: 'no-outline',\r\n          cellRenderer: AnalyzeSettingsTotalResultsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: AnalyzeSettingsTotalResultsParams = {\r\n              openDetails: (stackItem) => {\r\n                this.#dialogRouter.navRelative([`details/${this.selectedView()}/${stackItem.Path}`]);\r\n              },\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"x_google_ignoreList":[]}