{"version":3,"file":"projects_eav-ui_src_app_content-export_content-export_component_ts.2e176d76890b8609.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","__ngFactoryType__","factory","Éµfac","i0","lang_r3","NameId","ctx_r1","itemIds","length","$event","_r1","formValues","language","ContentExportComponent_Conditional_5_For_17_Template","recordExport","ContentExportComponent_Conditional_5_Conditional_26_Template","languageReferences","resourcesReferences","closeDialog","exportContent","languages","hasIdList","ngForm_r4","form","valid","ContentExportComponent","constructor","dialog","route","hostClass","contentExportService","transient","ContentExportService","contentTypesService","dialogConfigSvc","DialogConfigAppService","loading$","BehaviorSubject","contentType$","contentTypeStaticName","snapshot","paramMap","selectedIds","split","id","parseInt","ngOnInit","next","dialogSettings$","getCurrent$","forkJoin","subscribe","dialogSettings","Context","Language","List","defaultLanguage","Primary","ngOnDestroy","complete","close","i1","i2","selectors","hostVars","hostBindings","rf","ctx","ContentExportComponent_Conditional_5_Template","tmp_0_0","Name","FormsModule","i3","MatFormFieldModule","i4","MatSelectModule","i5","i6","MatOptionModule","MatRadioModule","i7","MatDialogActions","MatButtonModule","i8","AsyncPipe","styles","values","selectedIdsString","join","url","webApiEntityRoot","window","open","exportJson","typeName","exportEntity","prefix","metadata","logSpecs","all","getEntities","getAvailableEntities","webApiEntityList","EntityService","log","classLog","queryService","QueryService","getEntities$","fnIf","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","fields","data","Default","entityId","force","parentId","parentField","parent","toString","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-export/content-export.component.html","./projects/eav-ui/src/app/content-export/content-export.component.ts","./projects/eav-ui/src/app/content-export/services/content-export.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Export {{ (contentType$ | async)?.Name }}</div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n    <form #ngForm=\"ngForm\">\r\n      <div class=\"eav-dialog-content\">\r\n        <p>\r\n          This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to export the schema\r\n          that you can then fill in using Excel. Please visit\r\n          <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n        </p>\r\n        <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n          <div>\r\n            <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n              <mat-label>Languages</mat-label>\r\n              <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n                <mat-option value=\"\">All</mat-option>\r\n                @for (lang of languages; track lang) {\r\n                  <mat-option [value]=\"lang.NameId\">{{ lang.NameId }}</mat-option>\r\n                }\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Export data</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import) </mat-radio-button>\r\n              <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n              @if (hasIdList) {\r\n                <mat-radio-button value=\"Selection\"> Export selected {{ itemIds.length }} items </mat-radio-button>\r\n              }\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Value references to other languages</p>\r\n            <mat-radio-group\r\n              [(ngModel)]=\"formValues.languageReferences\"\r\n              name=\"LanguageReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\"\r\n              class=\"eav-radio-group\"\r\n            >\r\n              <mat-radio-button value=\"Link\">Keep references to other languages (for re-import) </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">File / page references</p>\r\n            <mat-radio-group\r\n              [(ngModel)]=\"formValues.resourcesReferences\"\r\n              name=\"ResourcesReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\"\r\n              class=\"eav-radio-group\"\r\n            >\r\n              <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711) </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example /Portals/0...) </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-actions align=\"end\">\r\n        <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">Export Data</button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>\r\n","import { AsyncPipe } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { transient } from '../../../../core';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { DialogConfigAppService } from '../app-administration/services/dialog-config-app.service';\r\nimport { Language } from '../shared/models/language.model';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@Component({\r\n  selector: 'app-content-export',\r\n  templateUrl: './content-export.component.html',\r\n  styleUrls: ['./content-export.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatRadioModule,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    AsyncPipe,\r\n  ],\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentExportService = transient(ContentExportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.languages = dialogSettings.Context.Language.List;\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { ContentExport } from '../models/content-export.model';\r\nimport { webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ContentExportService extends HttpServiceBase {\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}