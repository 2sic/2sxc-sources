{"version":3,"file":"projects_eav-ui_src_app_apps-management_add-app-from-folder_add-app-from-folder_component_ts--ecd9e6.9270d09bc2396cf5.js","mappings":"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","names":["AppNameShowComponent","agInit","params","this","name","value","tooltip","tooltipGetter","data","refresh","selectors","standalone","features","i0","decls","vars","consts","template","rf","ctx","MatIconModule","i1","TippyDirective","styles","CheckboxCellComponent","onChange","event","currentTarget","checked","$event","isDisabled","ctx_r0","pendingApps","gridOptions","AddAppFromFolderComponent","#isAddFromFolderEnabled","constructor","dialog","snackBar","hostClass","buildGridOptions","installing","signal","inject","FeaturesScopedService","isEnabled","FeatureNames","AppSyncWithSiteFiles","appsListService","transient","AppsListService","ngOnInit","getPendingApps","subscribe","apps","set","closeDialog","close","app","enabled","pendingAppsTemp","push","splice","indexOf","install","open","undefined","duration","installPendingApps","error","next","defaultGridOptions","columnDefs","field","width","cellClass","sortable","cellRenderer","cellRendererParams","ColumnDefinitions","ItemsText","flex","sort","pendingApp","ServerFolder","Folder","Version","Description","i2","hostVars","hostBindings","AddAppFromFolderComponent_Conditional_8_Template","AddAppFromFolderComponent_Conditional_9_Template","tmp_1_0","length","tmp_2_0","MatDialogActions","MatButtonModule","i3","FeatureTextInfoComponent","SxcGridModule","i4","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","ContentTypeFieldsReuseDefinitions","AppExportAssetsAdvanced","PickerUiCheckbox","PickerUiRadio","PickerSourceCsv","PickerSourceAppAssets","PickerFormulas","PickerUiMoreInfo","_r1","ctx_r1","openDialog","feature","icon","FeatureComponentBase","super","asInfo","input","computedObj","inputs","ngContentSelectors","_c0","FeatureTextInfoComponent_Conditional_0_Template","show","TranslateModule","FeatureDetailService","HttpServiceBase","getFeatureDetails","nameId","http","get","apiUrl","__ngFactoryType__","factory","Éµfac","id_r3","_r2","ctx_r3","clipboard","copyToClipboard","FeatureInfoDialogComponent_Conditional_0_Conditional_15_Template","feat_r5","description","tmp_6_0","link","FeatureInfoDialogComponent","#featureDetailSvc","dialogData","featureDetails","signalObj","ClipboardService","f","MAT_DIALOG_DATA","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0","MatCardModule","i5","i6","SafeHtmlPipe","encapsulation","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","featureNameId","required","showIf","MatDialog","ViewContainerRef","ChangeDetectorRef","getCurrent","feat","openFeatureDialog","featureId","viewContainerRef","changeDetectorRef","autoFocus","markForCheck","webApiAppRoot","ImportAppService","importApp","file","changedName","retryOnDuplicate","formData","FormData","append","post","zoneId","pipe","switchMap","result","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-app-name-show',\r\n  templateUrl: './app-name-show.component.html',\r\n  styleUrls: ['./app-name-show.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class AppNameShowComponent implements ICellRendererAngularComp {\r\n  name: string;\r\n  tooltip: string;\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.name = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"name-box\">\r\n  <span>{{ name }}</span>\r\n  <mat-icon class=\"info-icon\" [tippy]=\"tooltip\">info</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { CheckboxCellParams } from './checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-cell',\r\n  templateUrl: './checkbox-cell.component.html',\r\n  styleUrls: ['./checkbox-cell.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class CheckboxCellComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams & CheckboxCellParams;\r\n\r\n  agInit(params: ICellRendererParams & CheckboxCellParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  public onChange(event: any) {\r\n    this.params.onChange(this.params.data, event.currentTarget.checked);\r\n  }\r\n}\r\n","<div class=\"checkbox-box\">\r\n  <input class=\"checkbox-input\" type=\"checkbox\" [disabled]=\"params.isDisabled\" [checked]=\"params.value\" (change)=\"onChange($event)\">\r\n</div>\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Add App from Folder</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <app-feature-text-info [featureNameId]=\"'AppSyncWithSiteFiles'\"></app-feature-text-info>\r\n    <p>\r\n      Select an app from the apps-folder which has been copied there (or git-cloned) but not installed yet.\r\n    </p>\r\n    @if (pendingApps()?.length == 0) {\r\n    <p>\r\n      Nothing to show. All apps in the 2sxc folder are already installed.\r\n    </p>\r\n    }\r\n    @if (pendingApps()?.length > 0) {\r\n    <div>\r\n      <ag-grid-angular class=\"ag-theme-material eav-grid\" [rowData]=\"pendingApps()\" [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n    </div>\r\n    }\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button type=\"button\" mat-raised-button (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"pendingApps().length === 0 || installing\"\r\n      (click)=\"install()\">\r\n      Install\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, HostBinding, OnInit, inject, signal } from \"@angular/core\";\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../core';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from \"../../shared/constants/default-grid-options.constants\";\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { PendingApp } from \"../models/app.model\";\r\nimport { AppsListService } from \"../services/apps-list.service\";\r\nimport { AppNameShowComponent } from './app-name-show/app-name-show.component';\r\nimport { CheckboxCellComponent } from './checkbox-cell/checkbox-cell.component';\r\nimport { CheckboxCellParams } from './checkbox-cell/checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-add-app-from-folder',\r\n  templateUrl: './add-app-from-folder.component.html',\r\n  styleUrls: ['./add-app-from-folder.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    FeatureTextInfoComponent,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class AddAppFromFolderComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  gridOptions = this.buildGridOptions();\r\n  installing: boolean = false;\r\n\r\n  pendingApps = signal<PendingApp[]>([]);\r\n\r\n  public features = inject(FeaturesScopedService);\r\n  #isAddFromFolderEnabled = this.features.isEnabled[FeatureNames.AppSyncWithSiteFiles];\r\n  private appsListService = transient(AppsListService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<AddAppFromFolderComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.appsListService.getPendingApps().subscribe(apps => {\r\n      this.pendingApps.set(apps);\r\n    })\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onChange(app: PendingApp, enabled: boolean) {\r\n    const pendingAppsTemp = this.pendingApps();\r\n\r\n    if (enabled)\r\n      pendingAppsTemp.push(app);\r\n    else\r\n      pendingAppsTemp.splice(pendingAppsTemp.indexOf(app), 1);\r\n\r\n    this.pendingApps.set(pendingAppsTemp);\r\n  }\r\n\r\n  install(): void {\r\n    this.installing = true;\r\n    this.snackBar.open('Installing', undefined, { duration: 2000 });\r\n    this.appsListService.installPendingApps(this.pendingApps()).subscribe({\r\n      error: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Failed to install app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Installed app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: '',\r\n          width: 40,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          cellRenderer: CheckboxCellComponent,\r\n          cellRendererParams: (() => {\r\n            const params: CheckboxCellParams = {\r\n              isDisabled: !this.#isAddFromFolderEnabled(),\r\n              onChange: (app, enabled) => this.onChange(app, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          field: 'Name',\r\n          flex: 1,\r\n          sort: 'asc',\r\n          cellRenderer: AppNameShowComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<PendingApp> = {\r\n              tooltipGetter: (pendingApp) => `Server folder: ${pendingApp.ServerFolder}\\nFolder: ${pendingApp.Folder}\\nVersion: ${pendingApp.Version}\\nDescription: ${pendingApp.Description}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ]\r\n    }\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  ContentTypeFieldsReuseDefinitions: 'ContentTypeFieldsReuseDefinitions',\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n\r\n  // Picker features\r\n  PickerUiCheckbox: 'PickerUiCheckbox',\r\n  PickerUiRadio: 'PickerUiRadio',\r\n  PickerSourceCsv: 'PickerSourceCsv',\r\n  PickerSourceAppAssets: 'PickerSourceAppAssets',\r\n  PickerFormulas: 'PickerFormulas',\r\n  PickerUiMoreInfo: 'PickerUiMoreInfo',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","@if (show()) {\r\n  <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: feature()\">\r\n    <!-- Icon column -->\r\n    <mat-icon class=\"icon icon-{{icon()}}\">{{ icon() }}</mat-icon>\r\n    <!-- Text column -->\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n}\r\n","import { Component, input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  asInfo = input<boolean>(false);\r\n\r\n  constructor() { super(); }\r\n\r\n  icon = computedObj('icon', () => this.asInfo() ? 'info' : 'warning');\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBase {\r\n\r\n  getFeatureDetails(nameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.apiUrl(webApiFeatureDetails), {\r\n      params: { nameId }\r\n    });\r\n  }\r\n}\r\n","@if (featureDetails(); as feat) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feat.name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feat.description | safeHtml\"></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ (feat.isEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n        </div>\r\n      </div>\r\n      @if (feat.nameId; as id) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">ID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span [tippy]=\"id\" (click)=\"clipboard.copyToClipboard(id)\">{{ id }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feat.link\" target=\"_blank\" mat-raised-button color=\"accent\" class=\"eav-card-action-button\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        {{ \"Features.FindOutMore\" | translate }}\r\n      </a>\r\n      <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">\r\n        {{ \"Features.Close\" | translate }}\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}","import { Component, Inject } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { SafeHtmlPipe } from '../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../shared/services/clipboard.service';\r\nimport { signalObj } from '../../shared/signals/signal.utilities';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n    SafeHtmlPipe,\r\n  ]\r\n})\r\nexport class FeatureInfoDialogComponent {\r\n\r\n  // TODO: THIS component shows the same details as the FeatureDetailsDialogComponent\r\n  // TODO: @2pp pls change to just load the feature, then include the <app-feature-details-dialog [specs]=\"{ feature: ..., showStatus: true, showGuid: false, ...\">\r\n  // So the end result is a simple @if (...) <app-feature-details-dialog [specs]=\"{ feature: ... }>\r\n  // for an example of the tag how it's used, check out FeaturesUsedButUnlicensedComponent\r\n  // but this file will basically just have 3 lines of html\r\n\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.#featureDetailSvc.getFeatureDetails(this.dialogData).subscribe(f => this.featureDetails.set(f));\r\n  }\r\n\r\n  protected featureDetails = signalObj<Feature>('feature', null);\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesScopedService } from '../features-scoped.service';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesScopedService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}