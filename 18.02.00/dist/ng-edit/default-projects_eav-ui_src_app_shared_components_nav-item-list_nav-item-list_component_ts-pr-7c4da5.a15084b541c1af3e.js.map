{"version":3,"file":"default-projects_eav-ui_src_app_shared_components_nav-item-list_nav-item-list_component_ts-pr-7c4da5.a15084b541c1af3e.js","mappings":"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","names":["i0","ctx_r0","navItem","icon","_c0","isOpenMenu","NavItemListComponent_div_6_For_2_Template","_forTrack0","child","NavItemListComponent","constructor","router","this","ngOnInit","openChildMenu","length","urlSegments","url","split","find","includes","path","i1","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","NavItemListComponent_Conditional_1_Template","NavItemListComponent_Conditional_2_Template","NavItemListComponent_mat_icon_5_Template","NavItemListComponent_div_6_Template","tippy","svgIcon","name","MatIconModule","i2","NgClass","RouterLink","RouterLinkActive","TippyDirective","NgIf","styles","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","hostBindings","$event","_c1","_c2","_c3","MatDrawerContainer_Conditional_0_Template","_r1","ctx_r1","_onBackdropClicked","_isShowingBackdrop","MatDrawerContainer_Conditional_3_Template","_c4","_c5","MatSidenavContainer_Conditional_0_Template","MatSidenavContainer_Conditional_3_Template","matDrawerAnimations","transformDrawer","trigger","state","style","transform","visibility","transition","animate","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","CdkScrollable","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","super","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","ɵfac","__ngFactoryType__","forwardRef","MatDrawerContainer","ɵcmp","type","hostAttrs","hostVars","_contentMargins","left","right","provide","useExisting","ngContentSelectors","encapsulation","changeDetection","MatDrawer","position","_position","value","_isAttached","_updatePositionInParent","onPositionChanged","emit","mode","_mode","_updateFocusTrapState","_modeChanged","next","disableClose","_disableClose","coerceBooleanProperty","autoFocus","_autoFocus","opened","_opened","toggle","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_interactivityChecker","_doc","_focusTrap","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_animationStarted","Subject","_animationEnd","_animationState","openedChange","EventEmitter","_openedStream","pipe","filter","o","map","openedStart","e","fromState","toState","indexOf","mapTo","undefined","_closedStream","closedStart","_destroyed","_injector","inject","Injector","ChangeDetectorRef","takeUntil","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","_openedVia","runOutsideAngular","fromEvent","nativeElement","keyCode","ESCAPE","hasModifierKey","run","close","stopPropagation","preventDefault","distinctUntilChanged","x","y","_forceFocus","element","options","isFocusable","tabIndex","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","querySelector","afterNextRender","focusInitialElement","injector","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","isBrowser","create","ngAfterContentChecked","ngOnDestroy","destroy","_anchor","remove","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","result","restoreFocus","Promise","resolve","take","_getWidth","offsetWidth","enabled","hasBackdrop","newPosition","parent","parentNode","createComment","insertBefore","appendChild","i3","DOCUMENT","viewQuery","_t","_content","first","outputs","exportAs","dependencies","data","animation","start","_start","end","_end","autosize","_autosize","_drawerHasBackdrop","_backdropOverride","scrollable","_userContent","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","QueryList","backdropClick","_doCheckSubject","change","_validateDrawers","updateContentMargins","_allDrawers","changes","startWith","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","debounceTime","_left","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","phase","AfterRenderPhase","Read","merge","isAdd","className","_closeModalDrawersViaBackdrop","i4","ANIMATION_MODULE_TYPE","contentQueries","dirIndex","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","coerceNumberProperty","fixedBottomGap","ɵMatSidenav_BaseFactory","ɵMatSidenavContainer_BaseFactory","MatSidenavModule","ɵmod","ɵinj","imports","MatCommonModule","CdkScrollableModule","MatToolbarRow","ɵdir","MatToolbar","document","_document","_checkToolbarMixedModes","_toolbarRows","color","MatToolbarModule","a0","a1","a2","a3","a4","a5","$implicit","info","last","index","count","BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template","BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template","breadcrumb_r1","label","BreadcrumbComponent_ng_container_2_a_2_Template","isLast_r3","isFirst_r4","index_r5","count_r6","ctx_r6","disable","routeInterceptor","routeLink","preserveQueryParams","queryParams","preserveFragment","fragment","anchorTarget","itemTemplate","BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template","BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template","BreadcrumbComponent_ng_container_2_label_3_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template","separator","BreadcrumbComponent_ng_container_2_li_4_Template","separatorTemplate","BreadcrumbComponent_ng_container_2_Template","BreadcrumbItemDirective","isNonEmpty","obj","Object","keys","BreadcrumbService","activatedRoute","baseHref","dynamicBreadcrumbStore","currentBreadcrumbs","previousBreadcrumbs","breadcrumbs","BehaviorSubject","breadcrumbs$","asObservable","detectRouteChanges","setupBreadcrumbs","snapshot","events","GuardsCheckEnd","shouldActivate","root","activatedRouteSnapshot","rootBreadcrumb","getRootBreadcrumb","prepareBreadcrumbList","rootConfig","config","extractObject","breadcrumb","storeItem","getFromStore","alias","getQueryParamsFromPreviousList","prepareBreadcrumbItem","routeLinkPrefix","parseRouteData","routeConfig","resolvedSegment","resolvePathSegment","extractLabel","isAutoGeneratedLabel","autoGeneratedLabel","breadcrumbItem","push","firstChild","setQueryParamsForActiveBreadcrumb","breadcrumbsToShow","skip","matchRegex","routeRegex","RegExp","segment","entries","params","key","replace","lastItem","mergeWithBaseChildData","baseChild","loadChildren","_loadedRoutes","route","children","childConfig","set","breadcrumbObject","updateArgs","startsWith","slice","buildRegex","ensureLeadingSlash","updateStore","updateCurrentBreadcrumbs","storeItemIndex","findIndex","itemIndex","resolvedParam","ɵprov","token","BreadcrumbComponent","breadcrumbService","activateRoute","_separator","autoGenerate","class","setupMessage","someParameterValue","setupComponent","someParam","TemplateRef","Date","BreadcrumbModule","CommonModule","RouterModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.html","./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./node_modules/@angular/material/fesm2022/sidenav.mjs","./node_modules/@angular/material/fesm2022/toolbar.mjs","./node_modules/xng-breadcrumb/fesm2020/xng-breadcrumb.mjs"],"sourcesContent":["<a (click)=\"isOpenMenu = !isOpenMenu\" [routerLink]=\"navItem.path\" routerLinkActive=\"active\" matRipple\r\n  class=\"app-menu-container\" [tippy]=\"navItem.tippy\">\r\n  @if(navItem.svgIcon){\r\n  <mat-icon [svgIcon]=\"navItem.icon\"></mat-icon>\r\n  } @else {\r\n  <mat-icon>{{ navItem.icon }}</mat-icon>\r\n  }\r\n  <div class=\"link-text\">{{ navItem.name }}</div>\r\n  <mat-icon *ngIf=\"navItem.child\" [ngClass]=\"{ closed: !isOpenMenu, open: isOpenMenu, 'ml-auto': true }\"> expand_more\r\n  </mat-icon>\r\n</a>\r\n\r\n<div class=\"paddingLink\" *ngIf=\"isOpenMenu\">\r\n  @for (child of navItem.child ; track child.path) {\r\n  <app-nav-item-list [navItem]=\"child\"></app-nav-item-list>\r\n  }\r\n</div>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { NavItem } from '../../models/nav-item.model';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass, NgIf } from '@angular/common';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-nav-item-list',\r\n  templateUrl: './nav-item-list.component.html',\r\n  styleUrl: './nav-item-list.component.scss',\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    TippyDirective,\r\n    NgIf,\r\n  ],\r\n})\r\nexport class NavItemListComponent implements OnInit {\r\n  @Input() navItem!: NavItem;\r\n  isOpenMenu = false;\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.openChildMenu();\r\n  }\r\n\r\n  openChildMenu() {\r\n    if (this.navItem.child?.length) {\r\n\r\n      const urlSegments = this.router.url.split('/');\r\n      const matchingChild = this.navItem.child.find(child => urlSegments.includes(child.path));\r\n\r\n      if (matchingChild)\r\n        this.isOpenMenu = true;\r\n    }\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n  standalone: true\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, inject, Injector, ChangeDetectorRef, afterNextRender, Optional, Input, Output, ViewChild, QueryList, AfterRenderPhase, ANIMATION_MODULE_TYPE, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ]),\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawerContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatDrawerContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDrawerContent, isStandalone: true, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatDrawerContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatDrawerContainer)]\n                }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }] });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._interactivityChecker = _interactivityChecker;\n        this._doc = _doc;\n        this._container = _container;\n        this._focusTrap = null;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this._injector = inject(Injector);\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        this.openedChange.pipe(takeUntil(this._destroyed)).subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                afterNextRender(() => {\n                    const hasMovedFocus = this._focusTrap.focusInitialElement();\n                    if (!hasMovedFocus && typeof element.focus === 'function') {\n                        element.focus();\n                    }\n                }, { injector: this._injector });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n        // Needs to happen after the position is updated\n        // so the focus trap anchors are in the right place.\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        }\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        this._focusTrap?.destroy();\n        this._anchor?.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus(focusOrigin);\n            }\n        }\n        // Needed to ensure that the closing sequence fires off correctly.\n        this._changeDetectorRef.markForCheck();\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n            // sidenav content.\n            this._focusTrap.enabled = !!this._container?.hasBackdrop && this.opened;\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        // Don't move the DOM node around on the server, because it can throw off hydration.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawer, deps: [{ token: i0.ElementRef }, { token: i2.FocusTrapFactory }, { token: i2.FocusMonitor }, { token: i3.Platform }, { token: i0.NgZone }, { token: i2.InteractivityChecker }, { token: DOCUMENT, optional: true }, { token: MAT_DRAWER_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDrawer, isStandalone: true, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\" }, listeners: { \"@transform.start\": \"_animationStarted.next($event)\", \"@transform.done\": \"_animationEnd.next($event)\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"@transform\": \"_animationState\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_animationStarted.next($event)',\n                        '(@transform.done)': '_animationEnd.next($event)',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i2.FocusTrapFactory }, { type: i2.FocusMonitor }, { type: i3.Platform }, { type: i0.NgZone }, { type: i2.InteractivityChecker }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDrawerContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DRAWER_CONTAINER]\n                }] }], propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        this._injector = inject(Injector);\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted\n            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            afterNextRender(() => {\n                this._validateDrawers();\n            }, { injector: this._injector, phase: AfterRenderPhase.Read });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged\n                .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end)));\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n    // Whether argument drawer should have a backdrop when it opens\n    _drawerHasBackdrop(drawer) {\n        if (this._backdropOverride == null) {\n            return !!drawer && drawer.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawerContainer, deps: [{ token: i4.Directionality, optional: true }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MAT_DRAWER_DEFAULT_AUTOSIZE }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatDrawerContainer, isStandalone: true, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-app-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-app-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color, var(--mat-app-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatDrawerContent, selector: \"mat-drawer-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], standalone: true, imports: [MatDrawerContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-app-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-app-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color, var(--mat-app-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], ctorParameters: () => [{ type: i4.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatSidenavContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatSidenavContent, isStandalone: true, selector: \"mat-sidenav-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatSidenavContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatSidenavContainer)]\n                }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }] });\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatSidenav, isStandalone: true, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n    constructor() {\n        super(...arguments);\n        this._allDrawers = undefined;\n        // We need an initializer here to avoid a TS error.\n        this._content = undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatSidenavContainer, isStandalone: true, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-app-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-app-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color, var(--mat-app-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatSidenavContent, selector: \"mat-sidenav-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], standalone: true, imports: [MatSidenavContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-app-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-app-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color, var(--mat-app-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\nclass MatSidenavModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent], exports: [CdkScrollableModule,\n            MatCommonModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkScrollableModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\nclass MatToolbarRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarRow, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatToolbarRow, isStandalone: true, selector: \"mat-toolbar-row\", host: { classAttribute: \"mat-toolbar-row\" }, exportAs: [\"matToolbarRow\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-toolbar-row',\n                    exportAs: 'matToolbarRow',\n                    host: { 'class': 'mat-toolbar-row' },\n                    standalone: true,\n                }]\n        }] });\nclass MatToolbar {\n    constructor(_elementRef, _platform, document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbar, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatToolbar, isStandalone: true, selector: \"mat-toolbar\", inputs: { color: \"color\" }, host: { properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"class.mat-toolbar-multiple-rows\": \"_toolbarRows.length > 0\", \"class.mat-toolbar-single-row\": \"_toolbarRows.length === 0\" }, classAttribute: \"mat-toolbar\" }, queries: [{ propertyName: \"_toolbarRows\", predicate: MatToolbarRow, descendants: true }], exportAs: [\"matToolbar\"], ngImport: i0, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-app-surface));color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-app-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-app-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-app-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-app-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-app-title-large-tracking));margin:0}.cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface));--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height)}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-toolbar', exportAs: 'matToolbar', host: {\n                        'class': 'mat-toolbar',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-app-surface));color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-app-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-app-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-app-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-app-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-app-title-large-tracking));margin:0}.cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface));--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height)}}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { color: [{\n                type: Input\n            }], _toolbarRows: [{\n                type: ContentChildren,\n                args: [MatToolbarRow, { descendants: true }]\n            }] } });\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\nclass MatToolbarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatToolbar, MatToolbarRow], exports: [MatToolbar, MatToolbarRow, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatToolbar, MatToolbarRow],\n                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n","import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nclass BreadcrumbItemDirective {\n}\nBreadcrumbItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBreadcrumbItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbItemDirective, selector: \"[xngBreadcrumbItem]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[xngBreadcrumbItem]',\n                }]\n        }] });\n\nconst PATH_PARAM = {\n    PREFIX: ':',\n    REGEX_IDENTIFIER: '/:[^/]+',\n    REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj) => {\n    return obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n    constructor(activatedRoute, router) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.baseHref = '/';\n        /**\n         * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n         * Breadcrumbs can be set from anywhere (component, service) in the app.\n         * On every breadcrumb update check this store and use the info if available.\n         */\n        this.dynamicBreadcrumbStore = [];\n        /**\n         * breadcrumbList for the current route\n         * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n         * If effected, update the change and emit a new stream\n         */\n        this.currentBreadcrumbs = [];\n        this.previousBreadcrumbs = [];\n        /**\n         * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n         * Emits on every route change OR dynamic update of breadcrumb\n         */\n        this.breadcrumbs = new BehaviorSubject([]);\n        this.breadcrumbs$ = this.breadcrumbs.asObservable();\n        this.detectRouteChanges();\n    }\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    detectRouteChanges() {\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\n        this.router.events\n            .pipe(filter((event) => event instanceof GuardsCheckEnd))\n            .subscribe((event) => {\n            // activatedRoute doesn't carry data when shouldReuseRoute returns false\n            // use the event data with GuardsCheckEnd as workaround\n            // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n            if (event.shouldActivate) {\n                this.setupBreadcrumbs(event.state.root);\n            }\n        });\n    }\n    setupBreadcrumbs(activatedRouteSnapshot) {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n    }\n    getRootBreadcrumb() {\n        const rootConfig = this.router.config.find((config) => config.path === '');\n        const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n        const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n        if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n            return {\n                ...storeItem,\n                ...rootBreadcrumb,\n                routeLink: this.baseHref,\n                ...this.getQueryParamsFromPreviousList('/'),\n            };\n        }\n    }\n    prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n        const { path, breadcrumb } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n        const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n        const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n        const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n        let isAutoGeneratedLabel = false;\n        let autoGeneratedLabel = '';\n        if (!label) {\n            isAutoGeneratedLabel = true;\n            autoGeneratedLabel = resolvedSegment;\n        }\n        return {\n            ...storeItem,\n            ...breadcrumb,\n            label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n            routeLink,\n            isAutoGeneratedLabel,\n            ...this.getQueryParamsFromPreviousList(routeLink),\n        };\n    }\n    prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n        if (activatedRouteSnapshot.routeConfig?.path) {\n            const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n            this.currentBreadcrumbs.push(breadcrumbItem);\n            if (activatedRouteSnapshot.firstChild) {\n                return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n            }\n        }\n        else if (activatedRouteSnapshot.firstChild) {\n            return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n        }\n        const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n        // remove breadcrumb items that needs to be hidden\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n        this.breadcrumbs.next(breadcrumbsToShow);\n    }\n    getFromStore(alias, routeLink) {\n        return this.dynamicBreadcrumbStore.find((item) => {\n            return ((alias && alias === item.alias) ||\n                (routeLink && routeLink === item.routeLink) ||\n                this.matchRegex(routeLink, item.routeRegex));\n        });\n    }\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    matchRegex(routeLink, routeRegex) {\n        const match = routeLink.match(new RegExp(routeRegex));\n        return match?.[0] === routeLink;\n    }\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    resolvePathSegment(segment, activatedRouteSnapshot) {\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n        if (segment.includes(PATH_PARAM.PREFIX)) {\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n                segment = segment.replace(`:${key}`, `${value}`);\n            });\n        }\n        return segment;\n    }\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    getQueryParamsFromPreviousList(routeLink) {\n        const { queryParams, fragment } = this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n            {};\n        return { queryParams, fragment };\n    }\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n        if (lastItem) {\n            const { queryParams, fragment } = activatedRouteSnapshot;\n            lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n            lastItem.fragment = fragment;\n        }\n    }\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    parseRouteData(routeConfig) {\n        const { path, data } = routeConfig;\n        const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n        return { path, breadcrumb };\n    }\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    mergeWithBaseChildData(routeConfig, config) {\n        if (!routeConfig) {\n            return this.extractObject(config);\n        }\n        let baseChild;\n        if (routeConfig.loadChildren) {\n            // To handle a module with empty child route\n            baseChild = routeConfig._loadedRoutes.find((route) => route.path === '');\n        }\n        else if (routeConfig.children) {\n            // To handle a component with empty child route\n            baseChild = routeConfig.children.find((route) => route.path === '');\n        }\n        const childConfig = baseChild?.data?.breadcrumb;\n        return childConfig\n            ? this.mergeWithBaseChildData(baseChild, {\n                ...this.extractObject(config),\n                ...this.extractObject(childConfig),\n            })\n            : this.extractObject(config);\n    }\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key, breadcrumb) {\n        const breadcrumbObject = this.extractObject(breadcrumb);\n        let updateArgs;\n        if (key.startsWith(ALIAS_PREFIX)) {\n            updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n        }\n        else if (key.includes(PATH_PARAM.PREFIX)) {\n            updateArgs = [\n                'routeRegex',\n                { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\n            ];\n        }\n        else {\n            updateArgs = [\n                'routeLink',\n                { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\n            ];\n        }\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n        // change it to false since this is user supplied value\n        updateArgs[1].isAutoGeneratedLabel = false;\n        this.updateStore(...updateArgs);\n        this.updateCurrentBreadcrumbs(...updateArgs);\n    }\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    updateStore(key, breadcrumb) {\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n            return breadcrumb[key] === item[key];\n        });\n        if (storeItemIndex > -1) {\n            this.dynamicBreadcrumbStore[storeItemIndex] = {\n                ...this.dynamicBreadcrumbStore[storeItemIndex],\n                ...breadcrumb,\n            };\n        }\n        else {\n            this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n        }\n    }\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    updateCurrentBreadcrumbs(key, breadcrumb) {\n        const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n            return key === 'routeRegex'\n                ? this.matchRegex(item.routeLink, breadcrumb[key])\n                : breadcrumb[key] === item[key];\n        });\n        if (itemIndex > -1) {\n            this.currentBreadcrumbs[itemIndex] = {\n                ...this.currentBreadcrumbs[itemIndex],\n                ...breadcrumb,\n            };\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n            this.breadcrumbs.next([...breadcrumbsToShow]);\n        }\n    }\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    buildRegex(path) {\n        return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n    }\n    ensureLeadingSlash(path) {\n        return path.startsWith('/') ? path : `/${path}`;\n    }\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    extractLabel(config, resolvedParam) {\n        const label = typeof config === 'object' ? config.label : config;\n        if (typeof label === 'function') {\n            return label(resolvedParam);\n        }\n        return label;\n    }\n    extractObject(config) {\n        // don't include {label} if config is undefined. This is important since we merge the configs\n        if (config &&\n            (typeof config === 'string' || typeof config === 'function')) {\n            return { label: config };\n        }\n        return config || {};\n    }\n}\nBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }]; } });\n\nclass BreadcrumbComponent {\n    constructor(breadcrumbService, activateRoute) {\n        this.breadcrumbService = breadcrumbService;\n        this._separator = '/';\n        /**\n         * If true, breadcrumb is auto generated even without any mapping label\n         * Default label is same as route segment\n         */\n        this.autoGenerate = true;\n        /**\n         * By default query params will be preserved with breadcrumbs\n         */\n        this.preserveQueryParams = true;\n        /**\n         * By default query fragments will be preserved with breadcrumbs\n         */\n        this.preserveFragment = true;\n        /**\n         * custom class provided by consumer to increase specificity\n         * This will benefit to override styles that are conflicting\n         */\n        this.class = '';\n        this.setupMessage = 'not set up yet';\n        this.someParameterValue = null;\n        // breadcrumb inside ngIf works only this way\n        activateRoute.params.subscribe((params) => {\n            this.setupComponent(params['someParam']);\n        });\n    }\n    /**\n     * separator between breadcrumbs, defaults to '/'.\n     * User can customize separator either by passing a String or Template\n     *\n     * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n     *\n     * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n     */\n    set separator(value) {\n        if (value instanceof TemplateRef) {\n            this.separatorTemplate = value;\n            this._separator = undefined;\n        }\n        else {\n            this.separatorTemplate = undefined;\n            this._separator = value || '/';\n        }\n    }\n    get separator() {\n        return this._separator;\n    }\n    setupComponent(someParam) {\n        this.setupMessage = 'set up at ' + new Date();\n        this.someParameterValue = someParam;\n    }\n    ngOnInit() {\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map((breadcrumbs) => {\n            return breadcrumbs\n                .filter((breadcrumb) => {\n                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n                // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n                if (this.autoGenerate) {\n                    return true;\n                }\n                return !breadcrumb.isAutoGeneratedLabel;\n            })\n                .map((breadcrumb) => {\n                // Do not mutate breadcrumb as its source of truth.\n                // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n                const { routeInterceptor, routeLink } = breadcrumb;\n                return {\n                    ...breadcrumb,\n                    routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,\n                };\n            });\n        }));\n    }\n}\nBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: BreadcrumbService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbComponent, selector: \"xng-breadcrumb\", inputs: { autoGenerate: \"autoGenerate\", preserveQueryParams: \"preserveQueryParams\", preserveFragment: \"preserveFragment\", class: \"class\", anchorTarget: \"anchorTarget\", separator: \"separator\" }, queries: [{ propertyName: \"itemTemplate\", first: true, predicate: BreadcrumbItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"pipe\", type: i3.AsyncPipe, name: \"async\" }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'xng-breadcrumb', encapsulation: ViewEncapsulation.None, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: BreadcrumbService }, { type: i1.ActivatedRoute }]; }, propDecorators: { itemTemplate: [{\n                type: ContentChild,\n                args: [BreadcrumbItemDirective, { static: false, read: TemplateRef }]\n            }], autoGenerate: [{\n                type: Input\n            }], preserveQueryParams: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input\n            }], class: [{\n                type: Input\n            }], anchorTarget: [{\n                type: Input\n            }], separator: [{\n                type: Input,\n                args: ['separator']\n            }] } });\n\nclass BreadcrumbModule {\n}\nBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, declarations: [BreadcrumbComponent, BreadcrumbItemDirective], imports: [CommonModule, RouterModule], exports: [BreadcrumbComponent, BreadcrumbItemDirective] });\nBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, imports: [CommonModule, RouterModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n                    imports: [CommonModule, RouterModule],\n                    exports: [BreadcrumbComponent, BreadcrumbItemDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };\n"],"x_google_ignoreList":[3,4,5]}