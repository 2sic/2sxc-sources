{"version":3,"file":"default-projects_eav-ui_src_app_app-administration_constants_field-name_patterns_ts-projects_-231ca0.a7a6a21a6a71e706.js","mappings":"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","names":["fieldNamePattern","fieldNameError","webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","__ngFactoryType__","factory","ɵfac","ExportAppPartsService","getContentInfo","webApiAppPartsRoot","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","calculateTypeIcon","typeName","DataTypeCatalog","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","calculateTypeLabel","ReservedNamesValidatorDirective","constructor","reservedNames","validate","control","controlValue","toLocaleLowerCase","reservedName","find","mergeReserved","fields","existingFields","forEach","field","selectors","inputs","standalone","features","i0","provide","NG_VALIDATORS","useExisting","multi","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","_r1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","MatFormFieldModule","i1","NgClass","NgTemplateOutlet","styles","webApiFieldsAll","webApiSetTitle","webApiFieldsGetShared","ContentTypesFieldsService","paramsAppId","more","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","#getShareinfo","getAncestors","getDescendants","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","JSON","stringify","setTitle","item","rename","fieldId","newName","IsTitle","Error","add","newField","ContentTypeId","Index","SortOrder","updateInputType","InputTypeCatalog","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","arrReducer","arr","push","toArray","operate","source","subscriber","reduce","subscribe"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/constants/field-name.patterns.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/reserved-names.directive.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./node_modules/rxjs/dist/esm/internal/operators/toArray.js"],"sourcesContent":["export const fieldNamePattern = /^[A-Za-z][A-Za-z0-9]+$/;\r\nexport const fieldNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { AppInfo } from '../models/app-info.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.apiUrl(webApiEntityList), {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.apiUrl(webApiViews), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n}\r\n","import { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  const typeIconMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'toggle_on',\r\n    [DataTypeCatalog.Custom]: 'extension',\r\n    [DataTypeCatalog.DateTime]: 'today',\r\n    [DataTypeCatalog.Empty]: 'crop_free',\r\n    [DataTypeCatalog.Entity]: 'share',\r\n    [DataTypeCatalog.Hyperlink]: 'link',\r\n    [DataTypeCatalog.Number]: 'dialpad',\r\n    [DataTypeCatalog.String]: 'text_fields',\r\n  };\r\n  return typeIconMap[typeName] ?? 'device_unknown';\r\n}\r\n\r\nexport function calculateTypeLabel(typeName: string): string {\r\n  const typeLabelMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'Boolean (yes/no)',\r\n    [DataTypeCatalog.Custom]: 'Custom - ui-tools or custom types',\r\n    [DataTypeCatalog.DateTime]: 'Date and/or time',\r\n    [DataTypeCatalog.Empty]: 'Empty - for form-titles etc.',\r\n    [DataTypeCatalog.Entity]: 'Entity (other content-items)',\r\n    [DataTypeCatalog.Hyperlink]: 'Link / file reference',\r\n    [DataTypeCatalog.Number]: 'Number',\r\n    [DataTypeCatalog.String]: 'Text / string',\r\n  };\r\n  return typeLabelMap[typeName] ?? 'device_unknown';\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\r\nimport { Field } from '../../shared/fields/field.model';\r\n\r\n@Directive({\r\n    selector: '[appReservedNames]',\r\n    providers: [\r\n      { provide: NG_VALIDATORS, useExisting: ReservedNamesValidatorDirective, multi: true },\r\n    ],\r\n    standalone: true,\r\n})\r\nexport class ReservedNamesValidatorDirective implements Validator {\r\n  @Input('appReservedNames') reservedNames: Record<string, string> = {};\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!control.value) { return null; }\r\n\r\n    const controlValue = (control.value as string).toLocaleLowerCase();\r\n    const reservedName = Object.keys(this.reservedNames).find(name => name.toLocaleLowerCase() === controlValue);\r\n    return reservedName ? { reservedNames: this.reservedNames[reservedName] } : null;\r\n  }\r\n\r\n  static mergeReserved(reservedNames: Record<string, string>, fields: Field[]) {\r\n    const existingFields: Record<string, string> = {};\r\n    fields.forEach(field => {\r\n      existingFields[field.StaticName] = 'this field already exists';\r\n    });\r\n    return {\r\n      ...reservedNames,\r\n      ...existingFields,\r\n    };\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiDataTypes), this.paramsAppId());\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiInputTypes), this.paramsAppId())\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => ({\r\n            dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n            inputType: config.Type,\r\n            label: config.Label,\r\n            description: config.Description,\r\n            isDefault: config.IsDefault,\r\n            isObsolete: config.IsObsolete,\r\n            isRecommended: config.IsRecommended,\r\n            obsoleteMessage: config.ObsoleteMessage,\r\n            icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n          } satisfies FieldInputTypeOption));\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiReservedNames));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), this.paramsAppId({ staticName: contentTypeStaticName }))\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId());\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfo(webApiFieldsGetShared, attributeId);\r\n    // return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfo(endpoint: string, attributeId: number) {\r\n    return this.http.get<Field[]>(this.apiUrl(endpoint), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { reduce } from './reduce';\nimport { operate } from '../util/lift';\nconst arrReducer = (arr, value) => (arr.push(value), arr);\nexport function toArray() {\n    return operate((source, subscriber) => {\n        reduce(arrReducer, [])(source).subscribe(subscriber);\n    });\n}\n"],"x_google_ignoreList":[15]}