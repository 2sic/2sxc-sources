{"version":3,"sources":["./src/app/app-administration/sub-dialogs/import-content-type/import-content-type.component.html","./src/app/app-administration/sub-dialogs/import-content-type/import-content-type.component.ts"],"names":["dialogData","dialogRef","contentTypesService","snackBar","hostClass","isImporting$","importFiles$","importResult$","templateVars$","this","pipe","isImporting","importFiles","importResult","ngOnInit","files","next","importContentType","ngOnDestroy","complete","closeDialog","close","filesDropped","filesChange","event","fileList","target","length","Array","from","import","value","subscribe","result","error","open","duration","ImportContentTypeComponent"],"mappings":"mVAOE,yB,sBAMI,cAA+B,+BAAoB,Q,yBAEjD,cAA2C,QAAe,Q,uBAAf,sB,yBAD7C,QACE,uBACF,Q,uBADO,uC,sBAOT,iBACE,mFACF,Q,sBACA,iBACE,4EACF,Q,8HACA,iBAKE,QACF,Q,uBAN4E,gFAK1E,8B,yBAZJ,iBACE,uBAGA,uBAGA,uBAOF,Q,uBAbO,4CAGA,6CAGA,iD,qCAUL,QACE,oBAA0B,iEAAwB,iBAAM,OACxD,oBACE,uEACA,mBACF,OACF,O,0BAJ2C,0E,qCAK3C,QACE,oBAAyC,iEAAwB,gBAAK,OACxE,Q,qCA/CJ,gBAAgD,0EAG9C,gBACE,gBAA8B,+BAAoB,OACpD,OAEA,8BAEA,cAA8B,oFAAyE,OAEvG,cACE,mBAAuF,iDAAS,WAC9F,sBACA,gCAGF,OACA,qBAAuC,mEAAvC,OACF,OAEA,wBAgBA,kBACE,gCAOA,gCAGF,OACF,O,qBAjDoB,gCAOL,mCAK8C,uCAClD,oCACS,mCAO4D,oCAiB9D,qEAOA,uECnClB,iBAgBE,WACmCA,EACzBC,EACAC,EACAC,GAHyB,KAAAH,aACzB,KAAAC,YACA,KAAAC,sBACA,KAAAC,WAbgB,KAAAC,UAAY,mBAE9B,KAAAC,aAAe,IAAI,KAAgB,GACnC,KAAAC,aAAe,IAAI,IAAwB,MAC3C,KAAAC,cAAgB,IAAI,IAAiC,MAC7D,KAAAC,cAAgB,YAAc,CAACC,KAAKJ,aAAcI,KAAKH,aAAcG,KAAKF,gBAAgBG,KACxF,aAAI,SAAC,G,IAAA,mBAA6C,OAAGC,YAApC,KAAiDC,YAApC,KAAiDC,aAAnC,U,OAU9C,YAAAC,SAAA,WAC+B,MAAzBL,KAAKT,WAAWe,QAClBN,KAAKH,aAAaU,KAAKP,KAAKT,WAAWe,OACvCN,KAAKQ,sBAIT,YAAAC,YAAA,WACET,KAAKJ,aAAac,WAClBV,KAAKH,aAAaa,WAClBV,KAAKF,cAAcY,YAGrB,YAAAC,YAAA,WACEX,KAAKR,UAAUoB,SAGjB,YAAAC,aAAA,SAAaP,GACXN,KAAKH,aAAaU,KAAKD,GACvBN,KAAKF,cAAcS,KAAK,MACxBP,KAAKQ,qBAGP,YAAAM,YAAA,SAAYC,GACV,IAAMC,EAAYD,EAAME,OAA4BX,MAC9CA,EAAQU,EAASE,OAAS,EAAIC,MAAMC,KAAKJ,GAAY,KAC3DhB,KAAKH,aAAaU,KAAKD,GACvBN,KAAKF,cAAcS,KAAK,OAG1B,YAAAC,kBAAA,sBACER,KAAKJ,aAAaW,MAAK,GACvBP,KAAKP,oBAAoB4B,OAAOrB,KAAKH,aAAayB,OAAOC,UAAU,CACjEhB,KAAM,SAAAiB,GACJ,EAAK5B,aAAaW,MAAK,GACvB,EAAKT,cAAcS,KAAKiB,IAE1BC,MAAO,SAACA,GACN,EAAK7B,aAAaW,MAAK,GACvB,EAAKT,cAAcS,KAAK,MACxB,EAAKb,SAASgC,KAAK,2DAA4D,KAAM,CAAEC,SAAU,U,sCAzD5FC,GAA0B,KAW3B,KAAe,gC,uBAXdA,EAA0B,mF,qqCDhBvC,uB,sBACE,wC,iJCSF","file":"import-content-type-component.9617af9eeb25e7b08618.js","sourcesContent":["<div appDragAndDrop [allowedFileTypes]=\"'json'\" (filesDropped)=\"filesDropped($event)\"\r\n  *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Import Content Types</div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.isImporting\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\">Select Content Type definition files (json) from your computer to import.</p>\r\n\r\n  <div>\r\n    <button mat-raised-button matTooltip=\"Open file browser\" [disabled]=\"data.isImporting\" (click)=\"fileInput.click()\">\r\n      <div *ngIf=\"!data.importFiles\">Select or drop files</div>\r\n      <ng-container *ngIf=\"data.importFiles\">\r\n        <div *ngFor=\"let file of data.importFiles\">{{ file.name }}</div>\r\n      </ng-container>\r\n    </button>\r\n    <input #fileInput type=\"file\" multiple (change)=\"filesChange($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light import-result-box\" *ngIf=\"data.importResult\">\r\n    <div *ngIf=\"data.importResult.Success\" class=\"sxc-message sxc-message-info\">\r\n      The import has been done. See the messages below for more information.\r\n    </div>\r\n    <div *ngIf=\"!data.importResult.Success\" class=\"sxc-message sxc-message-error\">\r\n      The import failed. See the messages below for more information.\r\n    </div>\r\n    <div *ngFor=\"let message of data.importResult.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n      'sxc-message-warning': message.MessageType === 0,\r\n      'sxc-message-success': message.MessageType === 1,\r\n      'sxc-message-error': message.MessageType === 2\r\n    }\">\r\n      {{ message.Text }}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <ng-container *ngIf=\"!data.importResult?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!data.importFiles || data.isImporting || !!data.importResult\"\r\n        (click)=\"importContentType()\">\r\n        Import\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"data.importResult?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectionStrategy, Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../../import-app/models/import-app-result.model';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\nimport { ImportContentTypeDialogData } from './import-content-type-dialog.config';\r\n\r\n@Component({\r\n  selector: 'app-import-content-type',\r\n  templateUrl: './import-content-type.component.html',\r\n  styleUrls: ['./import-content-type.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ImportContentTypeComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private isImporting$ = new BehaviorSubject(false);\r\n  private importFiles$ = new BehaviorSubject<File[]>(null);\r\n  private importResult$ = new BehaviorSubject<ImportAppResult>(null);\r\n  templateVars$ = combineLatest([this.isImporting$, this.importFiles$, this.importResult$]).pipe(\r\n    map(([isImporting, importFiles, importResult]) => ({ isImporting, importFiles, importResult })),\r\n  );\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ImportContentTypeDialogData,\r\n    private dialogRef: MatDialogRef<ImportContentTypeComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (this.dialogData.files != null) {\r\n      this.importFiles$.next(this.dialogData.files);\r\n      this.importContentType();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.isImporting$.complete();\r\n    this.importFiles$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    this.importFiles$.next(files);\r\n    this.importResult$.next(null);\r\n    this.importContentType();\r\n  }\r\n\r\n  filesChange(event: Event) {\r\n    const fileList = (event.target as HTMLInputElement).files;\r\n    const files = fileList.length > 0 ? Array.from(fileList) : null;\r\n    this.importFiles$.next(files);\r\n    this.importResult$.next(null);\r\n  }\r\n\r\n  importContentType() {\r\n    this.isImporting$.next(true);\r\n    this.contentTypesService.import(this.importFiles$.value).subscribe({\r\n      next: result => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(result);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(null);\r\n        this.snackBar.open('Import failed. Please check console for more information', null, { duration: 3000 });\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}