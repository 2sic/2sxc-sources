{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/tools/total-popup.ts","webpack:///../core/logging/log-entry-options.ts","webpack:///./src/tools/url-param-manager.ts","webpack:///./src/Stats.ts","webpack:///../core/constants/index.ts","webpack:///../core/logging/has-log.ts","webpack:///../core/logging/Log.ts","webpack:///../core/logging/log-call.ts","webpack:///../core/plumbing/obj.ts","webpack:///../core/plumbing/no-jquery.ts","webpack:///../core/logging/entry.ts","webpack:///../core/logging/insights.ts","webpack:///./src/sxc-instance/web-api/ajax-promise.ts","webpack:///./src/sxc-instance/web-api/sxc-web-api.ts","webpack:///./src/sxc-instance/sxc-instance-part.ts","webpack:///./src/sxc-instance/data/sxc-data-query-base.ts","webpack:///./src/sxc-instance/data/sxc-data.ts","webpack:///./src/sxc-instance/data/sxc-query.ts","webpack:///./src/sxc-instance/sxc-instance-cms.ts","webpack:///./src/sxc-instance/sxc-instance.ts","webpack:///./src/sxc-instance/sxc-instance-with-internals.ts","webpack:///./src/constants/index.ts","webpack:///./src/environment/env-loader-dnn-sf.ts","webpack:///./src/environment/env-loader-dynamic.ts","webpack:///./src/environment/env-loader-meta.ts","webpack:///./src/environment/root-environment.ts","webpack:///./src/http/sxc-http.ts","webpack:///./src/sxc-root/debug.ts","webpack:///./src/sxc-root/sxc-root-builder.ts","webpack:///./src/sxc-root/sxc-root.ts","webpack:///./src/sxc-root/context-identifier.ts","webpack:///./src/2sxc.api.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LogEntryOptions","frame","undefined","callback","open","url","z","window","top","parent","wrapper","document","createElement","setAttribute","body","appendChild","ifrm","className","this","close","replace","frm","parentNode","removeChild","closeThis","$2sxc","totalPopup","strResult","results","RegExp","exec","location","search","hash","matches","pathname","match","length","reverse","decodeURIComponent","require","found","message","alert","debug","watchDomChanges","HeaderNames","ApiUrlRoots","logName","parentLog","initialMessage","initLog","initLogInternal","log","rename","linkLog","add","keepData","indexOf","entries","Array","depth","callDepths","maxEntries","liveDump","_parentHasLiveDump","_parentHasKeepData","fullIdentifier","identifier","scope","id","idCache","randomString","startTime","Date","getTime","dot","substr","Math","min","rest","e","data","_prepareMessage","_addEntry","_prepareEntry","entry","addData","logData","msg","time","Function","toString","callParams","_callDepthAdd","push","_callDepthRemove","last","pop","console","warn","dump","one","separator","dumpOne","dumpList","start","index","slice","forEach","result","line","source","repeat","stringLength","chars","randomstring","rnum","floor","random","substring","initialEntry","behavior","lastMessage","processExtraBehavior","onlyAddIfNew","done","return","error","throw","TypeSafeAssign","args","reduce","current","keys","target","DeepClone","original","ignoreCircular","str","JSON","stringify","getCircularReplacer","parse","seen","WeakSet","_","has","ready","readyState","addEventListener","once","param","obj","map","k","v","encodeURIComponent","join","domFromString","string","dummyParent","insertAdjacentHTML","from","querySelectorAll","brokenScript","workingScript","attributes","attribute","nodeName","nodeValue","textContent","NoJQ","replaceWith","elements","children","element","offset","clientRect","getBoundingClientRect","scrollY","left","scrollX","width","computedStyle","getComputedStyle","offsetWidth","parseInt","getPropertyValue","height","offsetHeight","outerWidth","empty","childNodes","toBeReplaced","newElement","runScripts","parentElement","scripts","restores","script","type","replaceChild","restore","AssetsLoader","append","newElements","tagName","toLocaleLowerCase","restoreType","others","copy","src","listener","onload","onerror","head","setTimeout","_data","Obj","history","setName","InsightsLogSet","logs","show","partName","part","logSet","autoLimit","logNames","Insights","_insights","InsightsSingleton","api","sxc","makePromise","settings","headers","$","Error","promise","ajax","async","dataType","contentType","method","getActionUrl","beforeSend","xhr","setRequestHeader","preventAutoFail","fail","showDetailedHttpError","controller","action","root","http","apiUrl","endpoint","params","env","settingsOrUrl","request","post","delete","put","controllerAction","split","controllerName","actionName","defaults","assign","fetchRaw","ctxParams","ctx","urlLower","_ignoreHeaders","includes","appId","zoneId","fetch","fetchJson","then","response","json","cbid","toLocaleUpperCase","urlAndParams","urlParts","filter","nameInError","webApi","SxcInstancePart","SxcData","getAll","getInternal","getOne","getMany","criteria","fields","path","ContentApiRoot","values","metadataFor","Target","Guid","For","update","idOrGuid","SxcDataQueryBase","urlParams","getStream","stream","getStreams","streams","run","runParams","_isSxcInstance","manage","cms","SxcInstanceCms","_manage","initInstance","_translateInit","context","app","currentLanguage","is","thing","query","SxcQuery","resolveServiceUrl","virtualPath","toLowerCase","apiRoot","status","config","infoText","srvResp","responseText","Message","msgDet","MessageDetail","ExceptionMessage","isEditMode","_isEditMode","warning","cacheKey","isLoaded","lastRefresh","on","recreate","resetCache","_controllers","DnnUiRoot","helpAutoDetect","dnnSfFallback","cl","dnnSfLoadWhenDocumentReady","sf","ServicesFramework","dnnSf","getServiceRoot","sfJsInfo","page","getTabId","appApi","rvtHeader","rvt","getAntiForgeryValue","uiRoot","platform","load","mainLoader","startMetaTagObserver","observer","MutationObserver","mutationsList","mut","attributeName","updateEnv","getMetaContent","observe","getJsApiMetaTag","childList","subtree","startInputRvtObserver","inputRvtObserver","loadRvtFromHiddenInput","hiddenField","querySelector","input","updateRvt","retries","dynamicPageHelper","loadMetaFromHeader","forceFallback","meta","newJsInfo","ourMeta","getAttribute","metaLoader","_jsApi","addSlash","endsWith","header","replacedRvt","newRvt","ensureReadyOrThrow","partRequested","fHeaders","pageId","endpointName","appApiRoot","baseUrl","startsWith","UrlParamManager","urlDebugState","uncache","urlState","rootApiV2","urlManager","stats","addOn","merged","FindSxcInstance","origAsContextId","ctxId","ensureCompleteOrThrow","HTMLElement","closest","contextAttribute","sxcContext","idTuple","domElement","containerTag","iid","autoFind","SxcInstanceWithInternals","sysinfo","version","description","Debug","Stats","beta","TotalPopup","insights","parts","getUrl","preventUnmin","jq"],"mappings":"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","file":"2sxc.api.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/** @internal */\r\nexport class TotalPopup {\r\n    frame: any = undefined;\r\n    callback: any = undefined;\r\n\r\n    open(url: string, callback: () => void): void {\r\n        // count parents to see how high the z-index needs to be\r\n        let z = 10000010; // Needs at least 10000000 to be on top of the DNN9 bar\r\n        let p = window as Window;\r\n        while (p !== window.top && z < 10000100) {\r\n            z++;\r\n            p = p.parent;\r\n        }\r\n\r\n        const wrapper = document.createElement('div');\r\n        wrapper.setAttribute('style', ' top: 0;left: 0;width: 100%;height: 100%; position:fixed; z-index:' + z);\r\n        document.body.appendChild(wrapper);\r\n\r\n        const ifrm = document.createElement('iframe');\r\n        ifrm.setAttribute('allowtransparency', 'true');\r\n        ifrm.setAttribute('style', 'top: 0;left: 0;width: 100%;height: 100%;');\r\n        ifrm.setAttribute('src', url);\r\n        wrapper.appendChild(ifrm);\r\n        document.body.className += ' sxc-popup-open';\r\n        this.frame = ifrm;\r\n        this.callback = callback;\r\n    }\r\n\r\n    close(): void {\r\n        if (this.frame) {\r\n            document.body.className = document.body.className.replace('sxc-popup-open', '');\r\n            const frm = this.frame;\r\n            frm.parentNode.parentNode.removeChild(frm.parentNode);\r\n            this.callback();\r\n        }\r\n    }\r\n\r\n    closeThis(): void {\r\n        (window.parent as any).$2sxc.totalPopup.close();\r\n    }\r\n\r\n}\r\n","/** @internal */\r\nexport enum LogEntryOptions {\r\n    log = 'log',\r\n    warn = 'warn',\r\n    error = 'error',\r\n    throw = 'throw',\r\n}\r\n","/** @internal */\r\nexport class UrlParamManager {\r\n    get(name: string) {\r\n        // warning: this method is duplicated in 2 places - keep them in sync.\r\n        // locations are eav and 2sxc4ng\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const searchRx = new RegExp('[\\\\?&]' + name + '=([^&#]*)', 'i');\r\n        let results = searchRx.exec(location.search);\r\n        let strResult: string;\r\n\r\n        if (results === null) {\r\n            const hashRx = new RegExp('[#&]' + name + '=([^&#]*)', 'i');\r\n            results = hashRx.exec(location.hash);\r\n        }\r\n\r\n        // if nothing found, try normal URL because DNN places parameters in /key/value notation\r\n        if (results === null) {\r\n            // Otherwise try parts of the URL\r\n            const matches = window.location.pathname.match(new RegExp('/' + name + '/([^/]+)', 'i'));\r\n\r\n            // Check if we found anything, if we do find it, we must reverse the\r\n            // results so we get the \"last\" one in case there are multiple hits\r\n            if (matches && matches.length > 1)\r\n                strResult = matches.reverse()[0];\r\n        } else\r\n            strResult = results[1];\r\n\r\n        return strResult === null || strResult === undefined\r\n            ? ''\r\n            : decodeURIComponent(strResult.replace(/\\+/g, ' '));\r\n    }\r\n\r\n    require(name: string) {\r\n        const found = this.get(name);\r\n        if (found === '') {\r\n            const message = `Required parameter (${name}) missing from url - cannot continue`;\r\n            alert(message);\r\n            throw message;\r\n        }\r\n        return found;\r\n    }\r\n\r\n    debug(): boolean {\r\n        return this.get('debug') === 'true'\r\n    }\r\n}\r\n","/** @internal */\r\nexport class Stats {\r\n    watchDomChanges = 0;\r\n}\r\n","/**\r\n * Special version which is filled in during compile by the definePlugin\r\n * The real version comes from the main package.json file in this repo\r\n * The sub-projects also use this version\r\n */\r\ndeclare const ROOTVERSION: string;\r\n\r\n/** @internal */\r\nexport const ToSxcName = \"2sxc\";\r\n\r\n/** @internal */\r\nexport const SxcVersion = ROOTVERSION;\r\n\r\n/** @internal */\r\nexport const SxcApiUrlRoot = 'desktopmodules/2sxc/api/';\r\n\r\n/** @internal */\r\nexport const HeaderNames = {\r\n    // 2sxc specific header\r\n    ContentBlockId: \"ContentBlockId\",\r\n\r\n    // headers as defined by DNN\r\n    ModuleId: \"ModuleId\",\r\n    TabId: \"TabId\",\r\n\r\n    // Header which should replace \"TabId\" in the long run\r\n    PageId: \"PageId\",\r\n};\r\n\r\n/** @internal */\r\nexport const ApiUrlRoots = ['app', 'app-sys', 'app-api', 'app-query', 'app-content', 'eav', 'view', 'dnn'];\r\n/** @internal */\r\nexport const AppApiMarker = 'app';\r\n\r\n// TODO: this should later lead to remapping of old url calls, but it's not in use yet\r\n// note that these were always 'auto' so `app-content` would need to be come `app/auto/content`\r\n/** @internal */\r\nexport const AppApiMap = {\r\n    'app-api': 'app/[name]/api',\r\n    'app-query': 'app/[name]/query',\r\n    'app-content': 'app/[name]/content'\r\n};\r\n\r\n// These are Not-Defined-IDs.\r\n// Because\r\n\r\n/**\r\n * This is a marker for an ID which is not defined\r\n * This is for situations where a 0 or even a negative number\r\n * could be real numbers, so this number is so big, it should never be a real ID\r\n * @internal\r\n */\r\nexport const NumberNotDefinedHuge = 274200000000;\r\n","import { Log } from '.';\r\n\r\n/**\r\n * Any object that has an own log object\r\n * @export\r\n * @interface HasLog\r\n */\r\nexport abstract class HasLog {\r\n  /**\r\n   * The logger for this object\r\n   * @type {Log}\r\n   * @memberof HasLog\r\n   */\r\n  log: Log;\r\n\r\n  /**\r\n   * initialize the logger\r\n   * ideally it has a parent-logger to attach to\r\n   * @param logName name to show in the logger\r\n   * @param parentLog parent-logger to attach to\r\n   * @param initialMessage optional start-message to log\r\n   * @internal\r\n   */\r\n  constructor(\r\n    logName: string,\r\n    /** @internal */\r\n    private parentLog?: Log,\r\n    initialMessage?: string,\r\n  ) {\r\n    this.initLogInternal(logName, parentLog, initialMessage);\r\n  }\r\n\r\n  /** @internal */\r\n  public initLog = (name: string, parentLog?: Log, initialMessage?: string)\r\n    : void => this.initLogInternal(name, parentLog, initialMessage)\r\n\r\n  /** @internal */\r\n  private initLogInternal(name: string, parentLog?: Log, initialMessage?: string): void {\r\n    if (this.log == null)\r\n        // standard & most common case: just create log\r\n        this.log = new Log(name, parentLog, initialMessage);\r\n    else {\r\n    // late-init case, where the log was already created - just reconfig keeping what was in it\r\n      this.log.rename(name);\r\n      this.log.linkLog(parentLog);\r\n      if (initialMessage != null)\r\n        this.log.add(initialMessage);\r\n    }\r\n  }\r\n\r\n}\r\n","import { LogEntry, LogCall } from '.';\r\n\r\nconst keepData = location.search.indexOf(\"debug=true\") !== -1;\r\n\r\nconst maxScopeLen = 3;\r\nconst maxNameLen = 6;\r\nconst liveDump = false;\r\nconst maxEntriesReached = 'Maximum amount of entries added to log, will stop adding more';\r\n\r\n/**\r\n * A log object which will collect log entries for another ojbect\r\n * @export\r\n * @interface Log\r\n */\r\nexport class Log {\r\n\r\n    /**\r\n     * List of all entries added to this log\r\n     */\r\n    entries = new Array<LogEntry>();\r\n    /** @internal */\r\n    private depth = 0;\r\n    /** @internal */\r\n    private callDepths: string[] = [];\r\n    /** @internal */\r\n    startTime: number;\r\n\r\n    /**\r\n     * Maximum amount of entries to add - to prevent memory hoging\r\n     */\r\n    maxEntries = 1000;\r\n\r\n    /**\r\n     * Create a logger and optionally attach it to a parent logger\r\n     * @param string name this logger should use\r\n     * @param Log optional parrent logger to attach to\r\n     * @param string optional initial message to log\r\n     * @internal\r\n     */\r\n    constructor(name: string, parent?: Log, initialMessage?: string) {\r\n        this.rename(name);\r\n        this.linkLog(parent);\r\n        this.startTime = new Date().getTime();\r\n        if (initialMessage != null) this.add(initialMessage);\r\n    }\r\n\r\n    /* if we should live-dump, can be selectively activated */\r\n    /** @internal */\r\n    liveDump: boolean = liveDump;\r\n    /** @internal */\r\n    _parentHasLiveDump: boolean = false;\r\n    /** @internal */\r\n    keepData: boolean = keepData; //Debug.urlState; // C.Debug.urlState;\r\n    /** @internal */\r\n    _parentHasKeepData: boolean = false;\r\n\r\n    /**\r\n     * Full identifier of this log-object, with full hierarchy\r\n     * @internal\r\n     */\r\n    fullIdentifier = (): string =>\r\n        `${(this.parent ? this.parent.fullIdentifier() : '')}${this.identifier()}`\r\n\r\n    /**\r\n     * give this logger a new name\r\n     * usually happens in constructor, but in rare cases\r\n     * it's called manually\r\n     * @param name\r\n     * @internal\r\n     */\r\n    rename(name: string): void {\r\n        try {\r\n            const dot = name.indexOf('.');\r\n            this.scope = dot > 0 ? name.substr(0, Math.min(dot, maxScopeLen)) + '.' : '';\r\n            const rest = dot > 0 ? name.substr(dot + 1) : name;\r\n            this.name = rest.substr(0, Math.min(rest.length, maxNameLen));\r\n            this.name = this.name.substr(0, Math.min(this.name.length, maxNameLen));\r\n        } catch (e) {\r\n            /* ignore */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * link this log to a parent\r\n     * usually happens in constructor, but in rare cases\r\n     * this must be called manually\r\n     * @internal\r\n     */\r\n    linkLog = (parent: Log): void => {\r\n        this.parent = parent || this.parent; // if new parent isn't defined, don't replace\r\n        if (this.parent) {\r\n            this._parentHasLiveDump = this.parent.liveDump || this.parent._parentHasLiveDump;\r\n            this._parentHasKeepData = this.parent.keepData || this.parent._parentHasKeepData;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a simple message to the log\r\n     * @param {string} message\r\n     * @memberof Log\r\n     *\r\n     * preferred usage is with string parameter:\r\n     * log.add(`description ${ parameter }`);\r\n     *\r\n     * in case that we experience error with normal string parameter, we can use arrow function to enclose parameter like this () => parameter\r\n     * but use it very rarely, because there is certainly a performance implication!\r\n     * log.add(`description ${() => parameter}`);\r\n     */\r\n    add(message: (() => string) | string, data?: unknown): string {\r\n        // check if the log is already too big\r\n        if(this.entries.length > this.maxEntries) \r\n            return this._prepareMessage(message);\r\n\r\n        // if we just reached the max, add special message\r\n        if(this.entries.length === this.maxEntries) \r\n            this._addEntry(this._prepareEntry(maxEntriesReached));\r\n\r\n        const entry = this._prepareEntry(message, data);\r\n        this._addEntry(entry);\r\n        return entry.message;\r\n    }\r\n\r\n    /** @internal */\r\n    addData(message: (() => string) | string, data: unknown): void {\r\n        if (this.logData()) this.add(message, data);\r\n    }\r\n\r\n    /** @internal */\r\n    logData(): boolean {\r\n        return this.keepData || this._parentHasKeepData;\r\n    }\r\n\r\n    /** @internal */\r\n    _prepareEntry(message: (() => string) | string, data?: unknown): LogEntry {\r\n        const msg = this._prepareMessage(message);\r\n        const time = new Date().getTime() - this.startTime;\r\n        const entry = new LogEntry(this, msg, this.depth, time, data);\r\n        return entry;\r\n    }\r\n\r\n    /** @internal */\r\n    private _prepareMessage(message: (() => string) | string): string {\r\n        if (message instanceof Function) {\r\n            try {\r\n                return ((message as () => string)());\r\n            } catch (e) {\r\n                return 'err: message undefined';\r\n            }\r\n        }\r\n        return message.toString();\r\n    }\r\n\r\n    /** @internal */\r\n    call(name: string, callParams?: string, message?: string, data?: {[key:string]: unknown }): LogCall {\r\n        return new LogCall(this, name, callParams, message, data);\r\n    }\r\n\r\n    /** @internal */\r\n    _callDepthAdd(name: string): void {\r\n        this.depth++;\r\n        this.callDepths.push(name);\r\n    }\r\n\r\n    /** @internal */\r\n    _callDepthRemove(name: string): void {\r\n        this.depth--;\r\n        const last = this.callDepths.pop();\r\n        if (last !== name) {\r\n            console.warn(`log: call depth reduced by '${name}' but last was '${last}'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * helper to create a text-output of the log info\r\n     * @param separator\r\n     * @param start\r\n     * @param end\r\n     * @internal\r\n     */\r\n    dump(one: LogEntry = null, separator = ' - '): void {\r\n        if (one) this.dumpOne(0, one, separator);\r\n        else this.dumpList();\r\n    }\r\n\r\n    /** @internal */\r\n    dumpList(start: number = 0, length?: number) {\r\n        let index = start;\r\n        this.entries\r\n            .slice(start, length ? start + length : undefined           )\r\n            .forEach((e) => this.dumpOne(index++, e));\r\n    }\r\n\r\n    /** @internal */\r\n    private dumpOne(index: number, e: LogEntry, separator = ' - '): void {\r\n        const result = (e.result) ? ' =' + e.result : '';\r\n        const line = ('0000' + index).slice(-4) + ' ' + e.source() + separator + '..'.repeat(e.depth) + e.message + result;\r\n        if (e.data) console.log(line, e.data);\r\n        else console.log(line);\r\n    }\r\n\r\n\r\n    /**\r\n     * add an entry-object to this logger\r\n     * this is often called by sub-loggers to add to parent\r\n     * @param entry\r\n     * @internal\r\n     */\r\n    _addEntry(entry: LogEntry): void {\r\n        if (this.liveDump) this.dump(entry);\r\n        this.entries.push(entry);\r\n        if (this.parent) this.parent._addEntry(entry);\r\n    }\r\n\r\n    /**\r\n     * helper to generate a random 2-char ID\r\n     * @param stringLength\r\n     * @internal\r\n     */\r\n    private randomString(stringLength: number): string {\r\n        const chars = '0123456789abcdefghiklmnopqrstuvwxyz';\r\n        let randomstring = '';\r\n        for (let i = 0; i < stringLength; i++) {\r\n            const rnum = Math.floor(Math.random() * chars.length);\r\n            randomstring += chars.substring(rnum, rnum + 1);\r\n        }\r\n        return randomstring;\r\n    }\r\n\r\n    /**\r\n     * parent logger - important if loggers are chained\r\n     * @internal\r\n     */\r\n    private parent: Log;\r\n\r\n    /**\r\n     * scope of this logger - to easily see which ones\r\n     * are about the same topic\r\n     * @internal\r\n     */\r\n    private scope = 'tdo';\r\n\r\n    /**\r\n     * The name of this log, for scenarios where multiple loggers are mixed\r\n     */\r\n    public name = 'unknwn';\r\n\r\n\r\n    /**\r\n     * Unique 2-character ID of this specific log object\r\n     * @internal\r\n     */\r\n    private id = (): string => this.idCache || (this.idCache = this.randomString(2));\r\n    /** @internal */\r\n    private idCache: string;\r\n\r\n    /**\r\n     * Unique identifier of this log object, with name and ID\r\n     * @internal\r\n     */\r\n    private identifier = (): string => `${this.scope}${this.name}(${this.id()})`;\r\n\r\n}\r\n","import { LogEntry, Log, LogEntryOptions as LEO } from '.';\r\n\r\n/** @internal */\r\nexport class LogCall {\r\n    /** The initial entry created - important for later attaching the final result of the call */\r\n    public initialEntry: LogEntry;\r\n\r\n    constructor(public log: Log, public name: string, callParams?: string, message?: string, data?: {[key:string]: unknown }) {\r\n        this.initialEntry = this.log._prepareEntry(name + '(' + (callParams || '') + ')');\r\n        this.log._callDepthAdd(name);\r\n        this.log._addEntry(this.initialEntry);\r\n        if (typeof message === 'string') this.add(message);\r\n        if (data) for (let key in data) this.data('initial:' + key, data[key]);\r\n    }\r\n\r\n    private lastMessage: string;\r\n\r\n    add(message: string, data?: unknown, behavior?: LEO) {\r\n        this.lastMessage = message;\r\n        this.log.add(message, data);\r\n        if (behavior) this.processExtraBehavior(behavior, message, data);\r\n    }\r\n\r\n    onlyAddIfNew(message: string, behavior?: LEO) {\r\n        if (this.lastMessage !== message)\r\n        this.add(message);\r\n        if (behavior) this.processExtraBehavior(behavior, message, undefined);\r\n    }\r\n\r\n    /** Add data - but only if data logging is enabled */\r\n    data(message: string, data: unknown) {\r\n        this.log.addData(message, data);\r\n    }\r\n\r\n    done(message?: string, behavior?: LEO): void {\r\n        this.return(null, message || '👍', behavior);\r\n    }\r\n\r\n    return<T>(result: T, message?: string, behavior?: LEO) {\r\n        message = message || '👍';\r\n        this.initialEntry.result = message;\r\n        this.log._callDepthRemove(this.name);\r\n\r\n        // if we're in keep-data / debug mode, keep that\r\n        this.initialEntry.data = result;\r\n\r\n        // if we're in live-dump mode, then the entry was already dumped, show again\r\n        if (this.log.liveDump || this.log._parentHasLiveDump)\r\n            this.add(this.name + ' = ' + message, result);\r\n\r\n        if (behavior) this.processExtraBehavior<T>(behavior, message, result);\r\n        return result;\r\n    }\r\n\r\n    /* \r\n     * treat all extra output or errors\r\n     * to allow setting a debug stop point when needed\r\n     * then you can trace the stack-call to see where the error originated\r\n     */\r\n    private processExtraBehavior<T>(behavior: LEO, message: string, data: T) {\r\n        if (behavior === LEO.log) console.log(message, data);\r\n        if (behavior === LEO.warn) console.warn(message, data);\r\n        if (behavior === LEO.error || behavior === LEO.throw) console.error(message, data);\r\n        if (behavior === LEO.throw) throw message;\r\n    }\r\n}\r\n","\r\n/**\r\n * Object manipulator helpers\r\n * @internal\r\n */\r\nexport class Obj {\r\n    /**\r\n     * This is the same as Object.assign, but type-safe.\r\n     * Use it as a replacetment for Object.Assign(this, ... ) in constructors\r\n     */\r\n    static TypeSafeAssign <T, K extends keyof T>(...args: T[]) {\r\n        args.reduce( (result, current) =>\r\n            (Object.keys(current) as K[]).reduce((target, key) => {\r\n                target[key] = current[key];\r\n                return target;\r\n            }, result)\r\n        , args[0]);\r\n    }\r\n\r\n    static DeepClone<T>(original: T, ignoreCircular = false): T {\r\n        if(original === undefined || original === null)\r\n            return original;\r\n        const str = ignoreCircular ? JSON.stringify(original, getCircularReplacer) : JSON.stringify(original);\r\n        if(str === undefined || str === null)\r\n            return original;\r\n        return JSON.parse(str) as T;\r\n    }\r\n}\r\n\r\n\r\nconst getCircularReplacer = () => {\r\n    const seen = new WeakSet();\r\n    return (_:any, value: any) => {\r\n      if (typeof value === \"object\" && value !== null) {\r\n        if (seen.has(value)) {\r\n          return;\r\n        }\r\n        seen.add(value);\r\n      }\r\n      return value;\r\n    };\r\n  };\r\n","/** @internal */\r\nexport class NoJQ {\r\n\r\n    /** https://api.jquery.com/ready/ */\r\n    static ready(callback: () => void): void {\r\n        if (document.readyState === 'complete') {\r\n            callback();\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', () => callback(), { once: true });\r\n        }\r\n    }\r\n\r\n    /** https://api.jquery.com/jquery.param/ */\r\n    static param(obj: any): string {\r\n        const param = Object.entries(obj)\r\n            .map(([k, v]) => `${encodeURIComponent(k)}=${v == null ? '' : typeof v === 'string' ? encodeURIComponent(v) : encodeURIComponent(JSON.stringify(v))}`)\r\n            .join('&');\r\n        return param;\r\n    }\r\n\r\n    /** Build DOM elements from string */\r\n    static domFromString(string: string): HTMLElement[] {\r\n        // build elements from string into dummy parent\r\n        const dummyParent = document.createElement('div');\r\n        dummyParent.insertAdjacentHTML('afterbegin', string);\r\n\r\n        // scripts created from string are not executable and have to recreated manually to be executable\r\n        Array.from(dummyParent.querySelectorAll('script')).forEach((brokenScript) => {\r\n            const workingScript = document.createElement('script');\r\n            // copy attributes\r\n            Array.from(brokenScript.attributes).forEach((attribute) => {\r\n                workingScript.setAttribute(attribute.nodeName, attribute.nodeValue);\r\n            });\r\n            // copy inline part\r\n            workingScript.textContent = brokenScript.textContent;\r\n            // replace a non executable script with executable one\r\n            NoJQ.replaceWith(brokenScript, workingScript, false);\r\n        });\r\n\r\n        // remove created elements from dummy parent so it can be garbage collected\r\n        const elements = Array.from(dummyParent.children) as HTMLElement[];\r\n        elements.forEach((element) => {\r\n            dummyParent.removeChild(element);\r\n        });\r\n        return elements;\r\n    }\r\n\r\n    /** https://api.jquery.com/offset/ */\r\n    static offset(element: HTMLElement): { left: number; top: number; } {\r\n        const clientRect = element.getBoundingClientRect();\r\n        const offset: { left: number; top: number; } = {\r\n            top: clientRect.top + window.scrollY,\r\n            left: clientRect.left + window.scrollX,\r\n        };\r\n        return offset;\r\n    }\r\n\r\n    /** https://api.jquery.com/width/ */\r\n    static width(element: HTMLElement): number {\r\n        // jquery width === offsetWidth - borders - padding\r\n        const computedStyle = getComputedStyle(element);\r\n        const width = element.offsetWidth === 0\r\n            ? 0\r\n            : element.offsetWidth\r\n            - (parseInt(computedStyle.getPropertyValue('border-left-width'), 10) + parseInt(computedStyle.getPropertyValue('border-right-width'), 10))\r\n            - (parseInt(computedStyle.getPropertyValue('padding-left'), 10) + parseInt(computedStyle.getPropertyValue('padding-right'), 10));\r\n        return width;\r\n    }\r\n\r\n    /** https://api.jquery.com/height/ */\r\n    static height(element: HTMLElement): number {\r\n        // jquery height === offsetHeight - borders - padding\r\n        const computedStyle = getComputedStyle(element);\r\n        const height = element.offsetHeight === 0\r\n            ? 0\r\n            : element.offsetHeight\r\n            - (parseInt(computedStyle.getPropertyValue('border-top-width'), 10) + parseInt(computedStyle.getPropertyValue('border-bottom-width'), 10))\r\n            - (parseInt(computedStyle.getPropertyValue('padding-top'), 10) + parseInt(computedStyle.getPropertyValue('padding-bottom'), 10));\r\n        return height;\r\n    }\r\n\r\n    /** https://api.jquery.com/outerWidth/ */\r\n    static outerWidth(element: HTMLElement): number {\r\n        const outerWidth = element.offsetWidth;\r\n        return outerWidth;\r\n    }\r\n\r\n    /** https://api.jquery.com/empty/ */\r\n    static empty(element: HTMLElement): void {\r\n        Array.from(element.childNodes).forEach((n) => {\r\n            element.removeChild(n);\r\n        });\r\n    }\r\n\r\n    /** https://api.jquery.com/replacewith/ */\r\n    static replaceWith(toBeReplaced: HTMLElement, newElement: HTMLElement, runScripts: boolean): void {\r\n        const parent = toBeReplaced.parentElement;\r\n\r\n        // disable scripts before replacing dom\r\n        const scripts = Array.from(newElement.querySelectorAll('script'));\r\n        const restores: ScriptTypeRestore[] = [];\r\n        scripts.forEach((script) => {\r\n            restores.push({ script, type: script.type });\r\n            script.type = null;\r\n        });\r\n\r\n        // replace dom\r\n        parent.replaceChild(newElement, toBeReplaced);\r\n\r\n        // enable scripts\r\n        restores.forEach((restore) => {\r\n            restore.script.type = restore.type;\r\n        });\r\n\r\n        if (runScripts) {\r\n            // run scripts manually to ensure proper timing\r\n            AssetsLoader.runScripts(scripts, undefined);\r\n        }\r\n    }\r\n\r\n    /** https://api.jquery.com/append/ */\r\n    static append(parent: HTMLElement, newElements: HTMLElement[], runScripts: boolean): void {\r\n        const scripts: HTMLScriptElement[] = [];\r\n\r\n        newElements.forEach((element) => {\r\n            if (element.tagName.toLocaleLowerCase() === 'script') {\r\n                const script = element as HTMLScriptElement;\r\n                // disable script before inserting to the dom\r\n                const restoreType = script.type;\r\n                script.type = null;\r\n                // insert to dom\r\n                parent.appendChild(script);\r\n                // enable script\r\n                script.type = restoreType;\r\n                scripts.push(script);\r\n            } else {\r\n                parent.appendChild(element);\r\n            }\r\n        });\r\n\r\n        if (runScripts && scripts.length > 0) {\r\n            // run scripts manually to ensure proper timing\r\n            AssetsLoader.runScripts(scripts, undefined);\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class AssetsLoader {\r\n\r\n    /** Asynchronously runs external and inline scripts in series */\r\n    static runScripts(scripts: HTMLScriptElement[], callback: () => void): void {\r\n        const script = scripts[0];\r\n        const others = scripts.slice(1);\r\n        if (script == null) {\r\n            callback?.();\r\n            return;\r\n        }\r\n\r\n        // create copy\r\n        const copy = document.createElement('script');\r\n        // attributes\r\n        Array.from(script.attributes).forEach((attribute) => {\r\n            copy.setAttribute(attribute.nodeName, attribute.nodeValue);\r\n        });\r\n        // inline part\r\n        copy.textContent = script.textContent;\r\n\r\n        // if src then insert in head, wait for onload or onerror, remove from head and move to next one\r\n        if (copy.type && copy.src) {\r\n            const listener = () => {\r\n                copy.onload = null;\r\n                copy.onerror = null;\r\n                document.head.removeChild(copy);\r\n                this.runScripts(others, callback);\r\n            };\r\n            copy.onload = listener;\r\n            copy.onerror = listener;\r\n            document.head.appendChild(copy);\r\n            return;\r\n        }\r\n\r\n        // if no src then inline, insert to head and remove instantly and move to next one\r\n        setTimeout(() => {\r\n            document.head.appendChild(copy);\r\n            document.head.removeChild(copy);\r\n            this.runScripts(others, callback);\r\n        });\r\n    }\r\n}\r\n\r\ninterface ScriptTypeRestore {\r\n    script: HTMLScriptElement;\r\n    type: string;\r\n}\r\n","import { Obj } from '../plumbing';\r\nimport { Log } from '.';\r\n\r\n/**\r\n * A log entry item\r\n * @export\r\n * @interface LogEntry\r\n */\r\nexport class LogEntry {\r\n\r\n    /**\r\n     * The result of an operation - treated differently in the output\r\n     * @internal\r\n     */\r\n    public result: string;\r\n\r\n\r\n    /**\r\n     * Data which is logged - if data-logging is enabled\r\n     * @internal\r\n     */\r\n    get data(): unknown {\r\n        return this._data;\r\n    }\r\n    /** @internal */\r\n    set data(data: unknown) {\r\n        if (data === undefined) return;\r\n        if (this.log.logData())\r\n            this._data = Obj.DeepClone(data, true);\r\n    }\r\n    /** @internal */\r\n    private _data?: unknown;\r\n\r\n    /** @internal */\r\n    public source = (): string => this.log.fullIdentifier();\r\n\r\n    /** @internal */\r\n    constructor(\r\n        /** @internal */\r\n        private log: Log,\r\n        public message: string,\r\n        /** @internal */\r\n        public depth: number,\r\n        /** A timestamp for this entry to better see sequences of things happening */\r\n        public time: number,\r\n        data?: unknown,\r\n        ) {\r\n            if (data) {\r\n                // #2492 - jQuery isn't used any more in 2sxc\r\n                // if (data instanceof jQuery) {\r\n                //     const jq = data as JQuery;\r\n                //     this.data = {\r\n                //         isJQuery: true,\r\n                //         original: jq,\r\n                //         html: jq.length && jq[0].outerHTML,\r\n                //     };\r\n                // } \r\n                // else\r\n                    this.data = data;\r\n            }\r\n    }\r\n\r\n}\r\n","import { HasLog, Log } from '.';\r\nimport { Window } from '../../$2sxc/src';\r\n\r\ndeclare const window: Window;\r\n\r\ntype LogList = Array<{ key: string, log: Log}>;\r\n\r\nconst msgIntro = 'This is the $2sxc JS Insights - see https://r.2sxc.org/insights \\n'\r\n    + 'Add ?debug=true to the url to log more data. \\n'\r\n    + 'Copy/paste code lines below to see details. \\n'\r\n    + '----------------------------------------------------------------------\\n';\r\n\r\nclass InsightsSingleton extends HasLog {\r\n\r\n    constructor() {\r\n        super('Sys.Insght');\r\n        this.add('system', 'insights', this.log);\r\n        this.log.add(`this log is usually empty, as it's just a helper tool`)\r\n    }\r\n\r\n    history: { [key: string]: InsightsLogSet } = {};\r\n\r\n    add(setName: string, logName: string, log: Log ) {\r\n        if (!(setName in this.history))\r\n            this.history[setName] = new InsightsLogSet(setName);\r\n        this.history[setName].logs.push({key: logName, log: log});\r\n    }\r\n\r\n    show(partName: string, index?: number, start?: number, length?: number): void {\r\n        // if nothing specified, list what to do to see inner parts\r\n        if (!partName) {\r\n            const keys = Object.keys(this.history);\r\n            console.log(`${msgIntro}${keys.length} insights-sections found: \\n` + keys.map((p) => `$2sxc.insights('${p}');`).join('\\n'));\r\n            return;\r\n        }\r\n\r\n        // partName found, check if it exists\r\n        const part = this.history[partName];\r\n        if (!part) {\r\n            console.error(`part '${partName}' not found`);\r\n            return;\r\n        }\r\n\r\n        // We have a partName, but no index - show list and how to get details\r\n        if (index === undefined) {\r\n            let count = 0;\r\n            const logNames = part.logs\r\n                .map((s) => `$2sxc.insights('${partName}', ${count++}); - will show for '${s.key}'`)\r\n                .join('\\n');\r\n            console.log(`'${partName}' contains ${part.logs.length} entries. Copy/paste the code to to see the logs: \\n` + logNames);\r\n            return;\r\n        }\r\n\r\n        // verify the entry exists\r\n        const logSet = part.logs.length >= index && part.logs[index];\r\n        if (!logSet) {\r\n            console.error(`index ${index} not found in part '${partName}'`);\r\n            return;\r\n        }\r\n\r\n        if (!logSet.log) {\r\n            console.error(`found index ${index} on part '${partName}' but it has no logs`);\r\n            return;\r\n        }\r\n\r\n        console.log(`Will dump the log for ${partName}[${index}] '${logSet.key}'`);\r\n        let autoLimit = false;\r\n        if (start === undefined) {\r\n            autoLimit = true;\r\n            start = 0;\r\n            length = 25;\r\n        }\r\n        logSet.log.dumpList(start || 0, length);\r\n        if (autoLimit && logSet.log.entries.length > length)\r\n            console.warn(`Only showing ${length} of ${logSet.log.entries.length} logs. To show all, add start param '..., 0)' or start/length '..., 0, 100)'`)\r\n}\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nclass InsightsLogSet {\r\n    logs: LogList = [];\r\n    constructor(public name: string) {}\r\n}\r\n\r\n// ensure it's only created once\r\n// this is important, because the inpage code also uses this class\r\n// and would otherwise create the object separately\r\nconst singleton: InsightsSingleton = \r\n    window.$2sxc && window.$2sxc._insights   // try to load existing\r\n    || new InsightsSingleton();             // otherwise create new\r\n\r\n/** @internal */\r\nexport const Insights = singleton;\r\n","import { SxcInstanceInternal, SxcWebApiInternal } from '..';\r\nimport { NoJQ } from '../../../../core';\r\nimport { Window } from '../..';\r\nimport { AjaxSettings } from './ajax-settings';\r\n\r\ndeclare const window: Window;\r\n\r\n/** @internal */\r\nexport class AjaxPromise {\r\n  constructor(private api: SxcWebApiInternal, private sxc: SxcInstanceInternal) {\r\n  }\r\n\r\n  /**\r\n   * Make a jQuery style promise request\r\n   * @param {AjaxSettings} settings\r\n   * @returns {JQueryPromise<any>}\r\n   * @memberof AjaxPromise\r\n   */\r\n  public makePromise(settings: AjaxSettings): JQueryPromise<any> {\r\n    var headers = this.api.headers();\r\n    // debugger;\r\n    if (window.$ == null) {\r\n      throw new Error('JQuery is now removed from 2sxc installation. Please use newer api like fetch or include JQuery in your project');\r\n    }\r\n    const promise = window.$.ajax({\r\n      async: true,\r\n      dataType: settings.dataType || 'json', // default is json if not specified\r\n      data: JSON.stringify(settings.data),\r\n      contentType: 'application/json',\r\n      type: settings.method,\r\n      url: this.getActionUrl(settings),\r\n      beforeSend(xhr: JQueryXHR) {\r\n        for (var key in headers)\r\n          if (headers.hasOwnProperty(key))\r\n            xhr.setRequestHeader(key, headers[key]);\r\n      },\r\n    }) as JQueryPromise<any>;\r\n\r\n    if (!settings.preventAutoFail)\r\n      promise.fail(this.sxc.showDetailedHttpError);\r\n\r\n    return promise;\r\n  }\r\n\r\n\r\n  /**\r\n   * Generate the correct WebApi url\r\n   * @param settings the settings as they would be in jQuery\r\n   */\r\n  private getActionUrl(settings: AjaxSettings): string {\r\n    var url = settings.url || 'app/auto/api/' + settings.controller + '/' + settings.action;\r\n    // 2020-03-13 stop adding 2sxc endpoint-name, it's already happening in apiUrl so with this it happens 2x\r\n    // var endpoint = settings.endpoint || ToSxcName;\r\n    var base = this.sxc.root.http.apiUrl(url, settings.endpoint);\r\n    // let base = (settings.url)\r\n    //   ? this.sxc.root.http.apiUrl(settings.url) // this.sxc.resolveServiceUrl(settings.url)  // use url -> TODO: change this to use the new root.http.apiUrl\r\n    //   : env.apiRoot('2sxc')               // use controller/action\r\n    //     + 'app/auto/api/' + settings.controller + '/' + settings.action;\r\n\r\n    // if(settings.endpoint)\r\n    //     base = base.replace(env.apiRoot('2sxc'), \r\n    //         env.apiRoot(settings.endpoint));\r\n\r\n    return base + (!settings.params ? '' : ('?' + NoJQ.param(settings.params)));\r\n  }\r\n}\r\n","import { SxcWebApi } from '../..';\r\nimport { SxcInstanceInternal } from '../sxc-instance';\r\nimport { AjaxPromise } from './ajax-promise';\r\nimport { Environment } from '../../environment';\r\nimport { AjaxSettings } from './ajax-settings';\r\nimport { NoJQ } from '../../../../core';\r\n\r\n/**\r\n * helper API to run ajax / REST calls to the server\r\n * it will ensure that the headers etc. are set correctly\r\n * and that urls are rewritten\r\n * @internal\r\n */\r\nexport class SxcWebApiInternal implements SxcWebApi {\r\n    public readonly env: Environment;\r\n    constructor(private readonly sxc: SxcInstanceInternal) {\r\n        this.env = sxc.root.env;\r\n    }\r\n\r\n    get(settingsOrUrl: string | AjaxSettings, params?: any, data?: any, preventAutoFail?: boolean): JQueryPromise<any> {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'GET');\r\n    }\r\n\r\n    post(settingsOrUrl: string | AjaxSettings, params?: any, data?: any, preventAutoFail?: boolean): JQueryPromise<any> {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'POST');\r\n    }\r\n\r\n    delete(settingsOrUrl: string | AjaxSettings, params?: any, data?: any, preventAutoFail?: boolean): JQueryPromise<any> {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'DELETE');\r\n    }\r\n\r\n    put(settingsOrUrl: string | AjaxSettings, params?: any, data?: any, preventAutoFail?: boolean): JQueryPromise<any> {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'PUT');\r\n    }\r\n\r\n    request(settings: string | AjaxSettings, params: any, data: any, preventAutoFail: boolean, method: string): JQueryPromise<any> {\r\n\r\n        // url parameter: auto convert a single value (instead of object of values) to an id=... parameter\r\n        // tslint:disable-next-line:curly\r\n        if (typeof params !== 'object' && typeof params !== 'undefined')\r\n            params = { id: params };\r\n\r\n        // if the first parameter is a string, resolve settings\r\n        if (typeof settings === 'string') {\r\n            const controllerAction = settings.split('/');\r\n            const controllerName = controllerAction[0];\r\n            const actionName = controllerAction[1];\r\n\r\n            if (controllerName === '' || actionName === '')\r\n                console.warn('Error: controller or action not defined. Will continue with likely errors.');\r\n\r\n            settings = {\r\n                controller: controllerName,\r\n                action: actionName,\r\n                params,\r\n                data,\r\n                url: controllerAction.length > 2 ? settings : null,\r\n                preventAutoFail,\r\n            };\r\n        }\r\n\r\n        const defaults = {\r\n            method: method === null ? 'POST' : method,\r\n            params: null as any,\r\n            preventAutoFail: false,\r\n        };\r\n        // new 10.25\r\n        var http = new AjaxPromise(this, this.sxc);\r\n\r\n        settings = Object.assign({}, defaults, settings);\r\n\r\n        const promise = http.makePromise(settings as AjaxSettings);\r\n\r\n        return promise;\r\n    }\r\n\r\n    fetchRaw(url: string, data?: string | Record<string, any>, method?: string): Promise<Response> {\r\n        const ctxParams = {} as { appId?: number; zoneId?: number; };\r\n        const ctx = this.sxc.ctx;\r\n        const urlLower = url.toLocaleLowerCase();\r\n        if (ctx?._ignoreHeaders && urlLower.includes('app/auto/')) {\r\n            if (ctx?.appId && !urlLower.includes('appid=')) ctxParams.appId = ctx.appId;\r\n            if (ctx?.zoneId && !urlLower.includes('zoneId=')) ctxParams.zoneId = ctx.zoneId;\r\n        }\r\n        url = this.url(url, ctxParams);\r\n        method = method || (data ? 'POST' : 'GET');\r\n        const headers = this.headers(method);\r\n\r\n        if (data) {\r\n            // test if data is a json. If it's not, convert it to json\r\n            try {\r\n                JSON.parse(data as string);\r\n            } catch {\r\n                data = JSON.stringify(data);\r\n            }\r\n        }\r\n\r\n        return fetch(url, {\r\n            headers,\r\n            method,\r\n            ...(data && { body: data as string }),\r\n        });\r\n    }\r\n\r\n    // Note: fetch was documented in v12.10 (December 2021) but will probably never be used externally\r\n    // So we rename it to fetchRaw and later will make fetch just be the json implementation.\r\n    // Renamed and added this warning in 13.04 (2022-03-14), will drop in v14 and probably make it do fetchJson by default\r\n    // Changed functionality in 13.10 (2022-05-04) to make it do fetchJson by default\r\n    // Changed functionality back in 13.11 (2022-05-10) because it seems that Mobius was published using fetch\r\n    // Important: Do not document in the docs, as it shouldn't be used\r\n    fetch(url: string, data?: string | Record<string, any>, method?: string): Promise<Response> {\r\n        console.warn(`You are calling 'fetch' on the sxc.webApi. This is deprecated will stop in 2sxc v15, please use fetchRaw(...) or fetchJson(...) instead.`)\r\n        return this.fetchJson(url, data, method);\r\n    }\r\n\r\n    fetchJson<T = any>(url: string, data?: string | Record<string, any>, method?: string): Promise<T> {\r\n        return this.fetchRaw(url, data, method).then(response => response.json());\r\n    }\r\n\r\n    headers(method?: string): Record<string, string> {\r\n        const headers = this.sxc.root.http.headers(this.sxc.id, this.sxc.cbid, this.sxc.ctx);\r\n        if (!method) {\r\n            return headers;\r\n        }\r\n\r\n        switch (method.toLocaleUpperCase()) {\r\n            case 'GET':\r\n                headers['Accept'] = 'application/json';\r\n                break;\r\n            default:\r\n                headers['Accept'] = 'application/json';\r\n                headers['Content-Type'] = 'application/json';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param url A short, medium or long url. \r\n     * Short like `controller/method`, \r\n     * medium like `app/auto/api/controller/method`\r\n     * long like `https://xyz.\r\n     * In all cases it can also have ?params etc.\r\n     * @param params Optional parameters as string or object, will be added to url-params. \r\n     * @returns In the cases of a short/medium url, \r\n     * it will auto-expand to have the full url as needed for an API call. \r\n     */\r\n    url(url: string, params?: string | Record<string, any>): string {\r\n        if (url == null) return url;\r\n\r\n        const urlAndParams = url.split('#')[0].split('?');\r\n\r\n        // url fixes\r\n        url = urlAndParams[0];\r\n        const urlParts = url.split('/');\r\n        if (urlParts.length === 2 && urlParts[0] && urlParts[1]) {\r\n            const controller = urlParts[0];\r\n            const action = urlParts[1];\r\n            url = `app/auto/api/${controller}/${action}`;\r\n        }\r\n        url = this.sxc.root.http.apiUrl(url);\r\n\r\n        // params fixes\r\n        params = `${urlAndParams[1] || ''}&${params ? typeof params === 'string' ? params : NoJQ.param(params) : ''}`\r\n            .split('&')\r\n            .filter(p => !!p)\r\n            .join('&');\r\n\r\n        // result\r\n        url = [url, params].filter(p => !!p).join('?');\r\n        return url;\r\n    }\r\n}\r\n","import { SxcInstanceInternal } from '..';\r\n\r\n/**\r\n* Base class for anything attached to an sxc-instance\r\n* @internal\r\n*/\r\nexport class SxcInstancePart {\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param {SxcInstanceInternal} sxc\r\n  * @param {string} partName name of the part\r\n  * @memberof SxcData\r\n  */\r\n  constructor(public sxc: SxcInstanceInternal, public partName: string) {\r\n      \r\n  }\r\n\r\n}\r\n  ","import { SxcInstanceInternal } from '..';\r\nimport { SxcInstancePart } from '../sxc-instance-part';\r\nimport { SxcWebApiInternal } from '../web-api/sxc-web-api';\r\n\r\n/**\r\n* Base class doing common checks\r\n* @internal\r\n*/\r\nexport class SxcDataQueryBase extends SxcInstancePart {\r\n  protected readonly webApi: SxcWebApiInternal;\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param {SxcInstanceInternal} sxc\r\n  * @param {string} name the content-type name\r\n  * @memberof SxcData\r\n  */\r\n  constructor(\r\n    sxc: SxcInstanceInternal,\r\n    readonly name: string,\r\n    nameInError: string\r\n  ) {\r\n    super(sxc, 'data');\r\n    this.webApi = sxc.webApi;\r\n    \r\n    // Fail early if something is wrong\r\n    nameInError += ' name ';\r\n    if (name == null) throw nameInError + 'is empty';\r\n    if (name.indexOf(\"/\") != -1 || name.indexOf(\"\\\\\") != -1) throw nameInError + 'has slashes - not allowed';\r\n    if (name.indexOf(\"?\") != -1) throw nameInError + 'has \"?\" - not allowed';\r\n  }\r\n\r\n}\r\n  ","import { SxcInstanceInternal } from '..';\r\nimport { SxcDataQueryBase } from './sxc-data-query-base';\r\n\r\nconst ContentApiRoot = 'app/auto/data';\r\n\r\nconst TargetTypeEntity = 4;\r\n\r\n/**\r\n* Instance Data accessor to get (and in future create/update) data items/entities\r\n* @internal\r\n*/\r\nexport class SxcData<T = unknown> extends SxcDataQueryBase {\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param {SxcInstanceInternal} sxc\r\n  * @param {string} name the content-type name\r\n  * @memberof SxcData\r\n  */\r\n  constructor(sxc: SxcInstanceInternal, readonly name: string) {\r\n    super(sxc, name, 'ContentType');\r\n  }\r\n\r\n  /**\r\n  * Get all items of this type.\r\n  */\r\n  getAll(): Promise<T[]> {\r\n    return this.getInternal<T[]>();\r\n  }\r\n\r\n  /**\r\n  * Get the specific item with the ID. It will return null if not found\r\n  */\r\n  getOne(id: number): Promise<T> | null {\r\n    return this.getInternal<T>(id);\r\n  };\r\n\r\n  // Future\r\n  private getMany(criteria: Record<string, unknown>, fields: Array<string>): Promise<T[]> {\r\n    throw 'not implemented - probably v13.5 or something';\r\n  }\r\n\r\n\r\n  /**\r\n  * Get all or one data entity from the backend\r\n  * @param id optional id as number or string - if not provided, will get all\r\n  * @param params optional parameters - ATM not usefuly but we plan to support more filters etc. \r\n  * @returns an array with 1 or n entities in the simple JSON format\r\n  */\r\n  private getInternal<TCall>(id?: string | number, params?: string | Record<string, unknown>): Promise<TCall> {\r\n    let path = `${ContentApiRoot}/${this.name}`;\r\n    if (id && (typeof id === 'string' || typeof id === 'number')) path += \"/\" + id;\r\n    return this.webApi.fetchJson(this.webApi.url(path, params));\r\n  }\r\n\r\n  create(values: Record<string, unknown>): Promise<Record<string, unknown>>;\r\n  create(values: Record<string, unknown>, metadataFor: MetadataFor | string): Promise<Record<string, unknown>>;\r\n\r\n  create(values: Record<string, unknown>, metadataFor?: MetadataFor | string): Promise<Record<string, unknown>> {\r\n    const path = `${ContentApiRoot}/${this.name}`;\r\n    if (metadataFor != null) {\r\n      if (typeof(metadataFor) === 'string')\r\n        metadataFor = { Target: TargetTypeEntity, Guid: metadataFor } as MetadataFor;\r\n      try {\r\n        values.For = metadataFor;\r\n      } catch { }\r\n    }\r\n    return this.webApi.fetchJson(this.webApi.url(path), values, 'POST');\r\n  }\r\n\r\n  update(id: number, values: Record<string, unknown>): Promise<Record<string, unknown>> {\r\n    const path = `${ContentApiRoot}/${this.name}/${id}`;\r\n    return this.webApi.fetchJson(this.webApi.url(path), values, 'POST');\r\n  }\r\n\r\n  delete(id: number): Promise<null>;\r\n  delete(guid: string): Promise<null>;\r\n\r\n  delete(idOrGuid: number | string): Promise<null> {\r\n    const path = `${ContentApiRoot}/${this.name}/${idOrGuid}`;\r\n    return this.webApi.fetchRaw(this.webApi.url(path), undefined, 'DELETE').then(response => null);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport interface MetadataFor {\r\n  Target: string | number;\r\n  Number?: number;\r\n  String?: string;\r\n  Guid?: string;\r\n  Singleton?: boolean;\r\n}\r\n","import { SxcInstanceInternal } from '..';\r\nimport { SxcDataQueryBase } from './sxc-data-query-base';\r\n\r\n/**\r\n * Instance Query accessor\r\n * @internal\r\n */\r\nexport class SxcQuery extends SxcDataQueryBase {\r\n\r\n  constructor(sxc: SxcInstanceInternal, readonly name: string) {\r\n    super(sxc, name, 'Query');\r\n  }\r\n\r\n  getAll<T = unknown>(): Promise<T>;\r\n  getAll<T = unknown>(urlParams: string | Record<string, unknown>): Promise<T>;\r\n  getAll<T = unknown>(urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Retrieve the entire query with all streams\r\n   *\r\n   * @template T\r\n   * @returns {Promise<T>} containing a object with stream-names and items in the streams.\r\n   * @memberof SxcQuery\r\n   */\r\n  getAll<T = unknown>(urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T> {\r\n    return this.getInternal<T>(undefined, urlParams, data);\r\n  }\r\n\r\n  /**\r\n   * Get just one stream, returning an array of items in that stream\r\n   *\r\n   * @template T\r\n   * @param {string} stream\r\n   * @returns {Promise<T[]>} containing an array of items - or empty if stream not found or nothing returned\r\n   * @memberof SxcQuery\r\n   */\r\n  getStream<T = unknown>(stream: string): Promise<T[]>;\r\n  getStream<T = unknown>(stream: string, urlParams: string | Record<string, unknown>): Promise<T[]>;\r\n  getStream<T = unknown>(stream: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T[]>;\r\n  \r\n  getStream<T = unknown>(stream: string, urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T[]> {\r\n    if (stream.indexOf(',') !== -1) throw \"parameter 'stream' can only contain one stream name for 'getStream'\";\r\n    return this.getInternal<unknown>(stream, urlParams, data).then((data) => {\r\n      if (data == null || !data.hasOwnProperty(stream)) return [];\r\n      return (data as any)[stream] as T[];\r\n    })\r\n  }\r\n\r\n  getStreams<T = unknown>(streams: string): Promise<T>;\r\n  getStreams<T = unknown>(streams: string, urlParams: string | Record<string, unknown>): Promise<T>;\r\n  getStreams<T = unknown>(streams: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Get a query but only the selected streams.\r\n   *\r\n   * @template T\r\n   * @param {string} streams\r\n   * @returns {Promise<T>} containing a object with stream-names and items in the streams.\r\n   * @memberof SxcQuery\r\n   */\r\n  getStreams<T = unknown>(streams: string, urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T> {\r\n    return this.getInternal<T>(streams, urlParams, data);\r\n  }\r\n\r\n  /**\r\n   * Get all or one data entity from the backend\r\n   * @param id optional id as number or string - if not provided, will get all\r\n   * @param params optional parameters - ATM not usefuly but we plan to support more filters etc. \r\n   * @returns an array with 1 or n entities in the simple JSON format\r\n   */\r\n  private getInternal<T = unknown>(streams?: string, params?: string | Record<string, any>, data?: string | Record<string, unknown>): Promise<T> {\r\n    let path = \"app/auto/query/\" + this.name;\r\n    if (streams && (typeof streams === 'string')) path += \"?stream=\" + streams;\r\n    return this.webApi.fetchJson(this.webApi.url(path, params), data);\r\n  }\r\n}\r\n","import { SxcInstancePart } from './sxc-instance-part';\r\n\r\n/**\r\n * This is in charge of sxc.cms on the instance level.\r\n * ATM it just has the run command.\r\n * In future, it may also have dedicated command like `layout` etc.\r\n * @internal\r\n */\r\nexport class SxcInstanceCms extends SxcInstancePart {\r\n  /**\r\n   * Run a command on this sxc-instance. \r\n   * Requires the Cms parts to be loaded. \r\n   * @param runParams - real type is actually RunParams\r\n   */\r\n  run<T>(runParams: unknown): Promise<void | T> { \r\n    throw 'sxc instance cms.run() requires cms features \"2sxc.JsCms\" to be enabled to work';\r\n  }\r\n}\r\n","import { ContextIdentifier } from '../sxc-root/context-identifier';\r\nimport { SxcInstance } from '..';\r\nimport { SxcWebApiInternal } from './web-api/sxc-web-api';\r\nimport { ApiUrlRoots, HasLog, ToSxcName } from '../../../core';\r\nimport { SxcRootExt } from '../sxc-root/sxc-root';\r\nimport { SxcRootInternals } from '../sxc-root/sxc-root-internals';\r\nimport { SxcInstanceManage } from './sxc-instance-manage';\r\nimport { SxcData } from './data/sxc-data';\r\nimport { SxcQuery } from './data/sxc-query';\r\nimport { SxcInstanceCms } from './sxc-instance-cms';\r\n\r\n// const serviceScopes = ['app', 'app-sys', 'app-api', 'app-query', 'app-content', 'eav', 'view', 'dnn'];\r\n\r\n/**\r\n* The typical sxc-instance object for a specific DNN module or content-block\r\n* @internal\r\n*/\r\nexport class SxcInstanceInternal extends HasLog implements SxcInstance {\r\n  private _isSxcInstance = true;\r\n  webApi: SxcWebApiInternal;\r\n\r\n  /**\r\n  * The manage controller for edit/cms actions\r\n  *\r\n  * @type {*}\r\n  * @memberof SxcInstanceInternal\r\n  */\r\n  manage: SxcInstanceManage = null; // initialize correctly later on\r\n\r\n  /**\r\n   * CMS operations on this sxc-instance.\r\n   */\r\n  cms = new SxcInstanceCms(this, 'cms');\r\n  \r\n  constructor(\r\n    public id: number,\r\n    public cbid: number,\r\n    /** The environment information, important for http-calls */\r\n    public readonly root: SxcRootExt & SxcRootInternals,\r\n    /**\r\n    * Custom context information provided by the constructor - will replace auto-context detection\r\n    */\r\n    public ctx?: ContextIdentifier,\r\n  ) {\r\n    super('SxcInstance', null, 'Generating for ' + id + ':' + cbid);\r\n    this.webApi = new SxcWebApiInternal(this);\r\n    \r\n    // add manage property, but not within initializer, because inside the manage-initializer it may reference 2sxc again\r\n    try { // sometimes the manage can't be built, like before installing\r\n      if (root._manage) root._manage.initInstance(this);\r\n    } catch (e) {\r\n      console.error('error in 2sxc - will only log but not throw', e);\r\n    }\r\n    \r\n    // this only works when manage exists (not installing) and translator exists too\r\n    if (root._translateInit && this.manage)\r\n    // ensure that we really have a manage context, otherwise we can't initialize i18n and it doesn't make sense\r\n    if (this.manage.context && this.manage.context.app && this.manage.context.app.currentLanguage)\r\n    root._translateInit(this.manage);    // init translate, not really nice, but ok for now\r\n  }\r\n\r\n  public static is(thing: unknown): thing is SxcInstanceInternal {\r\n    const maybe = thing as SxcInstanceInternal;\r\n    return maybe._isSxcInstance;\r\n  }\r\n    \r\n  /**\r\n  * TODO: DOCS\r\n  *\r\n  * @param {string} contentType\r\n  * @returns\r\n  * @memberof SxcInstanceInternal\r\n  */\r\n  data<T = unknown>(contentType: string) {\r\n    return new SxcData<T>(this, contentType);\r\n  }\r\n  \r\n  query(query: string) {\r\n    return new SxcQuery(this, query);\r\n  }\r\n    \r\n    \r\n  /**\r\n  * converts a short api-call path like \"/app/Blog/query/xyz\" to the DNN full path\r\n  * which varies from installation to installation like \"/desktopmodules/api/2sxc/app/...\"\r\n  * @deprecated use http.apiUrl instead\r\n  * @param virtualPath\r\n  * @returns mapped path\r\n  */\r\n  resolveServiceUrl(virtualPath: string) {\r\n    const scope = virtualPath.split('/')[0].toLowerCase();\r\n    \r\n    // stop if it's not one of our special paths\r\n    if (ApiUrlRoots.indexOf(scope) === -1)\r\n    return virtualPath;\r\n    \r\n    return this.root.http.apiRoot(ToSxcName) + scope + '/' + virtualPath.substring(virtualPath.indexOf('/') + 1);\r\n  }\r\n    \r\n    \r\n  // Show a nice error with more infos around 2sxc\r\n  showDetailedHttpError(result: any): any {\r\n    if (window.console)\r\n    console.log(result);\r\n    \r\n    // check if the error was just because a language file couldn't be loaded - then don't show a message\r\n    if (result.status === 404 &&\r\n      result.config &&\r\n      result.config.url &&\r\n      result.config.url.indexOf('/dist/i18n/') > -1) {\r\n        if (window.console)\r\n        console.log('just fyi: failed to load language resource; will have to use default');\r\n        return result;\r\n    }\r\n      \r\n    // if it's an unspecified 0-error, it's probably not an error but a cancelled request,\r\n    // (happens when closing popups containing angularJS)\r\n    if (result.status === 0 || result.status === -1)\r\n    return result;\r\n    \r\n    // let's try to show good messages in most cases\r\n    let infoText = 'Had an error talking to the server (status ' + result.status + ').';\r\n    const srvResp = result.responseText\r\n    ? JSON.parse(result.responseText) // for jquery ajax errors\r\n    : result.data; // for angular $http\r\n    if (srvResp) {\r\n      const msg = srvResp.Message;\r\n      if (msg) infoText += '\\nMessage: ' + msg;\r\n      const msgDet = srvResp.MessageDetail || srvResp.ExceptionMessage;\r\n      if (msgDet) infoText += '\\nDetail: ' + msgDet;\r\n      \r\n      \r\n      if (msgDet && msgDet.indexOf('No action was found') === 0)\r\n      if (msgDet.indexOf('that matches the name') > 0)\r\n      infoText += '\\n\\nTip from 2sxc: you probably got the action-name wrong in your JS.';\r\n      else if (msgDet.indexOf('that matches the request.') > 0)\r\n      infoText += '\\n\\nTip from 2sxc: Seems like the parameters are the wrong amount or type.';\r\n      \r\n      if (msg && msg.indexOf('Controller') === 0 && msg.indexOf('not found') > 0)\r\n      infoText +=\r\n      // tslint:disable-next-line:max-line-length\r\n      \"\\n\\nTip from 2sxc: you probably spelled the controller name wrong or forgot to remove the word 'controller' from the call in JS. To call a controller called 'DemoController' only use 'Demo'.\";\r\n      \r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    infoText += '\\n\\nif you are an advanced user you can learn more about what went wrong - discover how on 2sxc.org/help?tag=debug';\r\n    alert(infoText);\r\n    \r\n    return result;\r\n  }\r\n    \r\n  isEditMode(): boolean {\r\n    return (this.manage && this.manage._isEditMode()) === true;\r\n  }\r\n}\r\n    ","import { SxcRootInternals } from '../sxc-root/sxc-root-internals';\r\nimport { SxcRootExt } from '../sxc-root/sxc-root';\r\nimport { SxcInstanceInternal } from '.';\r\nimport { ContextIdentifier } from '../sxc-root/context-identifier';\r\n\r\nconst warning = 'Warning Obsolete Feature on 2sxc JS: the .data has been obsolete for a long time and is repurposed. \\n'\r\n+ 'If you are calling \".data.on(...)\" or \".data.sourceUrl\" you are running very old code. \\n' \r\n+ 'Guidance to fix this: https://r.2sxc.org/brc-13-id.';\r\n\r\n/** @internal */\r\nexport class SxcInstanceWithInternals extends SxcInstanceInternal {\r\n  source: any = null;\r\n  isLoaded = false;\r\n  lastRefresh: Date = null;\r\n  \r\n  constructor(\r\n    public id: number,\r\n    public cbid: number,\r\n    public cacheKey: string,\r\n    protected $2sxc: SxcRootExt & SxcRootInternals,\r\n    ctx?: ContextIdentifier\r\n    ) {\r\n      super(id, cbid, $2sxc, ctx);\r\n      \r\n      // Help cach error on call of old code\r\n      // Background: From v3 to v12 data had a unusualy system for retrieving data belonging to the module\r\n      // We believe it's almost never used, but the TimelineJs App always used it, and we believe\r\n      // 2-3 other examples may have as well. \r\n      // Now in v13 sxc.data is used to get any kind of data,\r\n      // and we want to make sure that old code will show a warning helping people fix this\r\n      // All the old code would have started with sxc.data.on('load', ...) so this is where we give them the error\r\n      // We only do this if it hasn't been done already\r\n      if (!(this.data as any).on) {\r\n        (this.data as any).on = () => { throw warning };\r\n        Object.defineProperty(this.data, 'sourceUrl', {\r\n            get: function() { throw warning }\r\n        });\r\n    }\r\n  }\r\n\r\n  recreate(resetCache: boolean): SxcInstanceWithInternals {\r\n    if (resetCache) delete this.$2sxc._controllers[this.cacheKey]; // clear cache\r\n    return this.$2sxc(this.id, this.cbid) as any as SxcInstanceWithInternals; // generate new\r\n  }\r\n}\r\n","\r\n/**\r\n * This is a placeholder in the settings, which must be replaced with \"2sxc\" or another term for other dnn extensions\r\n * @internal\r\n */\r\nexport const ApiExtensionPlaceholder = 'e.x.t';\r\n\r\n/**\r\n * The special header meta tag containing settings for 2sxc\r\n * @internal\r\n */\r\nexport const MetaHeaderJsApi = '_jsApi';\r\n\r\n/**\r\n * The fallback path to the UI\r\n * @internal\r\n */\r\nexport const DnnUiRoot = '/desktopmodules/tosic_sexycontent/';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PlatformOqtane = 'oqtane';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PlatformDnn = 'dnn';\r\n\r\n/**\r\n * The fallback AntiForgery token header name (as in Dnn)\r\n * @internal\r\n */\r\nexport const AntiForgeryTokenHeaderNameDnn = 'RequestVerificationToken';\r\n","import { Environment } from '.';\r\nimport { HasLog, NoJQ } from '../../../core';\r\nimport { Window, JsInfo } from '..';\r\nimport { AntiForgeryTokenHeaderNameDnn, DnnUiRoot, PlatformDnn } from '../constants';\r\n\r\nconst helpAutoDetect = 'You must either include jQuery on the page or inject the jsApi parameters to prevent auto-detection.';\r\ndeclare const window: Window;\r\n\r\n/**\r\n * This helps load environment information from DNN ServicesFramework - it's a fallback in case the other mechanisms fail\r\n * @internal\r\n */\r\nexport class EnvironmentDnnSfLoader extends HasLog {\r\n    constructor(public env: Environment) {\r\n        super('Env.DnnLdr', env.log);\r\n    }\r\n\r\n\r\n    /**\r\n     * This will assume the new parameter injection failed and it will attempt to fallback\r\n     * it's for backward compatibility, in case something is using $2sxc and doesn't provide the new\r\n     * implementation\r\n     */\r\n    dnnSfFallback(): void {\r\n        const cl = this.log.call('dnnSfFallback');\r\n        // await page-ready to then initialize the stuff\r\n        NoJQ.ready(() => this.dnnSfLoadWhenDocumentReady());\r\n        cl.done('started dom-ready watcher')\r\n    }\r\n\r\n    private dnnSfLoadWhenDocumentReady(): void {\r\n        const cl = this.log.call('dnnSfLoadWhenDocumentReady');\r\n        if (typeof window.$ === 'undefined') {\r\n            cl.done('error');\r\n            throw `Can't load pageid, moduleid, etc. and $ is not available. \\n ${helpAutoDetect}`;\r\n        }\r\n\r\n        const sf = window.$.ServicesFramework;\r\n        if (typeof sf === 'undefined') {\r\n            cl.done('error');\r\n            throw `Can't load pageid, moduleid etc. and DNN SF is not available. \\n ${helpAutoDetect}`;\r\n        }\r\n        const dnnSf = sf(0);\r\n        var apiRoot = dnnSf.getServiceRoot('2sxc');\r\n        var sfJsInfo: JsInfo = {\r\n            page: dnnSf.getTabId(),\r\n            root: 'unknown',\r\n            api: apiRoot,\r\n            appApi: apiRoot,\r\n            rvtHeader: AntiForgeryTokenHeaderNameDnn,\r\n            rvt: dnnSf.getAntiForgeryValue(),\r\n            uiRoot: DnnUiRoot,\r\n            platform: PlatformDnn,\r\n        };\r\n        this.env.load(sfJsInfo, 'dnn SF');\r\n        cl.done();\r\n    }\r\n}\r\n","import { JsInfo } from '..';\r\nimport { Log } from '../../../core';\r\nimport { EnvironmentMetaLoader } from './env-loader-meta';\r\n\r\nconst InputValue = 'value';\r\n\r\nconst SelectorInputRvt = `input[name=__RequestVerificationToken]`;\r\n\r\n/**\r\n * Special loader for dynamic pages like Oqtane, where content can change at runtime\r\n * @internal\r\n */\r\nexport class EnvironmentLoaderDynamic {\r\n\r\n  public log: Log;\r\n\r\n  constructor(\r\n      private mainLoader: EnvironmentMetaLoader\r\n  ) {\r\n    this.log = new Log('ldr.dynmic', mainLoader.log);\r\n  }\r\n\r\n  /**\r\n   * Watch for changes in our special meta header, to update the variables.\r\n   * Important for Oqtane, which changes the page on the fly without reloading.\r\n   */\r\n  public startMetaTagObserver(attribute: string): void {\r\n    if (!!this.observer) return;\r\n    this.observer = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n      for(const mut of mutationsList)\r\n        if (mut.type === 'attributes' && mut.attributeName === attribute)\r\n          this.mainLoader.updateEnv(JSON.parse(this.mainLoader.getMetaContent()) as JsInfo)\r\n    });\r\n    this.log.add('start observing meta tag');\r\n    this.observer.observe(this.mainLoader.getJsApiMetaTag(), { attributes: true, childList: false, subtree: false });\r\n  }\r\n  private observer: MutationObserver;\r\n\r\n  /**\r\n   * Load RequestVerificationToken from the hidden form-field in Oqtane\r\n   */\r\n  public startInputRvtObserver(): void {\r\n    if (!!this.inputRvtObserver) return;\r\n    this.inputRvtObserver = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n      for(const mut of mutationsList)\r\n        if (mut.type === 'attributes' && mut.attributeName === InputValue)\r\n          this.loadRvtFromHiddenInput(mut.target as HTMLInputElement);\r\n    });\r\n    this.log.add('start observing Rvt Input');\r\n    const hiddenField = document.querySelector(SelectorInputRvt);\r\n    this.loadRvtFromHiddenInput(hiddenField as HTMLInputElement);\r\n    this.inputRvtObserver.observe(hiddenField, { attributes: true, childList: false, subtree: false });\r\n  }\r\n  private inputRvtObserver: MutationObserver;\r\n\r\n  private loadRvtFromHiddenInput(input: HTMLInputElement){\r\n    this.log.add('Input Rvt updated');\r\n    if(input && input.value)\r\n      this.mainLoader.env.updateRvt(input.value);\r\n  }\r\n}\r\n","import { JsInfo } from '..';\r\nimport { Environment } from '.';\r\nimport { EnvironmentDnnSfLoader } from './env-loader-dnn-sf';\r\nimport { MetaHeaderJsApi, PlatformOqtane } from '../constants';\r\nimport { HasLog, Log } from '../../../core';\r\nimport { EnvironmentLoaderDynamic } from './env-loader-dynamic';\r\n\r\n// temp: usually 10, but because Oqtane has some delays, we'll temporarily increase to 100 till we're safe\r\nconst maxRetries = 100;\r\nconst retryMs = 10;\r\n\r\nconst MetaSourceId = 'meta header';\r\n\r\nconst MetaProperty = 'content';\r\n\r\n\r\nfunction logTest(): boolean\r\n{\r\n    console.log('test');\r\n    return true;\r\n}\r\n/**\r\n * This loads environment information from the meta-header tag.\r\n * Because of timing issues, it will try multiple times\r\n * @internal\r\n */\r\nexport class EnvironmentMetaLoader extends HasLog {\r\n    public retries = 0;\r\n\r\n    public log: Log;\r\n\r\n    private dynamicPageHelper: EnvironmentLoaderDynamic;\r\n\r\n    constructor(public env: Environment) {\r\n        super('Env.MetaLd', logTest ? env.log : env.log);\r\n        this.dynamicPageHelper = new EnvironmentLoaderDynamic(this);\r\n    }\r\n\r\n    public loadMetaFromHeader(forceFallback = false): void {\r\n        const cl = this.log.call('loadMetaFromHeader', `${forceFallback}`);\r\n        // avoid duplicate execution\r\n        if(this.env.ready) return cl.done('loadMeta - ready');\r\n\r\n        this.log.add('loadMetaFromHeader: start, retry:' + this.retries + ', force fallback: ' + forceFallback);\r\n        const meta = this.getMetaContent();\r\n        if(!meta) {\r\n            this.retries++;\r\n            if(forceFallback || this.retries >= maxRetries) {\r\n                new EnvironmentDnnSfLoader(this.env).dnnSfFallback();\r\n                return cl.done()\r\n            }\r\n            setTimeout(() => { this.loadMetaFromHeader(); }, retryMs);\r\n            return cl.done('will retry');\r\n        }\r\n        // Load the settings\r\n        this.updateEnv(JSON.parse(meta) as JsInfo);\r\n\r\n        // monitor setting changes - important for Oqtane\r\n        this.dynamicPageHelper.startMetaTagObserver(MetaProperty);\r\n        cl.done();\r\n    }\r\n\r\n    public updateEnv(newJsInfo: JsInfo) {\r\n        this.log.add('meta env info updated');\r\n        this.env.load(newJsInfo, MetaSourceId);\r\n        if(newJsInfo.platform === PlatformOqtane)\r\n            this.dynamicPageHelper.startInputRvtObserver();\r\n    }\r\n\r\n    public getMetaContent(): string {\r\n        const ourMeta = this.getJsApiMetaTag();\r\n        if (!ourMeta) return null;\r\n        return ourMeta.getAttribute(MetaProperty)\r\n    }\r\n\r\n    public getJsApiMetaTag() {\r\n        return document.querySelector(`meta[name=${MetaHeaderJsApi}]`);\r\n    }\r\n\r\n\r\n    /**\r\n     * Watch for changes in our special meta header, to update the variables.\r\n     * Important for Oqtane, which changes the page on the fly without reloading.\r\n     */\r\n    public startMetaTagObserver(): void {\r\n      if (!!this.observer) return;\r\n      this.observer = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n        for(const mut of mutationsList)\r\n          if (mut.type === 'attributes' && mut.attributeName === MetaProperty)\r\n            this.updateEnv(JSON.parse(this.getMetaContent()) as JsInfo)\r\n      });\r\n      this.log.add('start observing meta tag');\r\n      this.observer.observe(this.getJsApiMetaTag(), { attributes: true, childList: false, subtree: false });\r\n    }\r\n    private observer: MutationObserver;\r\n\r\n}\r\n","import { JsInfo } from '..';\r\nimport { EnvironmentMetaLoader } from './env-loader-meta';\r\nimport { HasLog, Insights, SxcApiUrlRoot } from '../../../core';\r\nimport { AntiForgeryTokenHeaderNameDnn, DnnUiRoot, PlatformDnn } from '../constants';\r\n\r\ndeclare const _jsApi: JsInfo;\r\n\r\n/**\r\n * Provides environment information to $2sxc - usually page-id, api-root and stuff like that\r\n */\r\nexport class Environment extends HasLog {\r\n    /** @internal */\r\n    private header: JsInfo;\r\n    public ready = false;\r\n    public source = '';\r\n\r\n    /** @internal */\r\n    public metaLoader: EnvironmentMetaLoader;\r\n\r\n    /** @internal */\r\n    constructor() {\r\n        super('Environment', null, 'starting');\r\n        this.log.keepData = true;   // always keep here for clarity\r\n        Insights.add('system', 'environment', this.log);\r\n        this.metaLoader = new EnvironmentMetaLoader(this);\r\n\r\n        // check if a global variable was already set which we should use\r\n        if(typeof _jsApi !== typeof undefined) {\r\n            this.log.add('found _jsApi, will use');\r\n            this.load(_jsApi, 'global variable _jsApi');\r\n        } else {\r\n            this.log.add('will start initializing');\r\n            this.metaLoader.loadMetaFromHeader();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load a new jsInfo - must be public, as it's used in iframes where jquery is missing\r\n     * @param newJsInfo new info to load\r\n     */\r\n    public load(newJsInfo: JsInfo, source?: string) {\r\n        const cl = this.log.call('load');\r\n        if(newJsInfo.root && !newJsInfo.api) {\r\n            cl.add('root provided, api missing, will auto-complete');\r\n            const addSlash = (newJsInfo.root.endsWith('/') ? '' : '/');\r\n            newJsInfo.api = `${newJsInfo.root}${addSlash}${SxcApiUrlRoot}`;\r\n        }\r\n        this.header = newJsInfo;\r\n\r\n        // in some cases the UpdateRvt may already have been called before\r\n        // in which case it's probably more relevant\r\n        // so we should set it again\r\n        if(this.replacedRvt) this.header.rvt = this.replacedRvt;\r\n\r\n        this.ready = true;\r\n        this.source = source || 'external/unknown' + (this.replacedRvt ? '+rvt': '');\r\n        cl.return(newJsInfo, 'loaded from ' + this.source);\r\n    }\r\n\r\n    /** @internal */\r\n    private replacedRvt: string;\r\n\r\n    /** @internal */\r\n    public updateRvt(newRvt: string) {\r\n        if(!newRvt) return;\r\n        this.replacedRvt = newRvt;\r\n        this.header.rvt = newRvt;\r\n    }\r\n\r\n    /**\r\n     * The API endpoint url from the environment\r\n     */\r\n    public api(): string {\r\n        this.ensureReadyOrThrow('api');\r\n        return this.header.api;\r\n    }\r\n\r\n    // WIP - may return undefined\r\n    /** @internal */\r\n    public appApi(): string {\r\n        // WIP - must get it to work without 'appApi' but only 'api' to ensure ...\r\n        this.ensureReadyOrThrow('appApi');\r\n        return this.header.appApi;\r\n    }\r\n\r\n    /**\r\n     * The current page ID\r\n     */\r\n    public page(): number {\r\n        this.ensureReadyOrThrow('page');\r\n        return this.header.page;\r\n    }\r\n\r\n    /**\r\n     * The request verification token header name\r\n     */\r\n    public rvtHeader(): string {\r\n        this.ensureReadyOrThrow('rvtHeader');\r\n        return this.header.rvtHeader || AntiForgeryTokenHeaderNameDnn;\r\n    }\r\n\r\n    /**\r\n     * The request verification token value\r\n     */\r\n    public rvt(): string {\r\n        this.ensureReadyOrThrow('rvt');\r\n        return this.header.rvt;\r\n    }\r\n\r\n    /**\r\n     * The uiRoot path\r\n     * @internal\r\n     */\r\n    public uiRoot(): string {\r\n        this.ensureReadyOrThrow('uiRoot');\r\n        return this.header.uiRoot || DnnUiRoot;\r\n    }\r\n\r\n    /**\r\n     * The platform code like 'oqt' or 'dnn' in case the JS needs to know the difference\r\n     */\r\n    public platform(): string {\r\n        this.ensureReadyOrThrow('platform');\r\n        return this.header.platform || PlatformDnn;\r\n    }\r\n\r\n    /** @internal */\r\n    private ensureReadyOrThrow(partRequested: string): void {\r\n        if(this.ready) return;\r\n\r\n        // try one last time - usually it should really be ready by now\r\n        this.log.add('ensureReady - force last attempt to load MetaHeader for ' + partRequested)\r\n        this.metaLoader.loadMetaFromHeader(true);\r\n\r\n        // if still not ready, throw exception to console log\r\n        if(this.ready) return;\r\n        throw `Can't find ${partRequested} - something went wrong, pls contact 2sxc.org`;\r\n    }\r\n\r\n}\r\n\r\n","import { ApiExtensionPlaceholder } from '../constants';\r\nimport { AppApiMarker, Dictionary, HasLog, HeaderNames, ToSxcName } from '../../../core';\r\nimport { Http, ContextIdentifier, Environment } from '..';\r\n\r\n/** @internal */\r\nexport class SxcHttp extends HasLog implements Omit<Http, 'log'> {\r\n    constructor(private env: Environment) {\r\n        super('Sxc.Http');\r\n    }\r\n\r\n    headers(id?: number, cbid?: number, ctx?: ContextIdentifier): Dictionary<string> {\r\n        const cl = this.log.call('headers', `${id}, ${cbid}`);\r\n        const fHeaders: Dictionary<string> = {};\r\n        const pageId = this.env.page().toString();\r\n        if (!ctx?._ignoreHeaders) {\r\n            if (id) fHeaders[HeaderNames.ModuleId] = id.toString();\r\n            if (cbid) fHeaders[HeaderNames.ContentBlockId] = cbid.toString();\r\n            fHeaders[HeaderNames.TabId] = pageId;\r\n            fHeaders[HeaderNames.PageId] = pageId;\r\n        }\r\n        fHeaders[this.env.rvtHeader()] = this.env.rvt();\r\n        return cl.return(fHeaders, `headers(id:${id}, cbid:${cbid})`);\r\n    }\r\n\r\n    apiRoot(endpointName: string): string {\r\n        const cl = this.log.call('apiRoot');\r\n        var result = this.env.api().replace(ApiExtensionPlaceholder, endpointName);\r\n        return cl.return(result, `apiRoot('${endpointName}')`);\r\n    }\r\n\r\n    /**\r\n     * Get the API-Root path for Apps\r\n     * new in v12\r\n     * @param {string} endpointName\r\n     * @returns {string}\r\n     * @memberof SxcHttp\r\n     */\r\n     appApiRoot(): string {\r\n        const cl = this.log.call('appApiRoot');\r\n        // try to get it, or fall back to the previous / old convention\r\n        var result = this.env.appApi() ?? this.apiRoot(ToSxcName);\r\n        return cl.return(result, `appApiRoot()`);\r\n    }\r\n\r\n    apiUrl(url: string, endpointName?: string)\r\n    {\r\n        const cl = this.log.call('apiUrl');\r\n        this.log.add(`apiUrl(url:'${url}', endpointName:'${endpointName}')`);\r\n\r\n        // null/undefined check\r\n        if(url == null) return url;\r\n\r\n        // if starts with http: or https: then ignore\r\n        if(!url || url.indexOf('http:') == 0 || url.indexOf('https:') == 0 || url.indexOf('//') == 0)\r\n            return cl.return(url);\r\n\r\n        // if no endpoint specified, then also skip absolute and relative urls\r\n        if(!endpointName && (url.indexOf('/') == 0 || url.indexOf('.') == 0))\r\n            return cl.return(url);\r\n\r\n        var baseUrl = url.toLocaleLowerCase().startsWith(AppApiMarker)\r\n            ? this.appApiRoot()\r\n            : this.apiRoot(endpointName || ToSxcName);\r\n\r\n\r\n        // ensure base ends with slash\r\n        if(baseUrl[baseUrl.length-1] != '/') baseUrl += '/';\r\n        // ensure url doesn't start with slash\r\n        if(url[0] == '/') url = url.slice(1);\r\n        return cl.return(baseUrl + url);\r\n    }\r\n}\r\n","import { UrlParamManager } from '..';\r\n\r\nconst urlManager = new UrlParamManager();\r\nconst urlDebugState = urlManager.get('debug') === 'true';\r\n\r\n/** @internal */\r\nexport class Debug {\r\n    /**\r\n     * The load-debug state (provided by the url with debug=true)\r\n     */\r\n    load: boolean;\r\n\r\n    /**\r\n     * Cache breaker string, contans the version number of 2sxc if one is provided with sxcver=...\r\n     */\r\n    uncache: string;\r\n\r\n    constructor() {\r\n        this.load = urlDebugState;\r\n        this.uncache = urlManager.get('sxcver');\r\n    }\r\n\r\n    static urlState = urlDebugState;\r\n}\r\n","import { TotalPopup } from '../tools/total-popup';\r\nimport { UrlParamManager } from '../tools/url-param-manager';\r\nimport { Stats } from '../Stats';\r\nimport { SxcInstanceWithInternals } from '../sxc-instance/sxc-instance-with-internals';\r\nimport { SxcRootInternals } from './sxc-root-internals';\r\nimport { SxcRootExt, getRootPartsV2 } from './sxc-root';\r\nimport { Window } from '../_/window';\r\nimport { Debug } from '..';\r\nimport { Insights, SxcVersion } from '../../../core';\r\nimport { ContextIdentifier, isContextIdentifier, ensureCompleteOrThrow } from './context-identifier';\r\nimport { SxcInstanceInternal } from '../sxc-instance/sxc-instance';\r\n\r\ndeclare const window: Window;\r\n// TODO: copied from selectors in inpage project. Probably best to move selectors from inpage to core\r\nconst toolbarSelector = `.sc-menu[toolbar],.sc-menu[data-toolbar],[sxc-toolbar]`;\r\nconst sxcDivsSelector = 'div[data-edit-context]';\r\n\r\n/**\r\n * returns a 2sxc-instance of the id or html-tag passed in\r\n * @param id\r\n * @param cbid\r\n * @returns {}\r\n */\r\nfunction FindSxcInstance(id: number | ContextIdentifier | HTMLElement | SxcInstanceWithInternals, cbid?: number): SxcInstanceWithInternals {\r\n    const $2sxc = window.$2sxc as SxcRootExt & SxcRootInternals;\r\n    $2sxc.log.add('FindSxcInstance(' + id + ',' + cbid);\r\n    if (!$2sxc._controllers)\r\n        throw new Error('$2sxc not initialized yet');\r\n\r\n    // Test if it already is such an instance, in which case we just preserve it and return it\r\n    // Used in cases where the $2sxc(something) is just used to ensure it really is this\r\n    if (SxcInstanceInternal.is(id)) return id;\r\n\r\n    // check if it's a context identifier\r\n    let ctxId: ContextIdentifier = null;\r\n    if (isContextIdentifier(id)) {\r\n        id = ensureCompleteOrThrow(id);\r\n        ctxId = id;\r\n        // create a fake id, based on zone and app because this is used to identify the object in the cache\r\n        id = id.zoneId * 100000 + id.appId;\r\n    } else if (id instanceof HTMLElement && id.matches(toolbarSelector) && !id.closest(sxcDivsSelector)) {\r\n        // for toolbars that are not inside 2sxc modules (e.g. in skin)\r\n        const contextAttribute = id.getAttribute('sxc-context');\r\n        const sxcContext: Record<string, any> = JSON.parse(contextAttribute);\r\n        ctxId = {\r\n            zoneId: sxcContext.zoneId,\r\n            appId: sxcContext.appId,\r\n        };\r\n        return FindSxcInstance(ctxId);\r\n    } else if (typeof id === 'object') {\r\n        // if it's a dom-element, use auto-find\r\n        const idTuple = autoFind(id);\r\n        id = idTuple[0];\r\n        cbid = idTuple[1];\r\n    }\r\n\r\n    // if content-block is unknown, use id of module, and create an ID in the cache\r\n    if (!cbid) cbid = id;\r\n    const cacheKey = id + ':' + cbid;\r\n\r\n    // either get the cached controller from previous calls, or create a new one\r\n    if ($2sxc._controllers[cacheKey]) {\r\n        $2sxc.log.add('Cache found for: ' + cacheKey);\r\n        return $2sxc._controllers[cacheKey];\r\n    }\r\n\r\n    // not found, so also init the data-cache in case it's ever needed\r\n    if (!$2sxc._data[cacheKey]) $2sxc._data[cacheKey] = {};\r\n\r\n    return ($2sxc._controllers[cacheKey]\r\n        = new SxcInstanceWithInternals(id, cbid, cacheKey, $2sxc, ctxId));\r\n}\r\n\r\n/**\r\n * Build a SXC Controller for the page. Should only ever be executed once\r\n * @internal\r\n */\r\nexport function buildSxcRoot(): SxcRootExt & SxcRootInternals {\r\n    const rootApiV2 = getRootPartsV2();\r\n\r\n    const urlManager = new UrlParamManager();\r\n    const debug = new Debug();\r\n    //  {\r\n    //     load: (urlManager.get('debug') === 'true'),\r\n    //     uncache: urlManager.get('sxcver'),\r\n    // };\r\n    const stats = new Stats();\r\n\r\n\r\n    const addOn: Partial<SxcRootExt & SxcRootInternals> = {\r\n        _controllers: {} as any,\r\n        beta: {},\r\n        _data: {},\r\n        // this creates a full-screen iframe-popup and provides a close-command to finish the dialog as needed\r\n        totalPopup: new TotalPopup(),\r\n        urlParams: urlManager,\r\n        // note: I would like to remove this from $2sxc, but it's currently\r\n        // used both in the inpage-edit and in the dialogs\r\n        // debug state which is needed in various places\r\n        debug,\r\n        stats: stats,\r\n        insights: (partName: string, index?: number, start?: number, length?: number) => Insights.show(partName, index, start, length),\r\n        _insights: Insights,\r\n        // mini-helpers to manage 2sxc parts, a bit like a dependency loader\r\n        // which will optimize to load min/max depending on debug state\r\n        parts: {\r\n            getUrl(url: string, preventUnmin: boolean) {\r\n                // let r = url;// (preventUnmin || !debug.load) ? url : url.replace('.min', ''); // use min or not\r\n                if (debug.uncache && url.indexOf('sxcver') === -1)\r\n                    return url + ((url.indexOf('?') === -1) ? '?' : '&') + 'sxcver=' + debug.uncache;\r\n                return url;\r\n            },\r\n        },\r\n        // debugger;\r\n        jq: function () { return window.$; },\r\n    };\r\n\r\n    const merged = Object.assign(FindSxcInstance, addOn, rootApiV2) as SxcRootExt & SxcRootInternals;\r\n    merged.log.add('sxc controller built');\r\n\r\n    console.log(`$2sxc ${SxcVersion} with insights-logging - see https://r.2sxc.org/insights`)\r\n\r\n    return merged;\r\n}\r\n\r\n\r\nfunction autoFind(domElement: HTMLElement): [number, number] {\r\n    const containerTag = domElement.closest('.sc-content-block');\r\n    if (!containerTag) return null;\r\n    const iid = containerTag.getAttribute('data-cb-instance');\r\n    const cbid = containerTag.getAttribute('data-cb-id');\r\n    if (!iid || !cbid) return null;\r\n    return [parseInt(iid, 10), parseInt(cbid, 10)];\r\n}\r\n","import { SxcRoot } from '..';\r\nimport { SxcInstanceWithInternals } from '../sxc-instance/sxc-instance-with-internals';\r\nimport { Environment } from '../environment';\r\nimport { SxcHttp } from '../http/sxc-http';\r\nimport { Log, SxcVersion } from '../../../core';\r\n\r\n/**\r\n * This is the interface for the main $2sxc object on the window\r\n * This definition only extends the public interface\r\n * @internal\r\n */\r\nexport interface SxcRootExt extends SxcRoot {\r\n    /**\r\n     * Get's an SxcInstance\r\n     * @param id number | HTMLElement\r\n     * @param cbid number\r\n     * @returns SxcInstance\r\n     */\r\n    // 2021-10-04 spm assume this function doesn't use jquery\r\n    (id: number | HTMLElement, cbid?: number): SxcInstanceWithInternals,\r\n\r\n    /**\r\n     * Http helper for API calls and such\r\n     */\r\n    http: SxcHttp;\r\n\r\n}\r\n\r\n/** @internal */\r\nexport function getRootPartsV2(): Partial<SxcRootExt> {\r\n    const log = new Log('$2sxc', null, 'building');\r\n    var env = new Environment();\r\n    return {\r\n        sysinfo: {\r\n            version: SxcVersion,\r\n            description: 'The 2sxc Controller - read more about it on docs.2sxc.org',\r\n        },\r\n        env: env,\r\n        http: new SxcHttp(env),\r\n        log: log,\r\n    };\r\n}\r\n","/**\r\n * ContextIdentifier is used to initialize a Sxc object outside of the default context.\r\n * @internal\r\n */\r\nexport class ContextIdentifier {\r\n  /** ZoneId of this Context */\r\n  zoneId: number;\r\n  /** AppId of this Context */\r\n  appId: number;\r\n  /** PageId of this Context (optional) */\r\n  pageId?: number;\r\n  /** ModuleId of this Context (optional) */\r\n  moduleId?: number;\r\n  /** Exclude pageId and moduleId headers in web requests */\r\n  _ignoreHeaders?: boolean;\r\n\r\n  /** Marks the context as complete, so it won't merge in anything else \r\n   * WIP #CustomContext ATM for the updated edit-ui\r\n   */\r\n  complete?: boolean;\r\n\r\n  /** WIP #CustomContext not really used yet */\r\n  blockId?: number;\r\n}\r\n\r\n/** @internal */\r\nexport function isContextIdentifier(original: unknown): original is ContextIdentifier {\r\n  const origAsContextId = original as ContextIdentifier;\r\n  return origAsContextId.zoneId !== undefined && origAsContextId.appId !== undefined;\r\n}\r\n\r\n/** @internal */\r\nexport function ensureCompleteOrThrow(ctx: ContextIdentifier): ContextIdentifier {\r\n  // if it's fulfills the minimum requirements\r\n  if (ctx.zoneId && ctx.appId) return ctx; \r\n\r\n  const msg = `It looks like the id given is a ContextIdentifier, but it's missing either zoneId or appId.`;\r\n  console.error(msg, ctx);\r\n  throw msg;\r\n}\r\n","// this is the 2sxc-javascript API\r\n// 2sxc will include this automatically when a user has edit-rights\r\n// a template developer will typically use this to use the data-api to read 2sxc-data from the server\r\n// read more about this in the wiki: https://github.com/2sic/2sxc/wiki/JavaScript-%242sxc\r\n\r\nimport { Window } from './_/window';\r\nimport { buildSxcRoot } from './sxc-root/sxc-root-builder';\r\n\r\ndeclare const window: Window;\r\n\r\nif (!window.$2sxc) // prevent double execution\r\n  window.$2sxc = buildSxcRoot();\r\n"],"sourceRoot":""}