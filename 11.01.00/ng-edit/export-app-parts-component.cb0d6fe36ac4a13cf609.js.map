{"version":3,"sources":["./src/app/app-administration/sub-dialogs/export-app-parts/export-app-parts.component.html","./src/app/app-administration/sub-dialogs/export-app-parts/export-app-parts.component.ts","./src/app/shared/constants/eav.constants.ts"],"names":["dialogRef","exportAppPartsService","contentTypesService","exportScope","scopes","default","value","lockScope","isExporting","ngOnInit","this","fetchScopes","fetchContentInfo","exportAppParts","contentTypeIds","selectedContentTypes","map","contentType","Id","templateIds","selectedTemplates","template","entityIds","selectedEntities","entity","concat","exportParts","changeScope","event","newScope","prompt","scopeOptions","find","option","push","name","unlockScope","stopPropagation","closeDialog","close","getScopes","subscribe","getContentInfo","contentInfo","ContentTypes","filter","_export","entities","Entities","templates","Templates","TemplatesWithoutContentTypes","ExportAppPartsComponent","eavConstants","metadata","attribute","type","target","app","zone","cmsObject","keyTypes","guid","string","number","contentTypes","permissions","query","settings","resources","pipelineDesigner","outDataSource","className","in","description","visualDesignerData","Top","Left","Width","defaultPipeline","dataSources","entityGuid","partAssemblyAndType","streamWiring","From","Out","To","In","testParameters"],"mappings":"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","file":"export-app-parts-component.cb0d6fe36ac4a13cf609.js","sourcesContent":["<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Export Content and Templates from this App</div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  This is an advanced feature to export parts of the app.\r\n  The export will create an xml file which can be imported into another site or app.\r\n  To export the entire content of the app (for example when duplicating the entire site), go to the app export.\r\n  For further help visit <a href=\"http://2sxc.org/en/help?tag=export\" target=\"_blank\">2sxc Help</a>.\r\n</p>\r\n\r\n<div class=\"edit-input\">\r\n  <mat-form-field appearance=\"standard\" color=\"accent\">\r\n    <mat-label>Scope</mat-label>\r\n    <mat-select [ngModel]=\"exportScope\" name=\"Scope\" (selectionChange)=\"changeScope($event)\" [disabled]=\"lockScope\">\r\n      <mat-option *ngFor=\"let scopeOption of scopeOptions\" [value]=\"scopeOption.value\">\r\n        {{ scopeOption.name }}\r\n      </mat-option>\r\n      <mat-option value=\"Other\">Other...</mat-option>\r\n    </mat-select>\r\n    <button mat-icon-button type=\"button\" matSuffix [matTooltip]=\"lockScope ? 'Unlock' : 'Lock'\">\r\n      <mat-icon *ngIf=\"lockScope\" (click)=\"unlockScope($event)\">lock</mat-icon>\r\n      <mat-icon *ngIf=\"!lockScope\" (click)=\"unlockScope($event)\">lock_open</mat-icon>\r\n    </button>\r\n  </mat-form-field>\r\n  <app-field-hint>\r\n    The scope should almost never be changed -\r\n    <a href=\"http://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n  </app-field-hint>\r\n</div>\r\n\r\n<div *ngIf=\"contentInfo\">\r\n  <ul class=\"content-info__list content-info__base\">\r\n    <p class=\"content-info__title\">Content Types</p>\r\n    <li class=\"content-info__item\" *ngFor=\"let contentType of contentInfo.ContentTypes\">\r\n      <div class=\"option-box\">\r\n        <mat-checkbox [(ngModel)]=\"contentType._export\">\r\n          <span class=\"option-box__text\">{{ contentType.Name }} ({{ contentType.Id }})</span>\r\n        </mat-checkbox>\r\n      </div>\r\n\r\n      <ul class=\"content-info__list\" *ngIf=\"contentType.Templates.length > 0\">\r\n        <p class=\"content-info__subtitle\">Templates</p>\r\n        <li class=\"content-info__item\" *ngFor=\"let template of contentType.Templates\">\r\n          <div class=\"option-box\">\r\n            <mat-checkbox [(ngModel)]=\"template._export\">\r\n              <span class=\"option-box__text\">{{ template.Name }} ({{ template.Id }})</span>\r\n            </mat-checkbox>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n\r\n      <ul class=\"content-info__list\" *ngIf=\"contentType.Entities.length > 0\">\r\n        <p class=\"content-info__subtitle\">Entities</p>\r\n        <li class=\"content-info__item\" *ngFor=\"let entity of contentType.Entities\">\r\n          <div class=\"option-box\">\r\n            <mat-checkbox [(ngModel)]=\"entity._export\">\r\n              <span class=\"option-box__text\">{{ entity.Title }} ({{ entity.Id }})</span>\r\n            </mat-checkbox>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ul>\r\n\r\n  <ul class=\"content-info__list content-info__base\">\r\n    <p class=\"content-info__title\">Templates Without Content Types</p>\r\n    <li class=\"content-info__item\" *ngFor=\"let template of contentInfo.TemplatesWithoutContentTypes\">\r\n      <div class=\"option-box\">\r\n        <mat-checkbox [(ngModel)]=\"template._export\">\r\n          <span class=\"option-box__text\">{{ template.Name }} ({{ template.Id }})</span>\r\n        </mat-checkbox>\r\n      </div>\r\n    </li>\r\n  </ul>\r\n\r\n  <div class=\"dialog-actions-box\">\r\n    <button mat-raised-button [disabled]=\"isExporting\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"isExporting\" (click)=\"exportAppParts()\">Export</button>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSelectChange } from '@angular/material/select';\r\n\r\nimport { ExportAppPartsService } from '../../services/export-app-parts.service';\r\nimport { ContentInfo, ContentInfoEntity, ContentInfoTemplate } from '../../models/content-info.model';\r\nimport { eavConstants, EavScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\n\r\n@Component({\r\n  selector: 'app-export-app-parts',\r\n  templateUrl: './export-app-parts.component.html',\r\n  styleUrls: ['./export-app-parts.component.scss']\r\n})\r\nexport class ExportAppPartsComponent implements OnInit {\r\n  contentInfo: ContentInfo;\r\n  exportScope = eavConstants.scopes.default.value;\r\n  scopeOptions: EavScopeOption[];\r\n  lockScope = true;\r\n  isExporting = false;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ExportAppPartsComponent>,\r\n    private exportAppPartsService: ExportAppPartsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchScopes();\r\n    this.fetchContentInfo();\r\n  }\r\n\r\n  exportAppParts() {\r\n    this.isExporting = true;\r\n    // spm TODO: maybe optimize these functions to not loop content types and entities multiple times for no reason\r\n    // spm TODO: figure out how to capture window loading to disable export button\r\n    const contentTypeIds = this.selectedContentTypes().map(contentType => contentType.Id);\r\n    const templateIds = this.selectedTemplates().map(template => template.Id);\r\n    let entityIds = this.selectedEntities().map(entity => entity.Id);\r\n    entityIds = entityIds.concat(templateIds);\r\n\r\n    this.exportAppPartsService.exportParts(contentTypeIds, entityIds, templateIds);\r\n    this.isExporting = false;\r\n  }\r\n\r\n  changeScope(event: MatSelectChange) {\r\n    let newScope: string = event.value;\r\n    if (newScope === 'Other') {\r\n      // tslint:disable-next-line:max-line-length\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.');\r\n      if (!newScope) {\r\n        newScope = eavConstants.scopes.default.value;\r\n      } else if (!this.scopeOptions.find(option => option.value === newScope)) {\r\n        const newScopeOption: EavScopeOption = {\r\n          name: newScope,\r\n          value: newScope,\r\n        };\r\n        this.scopeOptions.push(newScopeOption);\r\n      }\r\n    }\r\n    this.exportScope = newScope;\r\n    this.fetchContentInfo();\r\n  }\r\n\r\n  unlockScope(event: Event) {\r\n    event.stopPropagation();\r\n    this.lockScope = !this.lockScope;\r\n    if (this.lockScope) {\r\n      this.exportScope = eavConstants.scopes.default.value;\r\n      this.fetchContentInfo();\r\n    }\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private fetchScopes() {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions = scopes;\r\n    });\r\n  }\r\n\r\n  private fetchContentInfo() {\r\n    this.exportAppPartsService.getContentInfo(this.exportScope).subscribe(contentInfo => {\r\n      this.contentInfo = contentInfo;\r\n    });\r\n  }\r\n\r\n  private selectedContentTypes() {\r\n    return this.contentInfo.ContentTypes.filter(contentType => contentType._export);\r\n  }\r\n\r\n  private selectedEntities() {\r\n    let entities: ContentInfoEntity[] = [];\r\n    for (const contentType of this.contentInfo.ContentTypes) {\r\n      entities = entities.concat(contentType.Entities.filter(entity => entity._export));\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  private selectedTemplates() {\r\n    let templates: ContentInfoTemplate[] = [];\r\n    // The ones with...\r\n    for (const contentType of this.contentInfo.ContentTypes) {\r\n      templates = templates.concat(contentType.Templates.filter(template => template._export));\r\n    }\r\n    // ...and without content types\r\n    templates = templates.concat(this.contentInfo.TemplatesWithoutContentTypes.filter(template => template._export));\r\n    return templates;\r\n  }\r\n}\r\n","export type EavMetadataKey = 'attribute' | 'app' | 'entity' | 'contentType' | 'zone' | 'cmsObject';\r\nexport type EavKeyTypeKey = 'guid' | 'string' | 'number';\r\nexport interface EavScopeOption { name: string; value: string; }\r\n\r\nexport const eavConstants = {\r\n  metadata: {\r\n    /** metadataOfAttribute */\r\n    attribute: { type: 2, target: 'EAV Field Properties' },\r\n    /** metadataOfApp */\r\n    app: { type: 3, target: 'App' },\r\n    /** metadataOfEntity */\r\n    entity: { type: 4, target: 'Entity' },\r\n    /** metadataOfContentType */\r\n    contentType: { type: 5, target: 'ContentType' },\r\n    /** metadataOfZone */\r\n    zone: { type: 6, target: 'Zone' },\r\n    /** metadataOfCmsObject */\r\n    cmsObject: { type: 10, target: 'CmsObject' },\r\n  },\r\n\r\n  /** Loopup type for the metadata, e.g. key=80adb152-efad-4aa4-855e-74c5ef230e1f is keyType=guid */\r\n  keyTypes: {\r\n    guid: 'guid',\r\n    string: 'string',\r\n    number: 'number',\r\n  },\r\n\r\n  /** Scopes */\r\n  scopes: {\r\n    /** This is the main schema and the data you usually see is from here */\r\n    default: { name: 'Default', value: '2SexyContent' },\r\n    /** This contains content-types for configuration, settings and resources of the app */\r\n    app: { name: 'System: App', value: '2SexyContent-App' },\r\n  },\r\n\r\n  /** Content types where templates, permissions, etc. are stored */\r\n  contentTypes: {\r\n    /** Content type containing app templates (views) */\r\n    template: '2SexyContent-Template',\r\n    /** Content type containing permissions */\r\n    permissions: 'PermissionConfiguration',\r\n    /** Content type containing queries */\r\n    query: 'DataPipeline',\r\n    /** Content type containing content type metadata (app administration > data > metadata) */\r\n    contentType: 'ContentType',\r\n    /** Content type containing app settings */\r\n    settings: 'App-Settings',\r\n    /** Content type containing app resources */\r\n    resources: 'App-Resources',\r\n  },\r\n\r\n  pipelineDesigner: {\r\n    outDataSource: {\r\n      className: 'SexyContentTemplate',\r\n      in: ['ListContent', 'Default'],\r\n      name: '2sxc Target (View or API)',\r\n      description: 'The template/script which will show this data',\r\n      visualDesignerData: { Top: 20, Left: 200, Width: 700 }\r\n    },\r\n    defaultPipeline: {\r\n      dataSources: [\r\n        {\r\n          entityGuid: 'unsaved1',\r\n          partAssemblyAndType: 'ToSic.Eav.DataSources.Caches.ICache, ToSic.Eav.DataSources',\r\n          visualDesignerData: { Top: 440, Left: 440 }\r\n        }, {\r\n          entityGuid: 'unsaved2',\r\n          partAssemblyAndType: 'ToSic.Eav.DataSources.PublishingFilter, ToSic.Eav.DataSources',\r\n          visualDesignerData: { Top: 300, Left: 440 }\r\n        }, {\r\n          entityGuid: 'unsaved3',\r\n          partAssemblyAndType: 'ToSic.SexyContent.DataSources.ModuleDataSource, ToSic.SexyContent',\r\n          visualDesignerData: { Top: 170, Left: 440 }\r\n        }\r\n      ],\r\n      streamWiring: [\r\n        { From: 'unsaved1', Out: 'Default', To: 'unsaved2', In: 'Default' },\r\n        { From: 'unsaved1', Out: 'Drafts', To: 'unsaved2', In: 'Drafts' },\r\n        { From: 'unsaved1', Out: 'Published', To: 'unsaved2', In: 'Published' },\r\n        { From: 'unsaved2', Out: 'Default', To: 'unsaved3', In: 'Default' },\r\n        { From: 'unsaved3', Out: 'ListContent', To: 'Out', In: 'ListContent' },\r\n        { From: 'unsaved3', Out: 'Default', To: 'Out', In: 'Default' }\r\n      ]\r\n    },\r\n    testParameters: '[Demo:Demo]=true',\r\n  },\r\n};\r\n"],"sourceRoot":"webpack:///"}