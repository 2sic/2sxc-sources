{"version":3,"file":"default-projects_eav-ui_src_app_shared_services_service-base_ts-node_modules_angular_material-ffa7b3.6036fd4d505616df.js","mappings":"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","names":["ServiceBase","constructor","this","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","factory","ɵfac","delayWhen","delayDurationSelector","subscriptionDelay","source","concat","pipe","take","ignoreElements","operate","subscriber","subscribe","createOperatorSubscriber","noop","mergeMap","value","index","innerFrom","mapTo","delay","due","scheduler","asyncScheduler","duration","timer","_c0","_c1","_c2","MatMenuItem_Conditional_4_Template","rf","ctx","i0","_c3","MatMenu_ng_template_0_Template","_r1","ctx_r1","closed","emit","$event","_onAnimationStart","_onAnimationDone","_classList","panelId","_panelAnimationState","ariaLabel","ariaLabelledby","ariaDescribedby","MAT_MENU_PANEL","InjectionToken","MatMenuItem","_elementRef","inject","ElementRef","_document","DOCUMENT","_focusMonitor","FocusMonitor","_parentMenu","optional","_changeDetectorRef","ChangeDetectorRef","role","disabled","disableRipple","_hovered","Subject","_focused","_highlighted","_triggersSubmenu","_CdkPrivateStyleLoader","load","_StructuralStylesLoader","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","stopMonitoring","removeItem","complete","_getTabIndex","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","static","__ngFactoryType__","type","selectors","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","exportAs","features","attrs","ngContentSelectors","decls","vars","consts","template","dependencies","MatRipple","encapsulation","changeDetection","MAT_MENU_CONTENT","MatMenuContent","_template","TemplateRef","_appRef","ApplicationRef","_injector","Injector","_viewContainerRef","ViewContainerRef","_portal","_outlet","_attached","attach","context","TemplatePortal","detach","DomPortalOutlet","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","provide","useExisting","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","animate","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","providedIn","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MatMenu","_keyManager","_xPosition","_yPosition","_firstItemFocusRef","_allItems","_directDescendantItems","QueryList","_animationDone","_isAnimating","parentMenu","direction","overlayPanelClass","setPositionClasses","templateRef","items","lazyContent","hasBackdrop","panelClass","classes","previousPanelClass","_previousPanelClass","newClassList","split","forEach","className","classList","EventEmitter","close","_IdGenerator","getId","defaultOptions","ngOnInit","ngAfterContentInit","_updateDirectDescendants","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","changes","startWith","switchMap","merge","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","_item","_handleKeydown","keyCode","ESCAPE","hasModifierKey","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","afterNextRender","menuPanel","first","closest","contains","document","setFirstItemActive","injector","resetActiveItem","setElevation","_depth","posX","posY","_startAnimation","_resetAnimation","toState","scrollTop","reset","filter","notifyOnChanges","contentQueries","dirIndex","_t","viewQuery","outputs","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","overlay","Overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_overlay","_element","_menuItemInstance","self","_dir","Directionality","_ngZone","NgZone","_scrollStrategy","_overlayRef","_menuOpen","_closingActionsSubscription","EMPTY","_hoverSubscription","_menuCloseSubscription","_parentMaterialMenu","_parentInnerPadding","_handleTouchStart","isFakeTouchstartFromScreenReader","_openedBy","undefined","_deprecatedMatMenuTriggerFor","menu","v","_menu","reason","_destroyMenu","menuData","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","addEventListener","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","_menuClosingActions","_initMenu","takeUntil","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","scrollStrategy","positionChanges","change","run","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","of","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","ENTER","SPACE","_handleClick","asapScheduler","MatMenuModule","providers","imports","MatRippleModule","MatCommonModule","OverlayModule","CdkScrollableModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js","./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js","./node_modules/rxjs/dist/esm/internal/operators/delay.js","./node_modules/@angular/material/fesm2022/menu.mjs"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    }\n    return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, noop));\n    });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler = asyncScheduler) {\n    const duration = timer(due, scheduler);\n    return delayWhen(() => duration);\n}\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, ChangeDetectorRef, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, TemplateRef, ApplicationRef, Injector, ViewContainerRef, Directive, QueryList, EventEmitter, afterNextRender, ContentChildren, ViewChild, ContentChild, Output, NgZone, NgModule } from '@angular/core';\nimport { FocusMonitor, _IdGenerator, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, takeUntil, filter, take, delay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { _StructuralStylesLoader, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem {\n    _elementRef = inject(ElementRef);\n    _document = inject(DOCUMENT);\n    _focusMonitor = inject(FocusMonitor);\n    _parentMenu = inject(MAT_MENU_PANEL, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    /** ARIA role for the menu item. */\n    role = 'menuitem';\n    /** Whether the menu item is disabled. */\n    disabled = false;\n    /** Whether ripples are disabled on the menu item. */\n    disableRipple = false;\n    /** Stream that emits when the menu item is hovered. */\n    _hovered = new Subject();\n    /** Stream that emits when the menu item is focused. */\n    _focused = new Subject();\n    /** Whether the menu item is highlighted. */\n    _highlighted = false;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu = false;\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        this._parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuItem, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: MatMenuItem, isStandalone: true, selector: \"[mat-menu-item]\", inputs: { role: \"role\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute] }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-focus-indicator\" }, exportAs: [\"matMenuItem\"], ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\", dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [MatRipple], template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { role: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent {\n    _template = inject(TemplateRef);\n    _appRef = inject(ApplicationRef);\n    _injector = inject(Injector);\n    _viewContainerRef = inject(ViewContainerRef);\n    _document = inject(DOCUMENT);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _portal;\n    _outlet;\n    /** Emits when the menu content has been attached. */\n    _attached = new Subject();\n    constructor() { }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), null, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        this._changeDetectorRef.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatMenuContent, isStandalone: true, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nclass MatMenu {\n    _elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _keyManager;\n    _xPosition;\n    _yPosition;\n    _firstItemFocusRef;\n    /** All items inside the menu. Includes items nested inside another menu. */\n    _allItems;\n    /** Only the direct descendant menu items. */\n    _directDescendantItems = new QueryList();\n    /** Classes to be applied to the menu panel. */\n    _classList = {};\n    /** Current state of the panel animation. */\n    _panelAnimationState = 'void';\n    /** Emits whenever an animation on the menu completes. */\n    _animationDone = new Subject();\n    /** Whether the menu is animating. */\n    _isAnimating;\n    /** Parent menu of the current menu panel. */\n    parentMenu;\n    /** Layout direction of the menu. */\n    direction;\n    /** Class or list of classes to be added to the overlay panel. */\n    overlayPanelClass;\n    /** Class to be added to the backdrop element. */\n    backdropClass;\n    /** aria-label for the menu panel. */\n    ariaLabel;\n    /** aria-labelledby for the menu panel. */\n    ariaLabelledby;\n    /** aria-describedby for the menu panel. */\n    ariaDescribedby;\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** @docs-private */\n    templateRef;\n    /**\n     * List of the items inside of a menu.\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    items;\n    /**\n     * Menu content that will be rendered lazily.\n     * @docs-private\n     */\n    lazyContent;\n    /** Whether the menu should overlap its trigger. */\n    overlapTrigger;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        const newClassList = { ...this._classList };\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                newClassList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                newClassList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n        this._classList = newClassList;\n    }\n    _previousPanelClass;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    /** Event emitted when the menu is closed. */\n    closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n    close = this.closed;\n    panelId = inject(_IdGenerator).getId('mat-menu-panel-');\n    _injector = inject(Injector);\n    constructor() {\n        const defaultOptions = inject(MAT_MENU_DEFAULT_OPTIONS);\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this.overlapTrigger = defaultOptions.overlapTrigger;\n        this.hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusRef?.destroy();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `afterNextRender` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusRef?.destroy();\n        this._firstItemFocusRef = afterNextRender(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        }, { injector: this._injector });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * @deprecated No longer used and will be removed.\n     * @breaking-change 21.0.0\n     */\n    setElevation(_depth) { }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        this._classList = {\n            ...this._classList,\n            ['mat-menu-before']: posX === 'before',\n            ['mat-menu-after']: posX === 'after',\n            ['mat-menu-above']: posY === 'above',\n            ['mat-menu-below']: posY === 'below',\n        };\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenu, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatMenu, isStandalone: true, selector: \"mat-menu\", inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: [\"overlapTrigger\", \"overlapTrigger\", booleanAttribute], hasBackdrop: [\"hasBackdrop\", \"hasBackdrop\", (value) => (value == null ? null : booleanAttribute(value))], panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], exportAs: [\"matMenu\"], ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-sys-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-sys-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-sys-surface-container));box-shadow:var(--mat-menu-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}@media(forced-colors: active){.mat-mdc-menu-panel{outline:solid 1px}}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-sys-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing, 8px);margin-top:var(--mat-menu-divider-top-spacing, 8px)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px;padding-left:var(--mat-menu-item-leading-spacing, 12px);padding-right:var(--mat-menu-item-trailing-spacing, 12px);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-menu-item::-moz-focus-inner{border:0}[dir=rtl] .mat-mdc-menu-item{padding-left:var(--mat-menu-item-trailing-spacing, 12px);padding-right:var(--mat-menu-item-leading-spacing, 12px)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-trailing-spacing, 12px)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-trailing-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-leading-spacing, 12px)}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-sys-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing, 12px);height:var(--mat-menu-item-icon-size, 24px);width:var(--mat-menu-item-icon-size, 24px)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing, 12px)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(forced-colors: active){.mat-mdc-menu-item{margin-top:1px}}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size, 24px);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing, 12px)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing, 12px);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}@media(forced-colors: active){.mat-mdc-menu-submenu-icon{fill:CanvasText}}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-sys-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-sys-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-sys-surface-container));box-shadow:var(--mat-menu-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}@media(forced-colors: active){.mat-mdc-menu-panel{outline:solid 1px}}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-sys-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing, 8px);margin-top:var(--mat-menu-divider-top-spacing, 8px)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px;padding-left:var(--mat-menu-item-leading-spacing, 12px);padding-right:var(--mat-menu-item-trailing-spacing, 12px);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-menu-item::-moz-focus-inner{border:0}[dir=rtl] .mat-mdc-menu-item{padding-left:var(--mat-menu-item-trailing-spacing, 12px);padding-right:var(--mat-menu-item-leading-spacing, 12px)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-trailing-spacing, 12px)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-trailing-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-leading-spacing, 12px)}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-sys-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing, 12px);height:var(--mat-menu-item-icon-size, 24px);width:var(--mat-menu-item-icon-size, 24px)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing, 12px)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(forced-colors: active){.mat-mdc-menu-item{margin-top:1px}}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size, 24px);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing, 12px)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing, 12px);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}@media(forced-colors: active){.mat-mdc-menu-submenu-icon{fill:CanvasText}}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ transform: (value) => (value == null ? null : booleanAttribute(value)) }]\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    _overlay = inject(Overlay);\n    _element = inject(ElementRef);\n    _viewContainerRef = inject(ViewContainerRef);\n    _menuItemInstance = inject(MatMenuItem, { optional: true, self: true });\n    _dir = inject(Directionality, { optional: true });\n    _focusMonitor = inject(FocusMonitor);\n    _ngZone = inject(NgZone);\n    _scrollStrategy = inject(MAT_MENU_SCROLL_STRATEGY);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _portal;\n    _overlayRef = null;\n    _menuOpen = false;\n    _closingActionsSubscription = Subscription.EMPTY;\n    _hoverSubscription = Subscription.EMPTY;\n    _menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * We're specifically looking for a `MatMenu` here since the generic `MatMenuPanel`\n     * interface lacks some functionality around nested menus and animations.\n     */\n    _parentMaterialMenu;\n    /**\n     * Cached value of the padding of the parent menu panel.\n     * Used to offset sub-menus to compensate for the padding.\n     */\n    _parentInnerPadding;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    _handleTouchStart = (event) => {\n        if (!isFakeTouchstartFromScreenReader(event)) {\n            this._openedBy = 'touch';\n        }\n    };\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n    _openedBy = undefined;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    _menu;\n    /** Data to be passed along to any lazily-rendered content. */\n    menuData;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n    restoreFocus = true;\n    /** Event emitted when the associated menu is opened. */\n    menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    onMenuOpen = this.menuOpened;\n    /** Event emitted when the associated menu is closed. */\n    menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    onMenuClose = this.menuClosed;\n    constructor() {\n        const parentMenu = inject(MAT_MENU_PANEL, { optional: true });\n        this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n        this._element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof MatMenu) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            this._overlayRef.keydownEvents().subscribe(event => {\n                if (this.menu instanceof MatMenu) {\n                    this.menu._handleKeydown(event);\n                }\n            });\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir || 'ltr',\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                this._ngZone.run(() => {\n                    const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                    const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                    menu.setPositionClasses(posX, posY);\n                });\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatMenuTrigger, isStandalone: true, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" }, classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }], ctorParameters: () => [], propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n\nclass MatMenuModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuModule, imports: [MatRippleModule,\n            MatCommonModule,\n            OverlayModule,\n            MatMenu,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatRippleModule,\n            MatCommonModule,\n            OverlayModule, CdkScrollableModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatRippleModule,\n                        MatCommonModule,\n                        OverlayModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, fadeInItems, matMenuAnimations, transformMenu };\n"],"x_google_ignoreList":[1,2,3,4]}