{"version":3,"file":"projects_eav-ui_src_app_replace-content_replace-content_component_ts-node_modules_rxjs_dist_e-178ebb.f107f71dda1ecb72.js","mappings":"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","names":["convert","obj","fn","getWith","i0","option_r2","label","ReplaceContentComponent","#contentGroupSvc","#dialogRoutes","constructor","dialog","snackBar","this","hostClass","transient","ContentGroupService","DialogRoutingService","#params","getParams","p","guid","part","index","parseInt","isAddMode","signalObj","getQueryParam","filterText","model","#optionsRaw","options","computedObj","filter","toLocaleLowerCase","o","includes","hasSelection","map","#contentTypeName","ngOnInit","#fetchConfig","doOnDialogClosed","editResult","router","getCurrentNavigation","extras","state","cloneId","Object","keys","closeDialog","close","select","event","set","option","value","copySelected","contentGroup","#buildContentGroup","form","items","EditPrep","copy","id","formUrl","convertFormToUrl","navRelative","save","open","saveItem","subscribe","duration","isRefresh","getItems","replaceConfig","entries","Items","itemId","itemName","add","newId","SelectedId","newFilter","find","ContentTypeName","i1","i2","selectors","hostVars","hostBindings","rf","ctx","$event","_r1","ReplaceContentComponent_mat_option_16_Template","auto_r3","length","RouterOutlet","MatFormFieldModule","i3","MatInputModule","i4","MatAutocompleteModule","i5","i6","FormsModule","i7","CdkVirtualScrollViewport","CdkFixedSizeVirtualScroll","CdkVirtualForOf","MatOptionModule","MatButtonModule","i8","MatIconModule","i9","MatDialogActions","styles","logSpecs","ServiceBase","route","super","log","classLog","snapshot","url","getParam","key","paramMap","get","reduce","acc","queryParamMap","getQueryParams","callback","l","fnIf","subscriptions","childDialogClosed$","end","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","events","pipe","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","factory","Éµfac","Subscription","ngOnDestroy","destroy","unsubscribe","delayWhen","delayDurationSelector","subscriptionDelay","source","concat","take","ignoreElements","operate","subscriber","createOperatorSubscriber","noop","mergeMap","innerFrom","mapTo","delay","due","scheduler","asyncScheduler","timer"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/core/object-utilities.ts","./projects/eav-ui/src/app/replace-content/replace-content.component.html","./projects/eav-ui/src/app/replace-content/replace-content.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js","./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js","./node_modules/rxjs/dist/esm/internal/operators/delay.js"],"sourcesContent":["\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ isAddMode() ? 'Add Existing Item' : 'Replace Content Item' }}</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <router-outlet></router-outlet>\r\n    <p>{{isAddMode()\r\n      ? 'Select a content-item to add to this list.'\r\n      : 'By replacing a content-item you can make other content appear in the slot of the original content.'}}\r\n    </p>\r\n    <div class=\"eav-options-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Choose item</mat-label>\r\n        <!-- Search field -->\r\n        <input matInput [matAutocomplete]=\"auto\" [(ngModel)]=\"filterText\"> \r\n        <!-- Auto-Complete list based on search -->\r\n        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"select($event)\"\r\n          [hideSingleSelectionIndicator]=\"true\">\r\n          <cdk-virtual-scroll-viewport itemSize=\"48\" minBufferPx=\"500\" maxBufferPx=\"1000\"\r\n            [style.height.px]=\"options().length < 6 ? options().length * 48 : 240\"\r\n          >\r\n            <mat-option *cdkVirtualFor=\"let option of options()\" [value]=\"option.label\">{{ option.label }}</mat-option>\r\n          </cdk-virtual-scroll-viewport>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n      <!-- Copy Button -->\r\n      <button mat-icon-button tippy=\"Copy\" [disabled]=\"!hasSelection()\" (click)=\"copySelected()\">\r\n        <mat-icon>file_copy</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <!-- Close / Save -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!hasSelection()\" (click)=\"save()\">Save</button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { Component, HostBinding, model, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { convert, transient } from '../../../../core';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { computedObj, signalObj } from '../shared/signals/signal.utilities';\r\n\r\n@Component({\r\n    selector: 'app-replace-content',\r\n    templateUrl: './replace-content.component.html',\r\n    styleUrls: ['./replace-content.component.scss'],\r\n    imports: [\r\n        RouterOutlet,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatAutocompleteModule,\r\n        FormsModule,\r\n        CdkVirtualScrollViewport,\r\n        CdkFixedSizeVirtualScroll,\r\n        CdkVirtualForOf,\r\n        MatOptionModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogActions,\r\n    ]\r\n})\r\nexport class ReplaceContentComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  #contentGroupSvc = transient(ContentGroupService);\r\n  #dialogRoutes = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ReplaceContentComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  #params = convert(this.#dialogRoutes.getParams(['guid', 'part', 'index']), p => ({\r\n    guid: p.guid,\r\n    part: p.part,\r\n    index: parseInt(p.index, 10),\r\n  }));\r\n\r\n  #contentTypeName: string;\r\n  \r\n  /** Mode is adding the to-be-selected item, not replace */\r\n  protected isAddMode = signalObj('isAddMode', !!this.#dialogRoutes.getQueryParam('add'));\r\n\r\n  /** The text being searched for */\r\n  filterText = model<string>('');\r\n\r\n  /** The options which could be used */\r\n  #optionsRaw = signalObj<ReplaceOption[]>('options', []);\r\n\r\n  /** The options after filtering */\r\n  options = computedObj<ReplaceOption[]>('filteredOptions', () => {\r\n    const filter = this.filterText().toLocaleLowerCase();\r\n    return this.#optionsRaw()\r\n      .filter(o => o.label.toLocaleLowerCase().includes(filter));\r\n  });\r\n\r\n  /** The system has a selected item, when the text exactly matches the label of an option */\r\n  hasSelection = computedObj<boolean>('isMatch', () => this.options().map(o => o.label).includes(this.filterText()));\r\n\r\n  ngOnInit() {\r\n    this.#fetchConfig(false, null);\r\n\r\n    this.#dialogRoutes.doOnDialogClosed(() => {\r\n      const navigation = this.#dialogRoutes.router.getCurrentNavigation();\r\n      const editResult = navigation.extras?.state;\r\n      const cloneId: number = editResult?.[Object.keys(editResult)[0]];\r\n      this.#fetchConfig(true, cloneId);\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  select(event: MatAutocompleteSelectedEvent) {\r\n    this.filterText.set(event.option.value);\r\n  }\r\n\r\n  copySelected() {\r\n    const contentGroup = this.#buildContentGroup();\r\n    const form: EditForm = {\r\n      items: [EditPrep.copy(this.#contentTypeName, contentGroup.id)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    const contentGroup = this.#buildContentGroup();\r\n    this.#contentGroupSvc.saveItem(contentGroup).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  #fetchConfig(isRefresh: boolean, cloneId: number) {\r\n    const contentGroup = this.#buildContentGroup();\r\n    this.#contentGroupSvc.getItems(contentGroup).subscribe(replaceConfig => {\r\n      const options = Object.entries(replaceConfig.Items)\r\n        .map(([itemId, itemName]) => ({\r\n          id: parseInt(itemId, 10),\r\n          label: `${itemName} (${itemId})`,\r\n        } satisfies ReplaceOption));\r\n      this.#optionsRaw.set(options);\r\n\r\n      // don't set selected option if dialog should be in add-mode and don't change selected option on refresh unless it's cloneId\r\n      if ((!contentGroup.add && !isRefresh) || cloneId != null) {\r\n        const newId = !isRefresh ? replaceConfig.SelectedId : cloneId;\r\n        const newFilter = this.#optionsRaw().find(o => o.id === newId)?.label || '';\r\n        this.filterText.set(newFilter);\r\n      }\r\n      this.#contentTypeName = replaceConfig.ContentTypeName;\r\n    });\r\n  }\r\n\r\n  #buildContentGroup() {\r\n    const filter = this.filterText();\r\n    const id = this.#optionsRaw().find(o => o.label === filter)?.id ?? null;\r\n\r\n    const contentGroup: ContentGroupAdd = {\r\n      id,\r\n      ...this.#params,\r\n      add: this.isAddMode(),\r\n    };\r\n    return contentGroup;\r\n  }\r\n}\r\n\r\n\r\ninterface ReplaceOption {\r\n  id: number;\r\n  label: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    }\n    return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, noop));\n    });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler = asyncScheduler) {\n    const duration = timer(due, scheduler);\n    return delayWhen(() => duration);\n}\n"],"x_google_ignoreList":[5,6,7]}