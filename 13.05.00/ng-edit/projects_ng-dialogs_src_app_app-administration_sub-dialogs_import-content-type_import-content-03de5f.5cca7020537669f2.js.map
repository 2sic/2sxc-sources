{"version":3,"mappings":"0YAOEA,gDAMIA,eAA+BA,gCAAoBA,kCAEjDA,eAA2CA,SAAeA,kCAAfA,iDAD7CA,SACEA,wBACFA,mCADwBA,+DAO1BA,kBACEA,oFACFA,+BACAA,kBACEA,6EACFA,yIACAA,kBAKEA,SACFA,kCAN4EA,kFAK1EA,yDAZJA,kBACEA,wBAGAA,wBAGAA,wBAOFA,mCAbQA,8CAGAA,+CAGmBA,2FAUzBA,SACEA,qBAA0BA,kDAASC,gBAAeD,kBAAMA,QACxDA,qBACEA,kDAASE,sBACTF,oBACFA,QACFA,qCAJ2CA,oHAK3CA,SACEA,qBAAyCA,kDAASG,gBAAeH,iBAAKA,QACxEA,iDA/CJA,iBAAgDA,yDAAgBI,kBAG9DJ,iBAAsB,WACUA,gCAAoBA,UAGpDA,+BAEAA,eAA8BA,qFAAyEA,QAEvGA,eAAK,cAC+EA,mDAASK,UACzFL,uBACAA,iCAGFA,QACAA,sBAAuCA,mDAAUM,iBAAjDN,UAGFA,yBAgBAA,mBACEA,iCAOAA,iCAGFA,iCAhDkBA,iCAOJA,qCAKwCA,yCAC5CA,sCACSA,qCAO4DA,sCAiB9DA,uEAOAA,yEC9BZ,IAAMO,EAAb,MAAM,QAUJC,YACmCC,EACzBC,EACAC,EACAC,GAHyBC,kBACzBA,iBACAA,2BACAA,gBAbgBA,eAAY,mBAE9BA,kBAAe,IAAIC,KAAgB,GACnCD,kBAAe,IAAIC,IAAwB,MAC3CD,mBAAgB,IAAIC,IAAiC,MAC7DD,sBAAgBE,KAAc,CAACF,KAAKG,aAAcH,KAAKI,aAAcJ,KAAKK,gBAAgBC,QACxFC,KAAI,EAAEC,EAAaC,EAAaC,MAAmB,CAAEF,cAAaC,cAAaC,mBAUjFC,WAC+B,MAAzBX,KAAKJ,WAAWgB,QAClBZ,KAAKI,aAAaS,KAAKb,KAAKJ,WAAWgB,OACvCZ,KAAKc,qBAITC,cACEf,KAAKG,aAAaa,WAClBhB,KAAKI,aAAaY,WAClBhB,KAAKK,cAAcW,WAGrBC,cACEjB,KAAKH,UAAUqB,QAGjBC,aAAaP,GACXZ,KAAKI,aAAaS,KAAKD,GACvBZ,KAAKK,cAAcQ,KAAK,MACxBb,KAAKc,oBAGPM,YAAYC,GACV,MAAMC,EAAYD,EAAME,OAA4BX,MAC9CA,EAAQU,EAASE,OAAS,EAAIC,MAAMC,KAAKJ,GAAY,KAC3DtB,KAAKI,aAAaS,KAAKD,GACvBZ,KAAKK,cAAcQ,KAAK,MAG1BC,oBACEd,KAAKG,aAAaU,MAAK,GACvBb,KAAKF,oBAAoB6B,OAAO3B,KAAKI,aAAawB,OAAOC,UAAU,CACjEhB,KAAMiB,IACJ9B,KAAKG,aAAaU,MAAK,GACvBb,KAAKK,cAAcQ,KAAKiB,IAE1BC,MAAQA,IACN/B,KAAKG,aAAaU,MAAK,GACvBb,KAAKK,cAAcQ,KAAK,MACxBb,KAAKD,SAASiC,KAAK,2DAA4D,KAAM,CAAEC,SAAU,uDAzD5FvC,GAA0BP,MAW3B+C,MAAe/C,6DAXdO,EAA0ByC,ovCDfvChD,+CACGA,8KCcUO,GAAb","names":["i0","ctx_r17","ctx_r19","ctx_r21","ctx_r23","_r5","ctx_r26","ImportContentTypeComponent","constructor","dialogData","dialogRef","contentTypesService","snackBar","this","BehaviorSubject","combineLatest","isImporting$","importFiles$","importResult$","pipe","map","isImporting","importFiles","importResult","ngOnInit","files","next","importContentType","ngOnDestroy","complete","closeDialog","close","filesDropped","filesChange","event","fileList","target","length","Array","from","import","value","subscribe","result","error","open","duration","MAT_DIALOG_DATA","selectors"],"sources":["./projects/ng-dialogs/src/app/app-administration/sub-dialogs/import-content-type/import-content-type.component.html","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/import-content-type/import-content-type.component.ts"],"sourcesContent":["<div appDragAndDrop [allowedFileTypes]=\"'json'\" (filesDropped)=\"filesDropped($event)\"\r\n  *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Import Content Types</div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.isImporting\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\">Select Content Type definition files (json) from your computer to import.</p>\r\n\r\n  <div>\r\n    <button mat-raised-button tippy=\"Open file browser\" [disabled]=\"data.isImporting\" (click)=\"fileInput.click()\">\r\n      <div *ngIf=\"!data.importFiles\">Select or drop files</div>\r\n      <ng-container *ngIf=\"data.importFiles\">\r\n        <div *ngFor=\"let file of data.importFiles\">{{ file.name }}</div>\r\n      </ng-container>\r\n    </button>\r\n    <input #fileInput type=\"file\" multiple (change)=\"filesChange($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light import-result-box\" *ngIf=\"data.importResult\">\r\n    <div *ngIf=\"data.importResult.Success\" class=\"sxc-message sxc-message-info\">\r\n      The import has been done. See the messages below for more information.\r\n    </div>\r\n    <div *ngIf=\"!data.importResult.Success\" class=\"sxc-message sxc-message-error\">\r\n      The import failed. See the messages below for more information.\r\n    </div>\r\n    <div *ngFor=\"let message of data.importResult.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n      'sxc-message-warning': message.MessageType === 0,\r\n      'sxc-message-success': message.MessageType === 1,\r\n      'sxc-message-error': message.MessageType === 2\r\n    }\">\r\n      {{ message.Text }}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <ng-container *ngIf=\"!data.importResult?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!data.importFiles || data.isImporting || !!data.importResult\"\r\n        (click)=\"importContentType()\">\r\n        Import\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"data.importResult?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../../import-app/models/import-app-result.model';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\nimport { ImportContentTypeDialogData } from './import-content-type-dialog.config';\r\n\r\n@Component({\r\n  selector: 'app-import-content-type',\r\n  templateUrl: './import-content-type.component.html',\r\n  styleUrls: ['./import-content-type.component.scss'],\r\n})\r\nexport class ImportContentTypeComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private isImporting$ = new BehaviorSubject(false);\r\n  private importFiles$ = new BehaviorSubject<File[]>(null);\r\n  private importResult$ = new BehaviorSubject<ImportAppResult>(null);\r\n  templateVars$ = combineLatest([this.isImporting$, this.importFiles$, this.importResult$]).pipe(\r\n    map(([isImporting, importFiles, importResult]) => ({ isImporting, importFiles, importResult })),\r\n  );\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ImportContentTypeDialogData,\r\n    private dialogRef: MatDialogRef<ImportContentTypeComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (this.dialogData.files != null) {\r\n      this.importFiles$.next(this.dialogData.files);\r\n      this.importContentType();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.isImporting$.complete();\r\n    this.importFiles$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    this.importFiles$.next(files);\r\n    this.importResult$.next(null);\r\n    this.importContentType();\r\n  }\r\n\r\n  filesChange(event: Event) {\r\n    const fileList = (event.target as HTMLInputElement).files;\r\n    const files = fileList.length > 0 ? Array.from(fileList) : null;\r\n    this.importFiles$.next(files);\r\n    this.importResult$.next(null);\r\n  }\r\n\r\n  importContentType() {\r\n    this.isImporting$.next(true);\r\n    this.contentTypesService.import(this.importFiles$.value).subscribe({\r\n      next: result => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(result);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(null);\r\n        this.snackBar.open('Import failed. Please check console for more information', null, { duration: 3000 });\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_app-administration_sub-dialogs_import-content-type_import-content-03de5f.5cca7020537669f2.js"}