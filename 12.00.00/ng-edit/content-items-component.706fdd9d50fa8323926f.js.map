{"version":3,"sources":["./src/app/shared/components/id-field/id-field.component.ts","./src/app/shared/components/id-field/id-field.component.html","./src/app/shared/helpers/copy-to-clipboard.helper.ts","./src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./src/app/content-items/content-items.component.html","./src/app/content-items/content-items.component.ts","./src/app/content-items/content-items.helpers.ts"],"names":["snackBar","agInit","params","this","id","value","tooltip","tooltipGetter","data","refresh","copy","open","duration","IdFieldComponent","copyToClipboard","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","item","clone","onClone","export","onExport","deleteItem","onDelete","ContentItemsActionsComponent","Array","isArray","encodedValue","htmlEncode","join","colDef","allowMultiValue","entities","length","text","replace","ContentItemsEntityComponent","For","metadataTooltip","Target","Number","String","Guid","ContentItemsStatusComponent","published","metadata","isFilterActive","doesFilterPass","publishedPassed","metadataPassed","valueGetter","node","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","PubMetaFilterComponent","dialogRef","contentTypesService","router","route","contentItemsService","entitiesService","contentExportService","globalConfigService","contentType$","BehaviorSubject","items$","debugEnabled$","getDebugEnabled$","modules","gridOptions","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","idFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","gridApi$","contentTypeStaticName","snapshot","paramMap","get","subscription","Subscription","ngOnInit","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","onGridReady","next","api","retrieveContentType","subscribe","contentType","getAll","items","getColumns","columns","columnDefs","buildColumnDefs","filterModel","urlFilters","parsed","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","filter","filterKeys","Object","keys","key","type","filterTo","buildFilterModel","sessionStorage","getItem","setColumnDefs","pipe","gridApi","take","setFilterModel","editItem","form","ContentTypeName","EntityId","Id","formUrl","navigate","relativeTo","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","files","importFile","name","substring","lastIndexOf","toLocaleLowerCase","importContent","importItem","state","addMetadata","confirm","metadataKeys","validTargetTypes","map","metaKey","targetType","parseInt","prompt","target","entity","alert","includes","keyTypeKeys","keyTypes","validKeyTypes","keyTypeKey","keyType","number","guid","string","debugFilter","warn","add","events","event","startWith","firstChild","pairwise","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","cellRendererParams","paramsData","_RepositoryId","valueGetterStatus","flex","minWidth","onCellClicked","bind","headerTooltip","valueGetterUsage","pinned","delete","column","StaticName","Type","Metadata","Entity","AllowMultiValue","e","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","DuplicateEntity","exportEntity","_Title","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","Title","ContentItemsComponent"],"mappings":"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","file":"content-items-component.706fdd9d50fa8323926f.js","sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [matTooltip]=\"tooltip\" (click)=\"copy()\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  private params: ContentItemsActionsParams;\r\n  private item: ContentItem;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item (click)=\"deleteItem()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","<div [matTooltip]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"value.published\" matTooltip=\"Published\">visibility</mat-icon>\r\n  <mat-icon *ngIf=\"!value.published\" matTooltip=\"Not published\">visibility_off</mat-icon>\r\n  <mat-icon class=\"meta-icon\" *ngIf=\"value.metadata\" [matTooltip]=\"metadataTooltip\">local_offer</mat-icon>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  metadataTooltip: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    // spm TODO: something about data.DraftEntity and data.PublishedEntity is missing. Search in eav-ui project\r\n    this.value = params.value;\r\n    const item: ContentItem = params.data;\r\n    if (item.For) {\r\n      this.metadataTooltip = 'Metadata'\r\n        + `\\nType: ${item.For.Target}`\r\n        + (item.For.Number ? `\\nNumber: ${item.For.Number}` : '')\r\n        + (item.For.String ? `\\nString: ${item.For.String}` : '')\r\n        + (item.For.Guid ? `\\nGuid: ${item.For.Guid}` : '');\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n    };\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Data</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\">\r\n      <button mat-button matTooltip=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button matTooltip=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button matTooltip=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button matTooltip=\"Add metadata to entity\" (click)=\"addMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" matTooltip=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" matTooltip=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClickedEvent, ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, take } from 'rxjs/operators';\r\nimport { GlobalConfigService } from '../../../../edit/shared/store/ngrx-data';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, EavKeyTypeKey, EavMetadataKey } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemImportDialogData } from './content-item-import/content-item-import-dialog.config';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  items$ = new BehaviorSubject<ContentItem[]>(null);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      pubMetaFilterComponent: PubMetaFilterComponent,\r\n      booleanFilterComponent: BooleanFilterComponent,\r\n      idFieldComponent: IdFieldComponent,\r\n      contentItemsStatusComponent: ContentItemsStatusComponent,\r\n      contentItemsActionsComponent: ContentItemsActionsComponent,\r\n      contentItemsEntityComponent: ContentItemsEntityComponent,\r\n    },\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters));\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    const item: ContentItem = params?.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: ContentItemImportDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  addMetadata() {\r\n    if (!confirm(\r\n      'This is a special operation to add an item which is metadata for another item.'\r\n      + ' If you didn\\'t understand that, this is not for you :). Continue?'\r\n    )) { return; }\r\n\r\n    const metadataKeys = Object.keys(eavConstants.metadata) as EavMetadataKey[];\r\n    const validTargetTypes = metadataKeys.map(metaKey => eavConstants.metadata[metaKey].type);\r\n    const targetType = parseInt(prompt(\r\n      'What kind of assignment do you want?'\r\n      + metadataKeys.map(metaKey => `\\n${eavConstants.metadata[metaKey].type}: ${eavConstants.metadata[metaKey].target}`),\r\n      eavConstants.metadata.entity.type.toString()\r\n    ), 10);\r\n    if (!targetType) { return alert('No target type entered. Cancelled'); }\r\n    if (!validTargetTypes.includes(targetType)) {\r\n      alert(`Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing.`);\r\n    }\r\n\r\n    const key = prompt('What key do you want?');\r\n    if (!key) { return alert('No key entered. Cancelled'); }\r\n\r\n    const keyTypeKeys = Object.keys(eavConstants.keyTypes) as EavKeyTypeKey[];\r\n    const validKeyTypes = keyTypeKeys.map(keyTypeKey => eavConstants.keyTypes[keyTypeKey]);\r\n    const keyType = prompt(\r\n      'What key type do you want?'\r\n      + keyTypeKeys.map(keyTypeKey => `\\n${eavConstants.keyTypes[keyTypeKey]}`),\r\n      eavConstants.keyTypes.number\r\n    );\r\n    if (!keyType) { return alert('No key type entered. Cancelled'); }\r\n    if (!validKeyTypes.includes(keyType)) { return alert('Invalid key type. Cancelled'); }\r\n    if (keyType === eavConstants.keyTypes.number && !parseInt(key, 10)) {\r\n      return alert('Key type number and key don\\'t match. Cancelled');\r\n    }\r\n\r\n    let target: string;\r\n    for (const metaKey of metadataKeys) {\r\n      if (targetType !== eavConstants.metadata[metaKey].type) { continue; }\r\n      target = eavConstants.metadata[metaKey].target;\r\n      break;\r\n    }\r\n    target ??= targetType?.toString();  // if not a known type, just use the number\r\n\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: this.contentTypeStaticName,\r\n        For: {\r\n          Target: target,\r\n          ...(keyType === eavConstants.keyTypes.guid && { Guid: key }),\r\n          ...(keyType === eavConstants.keyTypes.number && { Number: parseInt(key, 10) }),\r\n          ...(keyType === eavConstants.keyTypes.string && { String: key }),\r\n        },\r\n      }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    alert('Check console for filter information');\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchItems();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (paramsData: ContentItem) => `ID: ${paramsData.Id}\\nRepoID: ${paramsData._RepositoryId}\\nGUID: ${paramsData.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 80, headerClass: 'dense', cellClass: 'no-outline',\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 120, cellRenderer: 'contentItemsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case 'Entity':\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case 'DateTime':\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case 'Boolean':\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case 'Number':\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.For,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n\r\n    // remove 'Z' and replace 'T'\r\n    return (params.colDef as ExtendedColDef).useTimePicker ? rawValue.substring(0, 19).replace('T', ' ') : rawValue.substring(0, 10);\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== typeof true) { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { NumberFilterModel, TextFilterModel } from '@ag-grid-community/all-modules';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { Dictionary } from '../shared/models/dictionary.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let parsed: Dictionary;\r\n  try {\r\n    parsed = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!parsed) { return; }\r\n\r\n  // filters can be published, metadata, string, number and boolean\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (parsed.IsPublished || parsed.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: parsed.IsPublished ? parsed.IsPublished : '',\r\n      metadata: parsed.IsMetadata ? parsed.IsMetadata : '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  const filterKeys = Object.keys(parsed);\r\n  for (const key of filterKeys) {\r\n    if (key === 'IsPublished' || key === 'IsMetadata') { continue; }\r\n\r\n    const value = parsed[key];\r\n    if (typeof value === typeof '') {\r\n      const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof 0) {\r\n      const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof true) {\r\n      const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n      filterModel[key] = filter;\r\n    }\r\n  }\r\n\r\n  return filterModel;\r\n}\r\n"],"sourceRoot":"webpack:///"}