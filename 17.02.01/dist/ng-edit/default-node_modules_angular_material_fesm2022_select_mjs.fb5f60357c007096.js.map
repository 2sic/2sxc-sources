{"version":3,"file":"default-node_modules_angular_material_fesm2022_select_mjs.fb5f60357c007096.js","mappings":"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","names":["_c0","_c1","MatSelect_Conditional_4_Template","rf","ctx","i0","ctx_r2","placeholder","MatSelect_Conditional_5_Conditional_1_Template","MatSelect_Conditional_5_Conditional_2_Template","ctx_r6","triggerValue","MatSelect_Conditional_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_10_Template","_r9","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","ctx_r10","_handleKeydown","ctx_r4","_getPanelTheme","panelClass","id","multiple","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","opacity","transform","animate","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","providedIn","factory","overlay","inject","Overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","this","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","Subject","MatSelect","_scrollOptionIntoView","index","option","options","toArray","panel","nativeElement","labelCount","_countGroupLabelsBeforeOption","optionGroups","element","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","focused","_focused","_panelOpen","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","coerceBooleanProperty","_syncParentProperties","_placeholder","required","_required","control","hasValidator","Validators","_multiple","disableOptionCentering","_disableOptionCentering","compareWith","_compareWith","fn","_selectionModel","_initializeSelection","_value","newValue","_assignValue","_onChange","typeaheadDebounceInterval","_typeaheadDebounceInterval","coerceNumberProperty","_id","_uid","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","super","_positions","originX","originY","overlayX","overlayY","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","controlType","panelWidth","optionSelectionChanges","defer","changes","pipe","startWith","switchMap","merge","map","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","_trackedModal","_skipPredicate","panelOpen","disabled","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","change","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","detectChanges","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","_previousControl","undefined","updateErrorState","ngOnChanges","userAriaDescribedBy","withTypeAhead","ngOnDestroy","destroy","complete","_clearFromModal","toggle","close","open","getConnectedOverlayOrigin","_canOpen","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","preferredOrigin","CdkOverlayOrigin","getBoundingClientRect","width","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","firstEnabledOptionIndex","length","get","labelId","getLabelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","static","ɵfac","t","i1","i2","i3","i4","MAT_FORM_FIELD","i5","ɵcmp","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","first","viewQuery","CdkConnectedOverlay","hostAttrs","hostVars","hostBindings","toString","errorState","inputs","disableRipple","errorStateMatcher","outputs","exportAs","features","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","_r0","dependencies","i6","i7","styles","encapsulation","data","animation","changeDetection","MatSelectTrigger","ɵdir","MatSelectModule","ɵmod","ɵinj","providers","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Self, Attribute, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i8 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\nclass MatSelect extends _MatSelectMixinBase {\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /**\n         * Width of the panel. If set to `auto`, the panel will match the trigger width.\n         * If set to null or an empty string, the panel will grow to match the longest option's text.\n         */\n        this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n            ? this._defaultOptions.panelWidth\n            : 'auto';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        if (this._canOpen()) {\n            this._applyModalPanelOwnership();\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSelect, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.0.4\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\", \"ngSkipHydration\": \"\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i6.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i7.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        'ngSkipHydration': '',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], ctorParameters: () => [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i8.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, matSelectAnimations };\n"],"x_google_ignoreList":[0]}