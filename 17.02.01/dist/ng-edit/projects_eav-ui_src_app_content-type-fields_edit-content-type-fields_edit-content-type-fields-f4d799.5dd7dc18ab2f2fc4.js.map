{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fields-f4d799.5dd7dc18ab2f2fc4.js","mappings":"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","names":["arrReducer","arr","value","push","toArray","operate","source","subscriber","reduce","accumulator","seed","scanInternals","arguments","length","subscribe","fieldNamePattern","fieldNameError","dataTypeLabels","Boolean","label","calculateTypeLabel","DataTypeConstants","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","ReservedNamesValidatorDirective","constructor","this","reservedNames","validate","control","controlValue","toLocaleLowerCase","reservedName","Object","keys","find","name","static","t","core","Sc5","selectors","inputs","features","i0","provide","NG_VALIDATORS","useExisting","multi","field_r19","ContentType","Name","field_r20","StaticName","field_r21","Type","field_r22","_r24","$implicit","ctx_r23","selectField","ctx_r30","_r28","errors","AddSharingFieldsComponent_td_32_Conditional_6_Conditional_0_Template","AddSharingFieldsComponent_td_32_Conditional_6_Conditional_1_Template","pattern","$event","item_r26","_r33","newName","AddSharingFieldsComponent_td_32_Conditional_6_Template","ctx_r12","i_r27","item_r34","field","item_r35","_r37","ctx_r36","removeField","AddSharingFieldsComponent","BaseSubsinkComponent","dialogData","dialogRef","contentTypesFieldsService","snackBar","featuresService","dialog","viewContainerRef","changeDetectorRef","super","hostClass","displayedShareableFieldsColumns","displayedSelectedFieldsColumns","shareableFields","MatTableDataSource","selectedFields","saving$","BehaviorSubject","disableClose","subscription","add","backdropClick","form","dirty","data","confirm","closeDialog","ngOnInit","getShareableFields","getReservedNames","existingFields","forEach","ngOnDestroy","complete","splice","indexOf","save","isEnabled$","FeatureNames","FieldShareConfigManagement","pipe","take","isEnabled","next","open","of","filter","inheritField","concatMap","addInheritedField","contentType","Id","Guid","catchError","error","responses","duration","FeatureComponentBase","openDialog","close","MAT_DIALOG_DATA","i1","i2","i3","i4","In1","viewQuery","rf","ctx","NgForm","AddSharingFieldsComponent_th_13_Template","AddSharingFieldsComponent_td_14_Template","AddSharingFieldsComponent_th_16_Template","AddSharingFieldsComponent_td_17_Template","AddSharingFieldsComponent_th_19_Template","AddSharingFieldsComponent_td_20_Template","AddSharingFieldsComponent_th_22_Template","AddSharingFieldsComponent_td_23_Template","AddSharingFieldsComponent_tr_24_Template","AddSharingFieldsComponent_tr_25_Template","AddSharingFieldsComponent_th_31_Template","AddSharingFieldsComponent_td_32_Template","AddSharingFieldsComponent_th_34_Template","AddSharingFieldsComponent_td_35_Template","AddSharingFieldsComponent_th_37_Template","AddSharingFieldsComponent_td_38_Template","AddSharingFieldsComponent_tr_39_Template","AddSharingFieldsComponent_tr_40_Template","_r10","valid","ctx_r16","_r12","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_7_Conditional_0_Template","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_7_Conditional_1_Template","dataType_r18","icon","option_r23","EditContentTypeFieldsComponent_Conditional_6_For_4_For_33_Conditional_4_Template","inputType","_c1","isObsolete","field_r7","_r31","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_7_Template","i_r8","$index","ctx_r32","filterInputTypeOptions","resetInputType","calculateHints","EditContentTypeFieldsComponent_Conditional_6_For_4_For_19_Template","ctx_r34","InputType","EditContentTypeFieldsComponent_Conditional_6_For_4_For_33_Template","ctx_r5","editMode","touched","findIcon","findLabel","dataTypes","dataTypeHints","tmp_16_0","getInputTypeOption","tmp_17_0","filteredInputTypeOptions","inputTypeHints","addSharedField","_r39","ctx_r38","EditContentTypeFieldsComponent_Conditional_6_For_4_Template","EditContentTypeFieldsComponent_Conditional_6_Conditional_6_Template","ctx_r40","ctx_r3","fields","debugEnabled$","_r4","EditContentTypeFieldsComponent","route","contentTypesService","globalConfigService","calculateTypeIcon","loading$","getDebugEnabled$","event","snapshot","paramMap","get","contentTypeStaticName","contentType$","retrieveContentType","share","fields$","switchMap","getFields","dataTypes$","typeListRetrieve","map","rawDataTypes","calculateDataTypes","rawDataType","inputTypes$","getInputTypesList","reservedNames$","forkJoin","inputTypes","inputTypeOptions","editFieldId","parseInt","editField","i","InputTypeConstants","StringDefault","IsTitle","SortOrder","index","option","dataType","defaultInputType","DefaultSuffix","some","selectedDataType","selectedInputType","inputTypeOption","obsoleteMessage","inputName","autoFocus","width","rename","updateInputType","i5","i6","EditContentTypeFieldsComponent_Conditional_3_Template","EditContentTypeFieldsComponent_Conditional_4_Template","EditContentTypeFieldsComponent_Conditional_5_Template","EditContentTypeFieldsComponent_Conditional_6_Template","undefined","FeatureIconIndicatorComponent","_angular_core__WEBPACK_IMPORTED_MODULE_0__","decls","vars","consts","template","FeatureIconIndicatorComponent_Conditional_0_Template","show$","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","id_r4","_r6","copyToClipboard","link_r7","_r9","ctx_r8","findOutMore","FeatureInfoDialogComponent_Conditional_0_Conditional_15_Template","FeatureInfoDialogComponent_Conditional_0_Conditional_17_Template","_r11","ctx_r10","feature","Description","IsEnabled","FeatureInfoDialogComponent_Conditional_0_contFlowTmp","NameId","Link","FeatureInfoDialogComponent","featureDetailService","viewModel$","combineLatest","getFeatureDetails","text","link","window","FeatureInfoDialogComponent_Conditional_0_Template","FeatureInfoDialogComponent_contFlowTmp","featureNameId","featureNameId$","showIf","showIf$","feature$","featName","get$","feat","featureId","markForCheck","FieldHintComponent_Case_1_ng_container_1_Template","_r3","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","ngContentSelectors","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c0","FieldHintComponent_contFlowTmp","ToggleDebugDirective","onClick","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","_angular_core__WEBPACK_IMPORTED_MODULE_1__","hostBindings","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","UTH","pure"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/operators/toArray.js","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./projects/eav-ui/src/app/app-administration/constants/field-name.patterns.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/reserved-names.directive.ts","./projects/eav-ui/src/app/content-type-fields/add-sharing-fields/add-sharing-fields.component.html","./projects/eav-ui/src/app/content-type-fields/add-sharing-fields/add-sharing-fields.component.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./projects/eav-ui/src/app/features/feature-icon-indicator/feature-icon-indicator.component.html","./projects/eav-ui/src/app/features/feature-icon-indicator/feature-icon-indicator.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { reduce } from './reduce';\nimport { operate } from '../util/lift';\nconst arrReducer = (arr, value) => (arr.push(value), arr);\nexport function toArray() {\n    return operate((source, subscriber) => {\n        reduce(arrReducer, [])(source).subscribe(subscriber);\n    });\n}\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","export const fieldNamePattern = /^[A-Za-z][A-Za-z0-9]+$/;\r\nexport const fieldNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n","import { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: calculateTypeLabel(DataTypeConstants.Boolean), description: 'Yes/no or true/false values' },\r\n  Custom: { label: calculateTypeLabel(DataTypeConstants.Custom), description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: calculateTypeLabel(DataTypeConstants.DateTime), description: 'For date, time or combined values' },\r\n  Empty: { label: calculateTypeLabel(DataTypeConstants.Empty), description: 'Use to structure your form' },\r\n  Entity: { label: calculateTypeLabel(DataTypeConstants.Entity), description: 'One or more other content-items' },\r\n  Hyperlink: { label: calculateTypeLabel(DataTypeConstants.Hyperlink), description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: calculateTypeLabel(DataTypeConstants.Number), description: 'Any kind of number' },\r\n  String: { label: calculateTypeLabel(DataTypeConstants.String), description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\n@Directive({\r\n  selector: '[appReservedNames]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: ReservedNamesValidatorDirective, multi: true }],\r\n})\r\nexport class ReservedNamesValidatorDirective implements Validator {\r\n  @Input('appReservedNames') reservedNames: ReservedNames = {};\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!control.value) { return null; }\r\n\r\n    const controlValue = (control.value as string).toLocaleLowerCase();\r\n    const reservedName = Object.keys(this.reservedNames).find(name => name.toLocaleLowerCase() === controlValue);\r\n    return reservedName ? { reservedNames: this.reservedNames[reservedName] } : null;\r\n  }\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ \"SharingOrInheriting.TitleAddFieldsWhichInherit\" | translate}}\r\n    </div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <span>{{ \"SharingOrInheriting.PickFieldsToInheritFrom\" | translate }}</span>\r\n    <div class=\"eav-tables-div\">\r\n      <mat-card class=\"eav-table-div-left\">\r\n        <table mat-table [dataSource]=\"shareableFields\" class=\"eav-fields-table\">\r\n          <ng-container matColumnDef=\"contentType\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.ContentType.Name}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.StaticName}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"type\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.Type}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"share\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Share</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                (click)=\"selectField(field)\">Select</button> </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedShareableFieldsColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedShareableFieldsColumns;\"></tr>\r\n        </table>\r\n      </mat-card>\r\n\r\n      <mat-card class=\"eav-table-div-right\">\r\n        <form #ngForm=\"ngForm\">\r\n          <table mat-table [dataSource]=\"selectedFields\" class=\"eav-fields-table\">\r\n            <ng-container matColumnDef=\"newName\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>New Name</b> </th>\r\n              <td mat-cell *matCellDef=\"let item; index as i\" class=\"eav-table-cell\">\r\n                <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n                  <mat-label>New Name</mat-label>\r\n                  <input matInput [pattern]=\"fieldNamePattern\" [(ngModel)]=\"item.newName\" [name]=\"'StaticName' + i\"\r\n                    #newName=\"ngModel\" [appReservedNames]=\"reservedNames\">\r\n                </mat-form-field>\r\n                @if (newName.errors) {\r\n                  @if (newName.errors.pattern) {\r\n                    <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  }\r\n                  @if (newName.errors.reservedNames) {\r\n                    <app-field-hint [isError]=\"true\">\r\n                      {{ newName.errors.reservedNames }}\r\n                    </app-field-hint>\r\n                  }\r\n                }\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"source\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Source</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" style=\"word-break:break-all;\" class=\"eav-table-cell\"> {{\r\n                item.field.ContentType.Name }}/{{ item.field.StaticName }} ({{ item.field.Type }}) </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"remove\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Remove</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                  (click)=\"removeField(item)\">Remove</button> </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedSelectedFieldsColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedSelectedFieldsColumns;\"></tr>\r\n          </table>\r\n        </form>\r\n      </mat-card>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\"\r\n        [disabled]=\"!ngForm.form.valid || selectedFields.data.length == 0 || (saving$ | async)\" (click)=\"save()\">\r\n        <div class=\"eav-button-feature\">\r\n          <span>Save</span>\r\n          <app-feature-icon-indicator class=\"eav-button-feature-icon\"\r\n            [featureNameId]=\"'FieldShareConfigManagement'\"></app-feature-icon-indicator>\r\n        </div>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>","import { ChangeDetectorRef, Component, HostBinding, Inject, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Field } from '../models/field.model';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, catchError, concatMap, filter, of, take, toArray, pipe } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureComponentBase } from '../../features/shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-add-sharing-fields',\r\n  templateUrl: './add-sharing-fields.component.html',\r\n  styleUrls: ['./add-sharing-fields.component.scss']\r\n})\r\nexport class AddSharingFieldsComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n  \r\n  displayedShareableFieldsColumns: string[] = ['contentType', 'name', 'type', 'share'];\r\n  displayedSelectedFieldsColumns: string[] = ['newName', 'source', 'remove'];\r\n\r\n  shareableFields = new MatTableDataSource<Field>([]);\r\n  selectedFields = new MatTableDataSource<NewNameField>([]);\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  reservedNames: ReservedNames;\r\n\r\n  saving$ = new BehaviorSubject(false);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: { contentType: ContentType, existingFields: Field[] },\r\n    private dialogRef: MatDialogRef<AddSharingFieldsComponent>,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n    // All this is just for the feature dialog\r\n    private featuresService: FeaturesService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n    this.dialogRef.disableClose = true;\r\n    this.subscription.add(\r\n      this.dialogRef.backdropClick().subscribe(() => {\r\n        if (this.form.dirty || this.selectedFields.data.length > 0) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) { return; }\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    // TODO: @SDV Try to find a better way to do this\r\n    this.subscription.add(this.contentTypesFieldsService.getShareableFields().subscribe(shareableFields => {\r\n      this.shareableFields.data = shareableFields;\r\n    }));\r\n    this.subscription.add(this.contentTypesFieldsService.getReservedNames().subscribe(reservedNames => { \r\n      const existingFields: ReservedNames = {};\r\n      this.dialogData.existingFields.forEach(field => {\r\n        existingFields[field.StaticName] = 'Field with this name already exists';\r\n      });\r\n      this.reservedNames = {\r\n        ...reservedNames,\r\n        ...existingFields,\r\n      };\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.saving$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  // TODO: @SDV Try to find a better way to do this\r\n  selectField(field: Field) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.push({ newName: field.StaticName, field });\r\n    this.selectedFields.data = selectedFields;\r\n\r\n  }\r\n\r\n  // TODO: @SDV Try to find a better way to do this\r\n  removeField(field: NewNameField) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.splice(selectedFields.indexOf(field), 1);\r\n    this.selectedFields.data = selectedFields;\r\n  }\r\n\r\n  // When API gets created we will need to send the selected fields to the API\r\n  save() {\r\n    this.featuresService.isEnabled$(FeatureNames.FieldShareConfigManagement).pipe(\r\n      take(1),\r\n    ).subscribe(isEnabled => {\r\n      if (!isEnabled) {\r\n        FeatureComponentBase.openDialog(this.dialog, FeatureNames.FieldShareConfigManagement, this.viewContainerRef, this.changeDetectorRef);\r\n      } else {\r\n        this.saving$.next(true);\r\n        this.snackBar.open('Saving...');\r\n        of(...this.selectedFields.data).pipe(\r\n          filter(inheritField => !!inheritField.newName),\r\n          concatMap(inheritField =>\r\n            this.contentTypesFieldsService.addInheritedField(\r\n              this.dialogData.contentType.Id,\r\n              inheritField.field.ContentType.Id,\r\n              inheritField.field.Guid,\r\n              inheritField.newName\r\n            ).pipe(catchError(error => of(null)))\r\n          ),\r\n          toArray(),\r\n        ).subscribe(responses => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n       }\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\nexport interface AppSharingFieldsViewModel {\r\n  shareableFields: Field[];\r\n  selectedFields: Field[];\r\n}\r\n\r\ninterface NewNameField {\r\n  newName: string;\r\n  field: Field;\r\n}","<div class=\"eav-dialog eav-no-scrollbar\" appToggleDebug>\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      @if (editMode === undefined) {\r\n        Fields\r\n      }\r\n      @if (editMode === null) {\r\n        Add Fields\r\n      }\r\n      @if (editMode != null) {\r\n        Edit Field\r\n      }\r\n    </div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n    <form #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n      <div class=\"eav-dialog-content\">\r\n        @for (field of fields; track field; let i = $index) {\r\n          <div class=\"eav-row-container\">\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n                <mat-label>Name</mat-label>\r\n                <input matInput [pattern]=\"fieldNamePattern\" [appReservedNames]=\"reservedNames\" [(ngModel)]=\"field.StaticName\"\r\n                  [name]=\"'StaticName' + i\" #staticName=\"ngModel\" [disabled]=\"editMode === 'inputType'\">\r\n                </mat-form-field>\r\n                @if (staticName.touched && staticName.errors) {\r\n                  @if (staticName.errors.pattern) {\r\n                    <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  }\r\n                  @if (staticName.errors.reservedNames) {\r\n                    <app-field-hint [isError]=\"true\">\r\n                      {{ staticName.errors.reservedNames }}\r\n                    </app-field-hint>\r\n                  }\r\n                }\r\n              </div>\r\n              <div class=\"eav-edit-input\">\r\n                <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n                  <mat-label>Data Type</mat-label>\r\n                  <mat-select (selectionChange)=\"filterInputTypeOptions(i); resetInputType(i); calculateHints(i)\"\r\n                    [(ngModel)]=\"field.Type\" [name]=\"'Type' + i\" [disabled]=\"editMode != null\">\r\n                    <mat-select-trigger>\r\n                      <mat-icon class=\"eav-type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n                      <span>{{ findLabel(field.Type) }}</span>\r\n                    </mat-select-trigger>\r\n                    @for (dataType of dataTypes; track dataType) {\r\n                      <mat-option [value]=\"dataType.name\">\r\n                        <mat-icon class=\"eav-type-icon\">{{ dataType.icon }}</mat-icon>\r\n                        <span>{{ dataType.label }}</span>\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                </mat-form-field>\r\n                <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n              </div>\r\n              <div class=\"eav-edit-input\">\r\n                <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n                  <mat-label>Input Type</mat-label>\r\n                  <mat-select (selectionChange)=\"calculateHints(i)\" [(ngModel)]=\"field.InputType\" [name]=\"'InputType' + i\"\r\n                    [disabled]=\"editMode === 'name'\">\r\n                    <mat-select-trigger>\r\n                      <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n                      <mat-icon class=\"eav-input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n                    </mat-select-trigger>\r\n                    @for (option of filteredInputTypeOptions[i]; track option) {\r\n                      <mat-option [value]=\"option.inputType\"\r\n                        [ngClass]=\"{ 'eav-input-obsolete': option.isObsolete }\">\r\n                        <!-- div is needed here because <mat-option> by default puts mat-icon on the first place if it exists -->\r\n                        <div>\r\n                          <span>{{ option.label }}</span>\r\n                          @if (option.icon) {\r\n                            <mat-icon class=\"eav-input-icon\">{{ option.icon }}</mat-icon>\r\n                          }\r\n                        </div>\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                </mat-form-field>\r\n                <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n        <!--\r\n        TODO: @SDV\r\n        - create a button to the left which is only visible in debug mode!\r\n        - Label: Add Shared Field (BETA) - put it in i18n\r\n      - on click, open a dialog\r\n        - Title: \"Add Fields which Inherits Configuration\" (i18n)\r\n        - Content: \"Pick original fields which we'll inherit from\" (i18n)\r\n        - The screen should now be split into 2 columns. Both columns should scroll independently\r\n          - Left column: a list of all content-types/fields can be selected\r\n            - get from the api fields/GetSharedFields\r\n            - show a table with these columns\r\n              - Content Type (from the new Field.ContentType.Name)\r\n              - Field (Field.Name)\r\n              - Type (Field.Type)\r\n            - On click, an entry is added to the table in the right column\r\n          - Right column: a list of all fields which were selected, and should be added\r\n            - show a table with these columns\r\n              - Name (input field - initial value is Field.Name, but editable)\r\n              - Source (basically [ContentType.Name]/[Field.Name]([Field.Type]))\r\n              - Remove button\r\n        - At the end the Cancel / Ok button\r\n        - When OK is pressed, nothing happens yet\r\n        -->\r\n        <mat-dialog-actions>\r\n          @if ((debugEnabled$ | async)) {\r\n            <button mat-raised-button type=\"button\" (click)=\"addSharedField()\">{{ \"SharingOrInheriting.AddSharedField\" | translate }}</button>\r\n          }\r\n          <div class=\"spacer\"></div>\r\n          <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n          <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || (saving$ | async)\">\r\n            Save\r\n          </button>\r\n        </mat-dialog-actions>\r\n      </form>\r\n    }\r\n  </div>\r\n\r\n","import { Component, HostBinding, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, catchError, concatMap, filter, forkJoin, map, of, share, Subscription, switchMap, toArray } from 'rxjs';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { InputTypeStrict, InputTypeConstants } from '../constants/input-type.constants';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { AddSharingFieldsComponent } from '../add-sharing-fields/add-sharing-fields.component';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n})\r\nexport class EditContentTypeFieldsComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  fields: Partial<Field>[] = [];\r\n  existingFields: Field[] = [];\r\n  reservedNames: ReservedNames;\r\n  editMode: 'name' | 'inputType';\r\n  dataTypes: DataType[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  findLabel = calculateTypeLabel;\r\n  loading$ = new BehaviorSubject(true);\r\n  saving$ = new BehaviorSubject(false);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  private contentType: ContentType;\r\n  private inputTypeOptions: FieldInputTypeOption[];\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private globalConfigService: GlobalConfigService,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n  ) {\r\n    super();\r\n    this.dialogRef.disableClose = true;\r\n    this.subscription.add(\r\n      this.dialogRef.backdropClick().subscribe(event => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) { return; }\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n    const contentType$ = this.contentTypesService.retrieveContentType(contentTypeStaticName).pipe(share());\r\n    const fields$ = contentType$.pipe(switchMap(contentType => this.contentTypesFieldsService.getFields(contentType.StaticName)));\r\n    const dataTypes$ = this.contentTypesFieldsService.typeListRetrieve().pipe(map(rawDataTypes => calculateDataTypes(rawDataTypes)));\r\n    const inputTypes$ = this.contentTypesFieldsService.getInputTypesList();\r\n    const reservedNames$ = this.contentTypesFieldsService.getReservedNames();\r\n\r\n    forkJoin([contentType$, fields$, dataTypes$, inputTypes$, reservedNames$]).subscribe(\r\n      ([contentType, fields, dataTypes, inputTypes, reservedNames]) => {\r\n        this.contentType = contentType;\r\n        this.dataTypes = dataTypes;\r\n        this.inputTypeOptions = inputTypes;\r\n        this.existingFields = fields;\r\n\r\n        const existingFields: ReservedNames = {};\r\n        fields.forEach(field => {\r\n          existingFields[field.StaticName] = 'Field with this name already exists';\r\n        });\r\n        this.reservedNames = {\r\n          ...reservedNames,\r\n          ...existingFields,\r\n        };\r\n\r\n        if (this.editMode != null) {\r\n          const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n          const editField = fields.find(field => field.Id === editFieldId);\r\n          if (this.editMode === 'name') {\r\n            delete this.reservedNames[editField.StaticName];\r\n          }\r\n          this.fields.push(editField);\r\n        } else {\r\n          for (let i = 1; i <= 8; i++) {\r\n            this.fields.push({\r\n              Id: 0,\r\n              Type: DataTypeConstants.String,\r\n              InputType: InputTypeConstants.StringDefault,\r\n              StaticName: '',\r\n              IsTitle: fields.length === 0,\r\n              SortOrder: fields.length + i,\r\n            });\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < this.fields.length; i++) {\r\n          this.filterInputTypeOptions(i);\r\n          this.calculateHints(i);\r\n        }\r\n        this.loading$.next(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.saving$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filterInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.inputTypeOptions.filter(\r\n      option => option.dataType === this.fields[index].Type.toLocaleLowerCase()\r\n    );\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    let defaultInputType = this.fields[index].Type.toLocaleLowerCase() + InputTypeConstants.DefaultSuffix as InputTypeStrict;\r\n    const defaultExists = this.filteredInputTypeOptions[index].some(option => option.inputType === defaultInputType);\r\n    if (!defaultExists) {\r\n      defaultInputType = this.filteredInputTypeOptions[index][0].inputType;\r\n    }\r\n    this.fields[index].InputType = defaultInputType;\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType?.description ?? '';\r\n    this.inputTypeHints[index] = selectedInputType?.isObsolete\r\n      ? `OBSOLETE - ${selectedInputType.obsoleteMessage}`\r\n      : selectedInputType?.description ?? '';\r\n  }\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.inputTypeOptions.find(option => option.inputType === inputName);\r\n  }\r\n\r\n  addSharedField() { \r\n    this.dialog.open(AddSharingFieldsComponent, {\r\n      autoFocus: false,\r\n      width: '1600px',\r\n      data: { contentType: this.contentType, existingFields: this.existingFields }\r\n    });\r\n  }\r\n\r\n  save() {\r\n    this.saving$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    if (this.editMode != null) {\r\n      const field = this.fields[0];\r\n      if (this.editMode === 'name') {\r\n        this.contentTypesFieldsService.rename(field.Id, this.contentType.Id, field.StaticName).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      } else if (this.editMode === 'inputType') {\r\n        this.contentTypesFieldsService.updateInputType(field.Id, field.StaticName, field.InputType).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      }\r\n    } else {\r\n      of(...this.fields).pipe(\r\n        filter(field => !!field.StaticName),\r\n        concatMap(field =>\r\n          this.contentTypesFieldsService.add(field, this.contentType.Id).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(responses => {\r\n        this.saving$.next(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    }\r\n  }\r\n}\r\n","@if (show$ | async) {\r\n  <mat-icon [tippy]=\"'Features.NotActivated' | translate\">diamond</mat-icon>\r\n}","import { ChangeDetectorRef, Component, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-feature-icon-indicator',\r\n  templateUrl: './feature-icon-indicator.component.html',\r\n  styleUrls: ['./feature-icon-indicator.component.scss']\r\n})\r\nexport class FeatureIconIndicatorComponent extends FeatureComponentBase /* implements OnInit */ {\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef, featuresService);\r\n  }\r\n\r\n  // ngOnInit(): void {\r\n  //   super.ngOnInit();\r\n  // }\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n};\r\n","@if (viewModel$ | async; as vm) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ vm.feature.Name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ (vm.feature.IsEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n        </div>\r\n      </div>\r\n      @if (vm.feature.NameId; as id) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">ID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      @if (vm.feature.Link; as link) {\r\n        <button mat-raised-button color=\"accent\"\r\n          class=\"eav-card-action-button\" (click)=\"findOutMore(link)\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          {{ \"Features.FindOutMore\" | translate }}\r\n        </button>\r\n      }\r\n      <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n        {{ \"Features.Close\" | translate }}\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.IsEnabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      width: '400px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[0,1]}