{"version":3,"file":"projects_eav-ui_src_app_content-export_content-export_component_ts.ab0b2dca5bd41804.js","mappings":"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","names":["i0","lang_r4","NameId","ctx_r3","itemIds","length","$event","_r10","ctx_r9","formValues","language","ContentExportComponent_Conditional_5_For_17_Template","ctx_r11","recordExport","ContentExportComponent_Conditional_5_Conditional_26_Template","ctx_r12","languageReferences","ctx_r13","resourcesReferences","ctx_r14","closeDialog","ctx_r15","exportContent","ctx_r0","languages","hasIdList","_r1","form","valid","ContentExportComponent","constructor","dialogRef","route","contentExportService","appDialogConfigService","contentTypesService","this","hostClass","loading$","BehaviorSubject","contentType$","contentTypeStaticName","snapshot","paramMap","get","selectedIds","split","map","id","parseInt","ngOnInit","next","retrieveContentType","dialogSettings$","getShared$","forkJoin","subscribe","contentType","dialogSettings","Context","Language","List","defaultLanguage","Primary","ngOnDestroy","complete","close","static","t","i1","i2","i3","i4","i5","_angular_core__WEBPACK_IMPORTED_MODULE_3__","In1","selectors","hostVars","hostBindings","rf","ctx","ContentExportComponent_Conditional_5_Template","tmp_0_0","Name"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-export/content-export.component.html","./projects/eav-ui/src/app/content-export/content-export.component.ts"],"sourcesContent":["<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Export {{ (contentType$ | async)?.Name }}</div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n    <form #ngForm=\"ngForm\">\r\n      <div class=\"eav-dialog-content\">\r\n        <p>\r\n          This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to\r\n          export the schema that you can then fill in using Excel. Please visit\r\n          <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n        </p>\r\n        <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n          <div>\r\n            <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n              <mat-label>Languages</mat-label>\r\n              <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n                <mat-option value=\"\">All</mat-option>\r\n                @for (lang of languages; track lang) {\r\n                  <mat-option [value]=\"lang.NameId\">{{ lang.NameId }}</mat-option>\r\n                }\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Export data</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n              @if (hasIdList) {\r\n                <mat-radio-button value=\"Selection\">\r\n                  Export selected {{ itemIds.length }} items\r\n                </mat-radio-button>\r\n              }\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Value references to other languages</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.languageReferences\" name=\"LanguageReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Link\">Keep references to other languages (for re-import)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">File / page references</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example\r\n                /Portals/0...)\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-actions align=\"end\">\r\n        <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">\r\n          Export Data\r\n        </button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Language } from '../edit/shared/models';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@Component({\r\n  selector: 'app-content-export',\r\n  templateUrl: './content-export.component.html',\r\n  styleUrls: ['./content-export.component.scss'],\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentExportService: ContentExportService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getShared$(); // .getDialogSettings();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.languages = dialogSettings.Context.Language.List;\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}