{"version":3,"sources":["../edit/eav-material-controls/adam/sanitize.service.ts","./src/app/shared/services/snack-bar-stack.service.ts","./src/app/code-editor/services/source.service.ts","./src/app/code-editor/services/snippets.service.ts","./src/app/code-editor/code-templates/order-items.pipe.ts","./src/app/code-editor/code-templates/depth-padding.pipe.ts","./src/app/code-editor/code-templates/code-templates.component.html","./src/app/code-editor/code-templates/code-templates.component.ts","./src/app/code-editor/code-templates/code-templates.helpers.ts","./src/app/code-editor/code-snippets/code-snippets.helpers.ts","./src/app/code-editor/code-snippets/object-to-array.pipe.ts","./src/app/code-editor/code-snippets/code-snippets.component.html","./src/app/code-editor/code-snippets/code-snippets.component.ts","./src/app/code-editor/ace-editor/ace-options.ts","./src/app/code-editor/ace-editor/ace-editor.component.ts","./src/app/code-editor/code-editor.component.html","./src/app/code-editor/code-editor-routing.module.ts","./src/app/code-editor/code-editor.component.ts","./src/app/code-editor/code-editor.module.ts"],"names":["cleanBadPath","sanitized","replace","removeFromStart","charToRemove","substring","removeFromEnd","length","sanitizePath","this","sanitizeName","SanitizeService","snackBar","defaultDuration","processingMessage","messageQueue","add","message","action","config","duration","triggered","Subject","push","showSnackBar","asObservable","nextMsg","shift","snackBarRef","open","afterDismissed","subscribe","complete","onAction","next","ngOnDestroy","SnackBarStackService","http","context","dnnContext","get","key","$2sxc","apiUrl","params","appId","toString","templateIdOrPath","pipe","map","view","Type","toLowerCase","Extension","save","post","getTemplates","global","withSubfolders","createTemplate","name","path","templateId","SourceService","translate","keyPrefixes","keyPrefixIndex","indexOf","getSnippets","toPromise","res","relevant","filterAwayNotNeededSnippetsList","snippets","standAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","newList","itm","setHasPrefix","set","substr","inputTypeArray","catalogInputTypeSnippets","inputTypeList","undefined","subset","templateConfiguration","makeTree","Content","Object","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","label","snip","content","help","links","linksList","getHelpKey","result","instant","addition","linksString","llist","split","pair","trim","url","target","type","prefix","getFields","AppId","then","fields","value","fieldname","StaticName","valuePlaceholder","Metadata","merged","Notes","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","staticName","appid","filter","field","Empty","fld","md","allMd","All","typeMd","inputMd","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","SnippetsService","transform","items","sort","item1","item2","isFolder","SortItemsPipe","sanitizer","depth","bypassSecurityTrustStyle","DepthPaddingPipe","dialogService","toggledItems","ngOnInit","ngOnChanges","changes","templates","currentValue","paths","last","pathFromRoot","existing","find","item","children","calculateTree","showFileInTree","FileName","openTemplate","openCodeFile","toggleItem","array","index","splice","addFile","folder","emit","file","includes","CodeTemplatesComponent","keys","ObjectToArrayPipe","insertSnippet","toggledSections","toggledFolders","toggledInfos","toggledMores","addSnippet","snippet","toggleSection","toggleFolder","toggleInfo","info","toggleMore","CodeSnippetsComponent","aceOptions","mode","wrap","useSoftTabs","theme","fontSize","fontFamily","showGutter","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","zone","propagateChange","propagateTouched","test","src","aceLoaded","bind","filename","updateValues","editor","toggleResize","previousValue","runOutsideAngular","setTimeout","resize","ace","require","snippetManager","focus","writeValue","p","getCursorPosition","setValue","moveCursorToPosition","registerOnChange","fn","registerOnTouched","destroy","container","remove","edit","editorRef","nativeElement","$blockScrolling","Infinity","session","on","onEditorValueChange","onEditorBlurred","run","getValue","getModeForPath","setMode","register","AceEditorComponent","provide","useExisting","multi","routes","component","route","snackBarStack","sourceService","snippetsService","titleService","sanitizeService","explorer","activeExplorer","eventListeners","init","calculateViewKey","attachListeners","forkJoin","viewKey","savedCode","Code","setTitle","showCodeAndEditionWarnings","explorerSnipps","editorSnipps","detachListeners","toggleExplorer","question","suggestion","startsWith","prompt","files","changeInsertSnipp","insertSnipp","codeToSave","error","itemsRaw","sessionStorage","getItem","JSON","parse","EntityId","Path","pathAndName","pathSeparator","lastIndexOf","pathWithSlash","fullName","nameCode","codeFile","otherEditions","endsWith","window","closing","stopClose","keyboardSave","addEventListener","element","listener","forEach","removeEventListener","e","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","CodeEditorComponent","CodeEditorRoutingModule","forChild","translateLoaderFactory","sxcVersion","CodeEditorModule","loader","useFactory","deps","defaultLanguage","isolate"],"mappings":"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","file":"code-editor-code-editor-module.ac157beb1b9a53675d54.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class SanitizeService {\r\n\r\n  constructor() { }\r\n\r\n  private removeFromStart(sanitized: string, charToRemove: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private removeFromEnd(sanitized: string, charToRemove: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private cleanBadPath = (sanitized: string) => {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  public sanitizePath(sanitized: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  public sanitizeName(sanitized: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized)\r\n      .replace(illegalRe, replacement);\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n/** This service ensures that multiple SnackBars are shown one after another. */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SnackBarStackService implements OnDestroy {\r\n  private defaultDuration = 3000;\r\n  private processingMessage = false;\r\n  private messageQueue: SnackBarData[] = [];\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  /**\r\n   * Add a message to the stack queue.\r\n   * @returns observable that fires if the action is triggered.\r\n   * Service will complete the observable\r\n   */\r\n  add(message: string, action?: string, config: MatSnackBarConfig<any> = { duration: this.defaultDuration }): Observable<void> {\r\n    const triggered = new Subject<void>();\r\n    this.messageQueue.push({ message, action, config, triggered });\r\n    if (!this.processingMessage) {\r\n      this.showSnackBar();\r\n    }\r\n    return triggered.asObservable();\r\n  }\r\n\r\n  private showSnackBar() {\r\n    const nextMsg = this.messageQueue.shift();\r\n\r\n    if (nextMsg == null) {\r\n      this.processingMessage = false;\r\n      return;\r\n    }\r\n\r\n    this.processingMessage = true;\r\n\r\n    const snackBarRef = this.snackBar.open(nextMsg.message, nextMsg.action, nextMsg.config);\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      nextMsg.triggered.complete();\r\n      this.showSnackBar();\r\n    });\r\n    snackBarRef.onAction().subscribe(() => {\r\n      nextMsg.triggered.next();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    for (const message of this.messageQueue) {\r\n      message.triggered.complete();\r\n    }\r\n    this.messageQueue = null;\r\n  }\r\n}\r\n\r\nclass SnackBarData {\r\n  message: string;\r\n  action: string;\r\n  config: MatSnackBarConfig<any>;\r\n  triggered: Subject<void>;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** Key is templateId or path */\r\n  get(key: number | string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/asset'), {\r\n      params: { appId: this.context.appId.toString(), ...this.templateIdOrPath(key) }\r\n    }).pipe(\r\n      map((view: SourceView) => {\r\n        if (view.Type.toLowerCase() === 'auto') {\r\n          switch (view.Extension.toLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    ) as Observable<SourceView>;\r\n  }\r\n\r\n  /** Key is templateId or path */\r\n  save(key: number | string, view: SourceView) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/asset'), view, {\r\n      params: { appId: this.context.appId.toString(), ...this.templateIdOrPath(key) },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  getTemplates() {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/list'), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', withSubfolders: 'true' },\r\n    }) as Observable<string[]>;\r\n  }\r\n\r\n  createTemplate(name: string) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/create'), {}, {\r\n      params: { appId: this.context.appId.toString(), global: 'false', path: name },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  private templateIdOrPath(key: number | string) {\r\n    if (typeof key === typeof 0) {\r\n      return { templateId: key.toString() };\r\n    } else {\r\n      return { path: key as string };\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\n\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { Snippet } from '../models/snippet.model';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { DataTypeConstants } from '../../content-type-fields/constants/data-type.constants';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n  private keyPrefixes = ['@', '['];\r\n  private keyPrefixIndex = (view: SourceView) => (view.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  async getSnippets(view: SourceView) {\r\n    const res: any = await this.http.get('../ng-assets/snippets.json.js').toPromise();\r\n    const snippets: Snippet[] = res.snippets;\r\n    const relevant = this.filterAwayNotNeededSnippetsList(snippets, view);\r\n    const standAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n    const sets = this.initSnippetsWithConfig(standAndInputSnips.standardArray, view, standAndInputSnips.inputTypeSnippets);\r\n    return { sets, list: standAndInputSnips.standardArray };\r\n  }\r\n\r\n  // scan the list for sets starting with @ or [ and filter if not needed right now\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView) {\r\n    const newList = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = this.keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === this.keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === this.keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substr(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]) {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substr(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    return {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]) {\r\n    const inputTypeList: any = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(sets: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    sets = this.makeTree(sets);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(sets.Content.Fields, templateConfiguration.TypeContent, 'Content', templateConfiguration, inputTypeSnippets);\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields, templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation', templateConfiguration, inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(sets.List.Fields, templateConfiguration.TypeList, 'Header', templateConfiguration, inputTypeSnippets);\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields, templateConfiguration.TypeListPresentation,\r\n          'Header.Presentation', templateConfiguration, inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  // Convert the list into a tree with set/subset/item\r\n  private makeTree(list: Snippet[]) {\r\n    const tree: any = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      tree[o.set][o.subset].push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: any, subset: any, snip: any, addition: any) {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: any) {\r\n    if (!linksString) {\r\n      return null;\r\n    }\r\n    const links = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        links.push({ name: pair[0].trim(), url: pair[1].trim() + ':' + pair[2].trim() });\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  // get fields in content types\r\n  private loadContentType(target: any, type: any, prefix: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    this.getFields(templateConfiguration.AppId, type)\r\n      .then(fields => {\r\n        // first add common items if the content-type actually exists\r\n        for (const value of fields) {\r\n          const fieldname = value.StaticName;\r\n          target[fieldname] = {\r\n            key: fieldname,\r\n            label: fieldname,\r\n            snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n            help: value.Metadata.merged.Notes || '' + ' (' + value.Type.toLowerCase() + ') '\r\n          };\r\n          // try to add generic snippets specific to this input-type\r\n          const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n\r\n          this.attachSnippets(target, prefix, fieldname, value.InputType, snipDefaults, inputTypeSnippets);\r\n        }\r\n\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        if (fields.length) {\r\n          // tslint:disable-next-line:prefer-for-of\r\n          for (let i = 0; i < std.length; i++) {\r\n            target[std[i]] = {\r\n              key: std[i],\r\n              label: std[i],\r\n              snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n              help: this.translate.instant('SourceEditorSnippets.StandardFields.' + std[i] + '.Help'),\r\n            };\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private valuePlaceholder(obj: any, val: any, templateConfiguration: any) {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/getfields'), {\r\n      params: { appid: appId.toString(), staticName },\r\n    })\r\n      .toPromise()\r\n      .then((fields: Field[]) => {\r\n        fields = fields.filter(field => field.Type !== DataTypeConstants.Empty);\r\n        if (fields) {\r\n          for (const fld of fields) {\r\n            if (!fld.Metadata) { continue; }\r\n            const md = fld.Metadata;\r\n            const allMd = md.All;\r\n            const typeMd = md[fld.Type];\r\n            const inputMd = md[fld.InputType];\r\n            md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n          }\r\n        }\r\n        return fields;\r\n      });\r\n  }\r\n\r\n  private attachSnippets(target: any, prefix: any, fieldname: any, inputType: any, snipDefaults: any, inputTypeSnippets: any) {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) {   // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substr(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) {\r\n      return;\r\n    }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = [];\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true\r\n        });\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: any, objName: any, fieldName: any) {\r\n    snip = snip.replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n/** Sorts folders before files */\r\n@Pipe({ name: 'sortItems' })\r\nexport class SortItemsPipe implements PipeTransform {\r\n\r\n  transform(items: TreeItem[]) {\r\n    if (items == null) { return items; }\r\n\r\n    items.sort((item1, item2) => {\r\n      if (item1.isFolder < item2.isFolder) {\r\n        return 1;\r\n      } else if (item1.isFolder > item2.isFolder) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return items;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'depthPadding' })\r\nexport class DepthPaddingPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(depth: number, isFolder: boolean) {\r\n    let padding: number;\r\n    if (isFolder) {\r\n      padding = depth * 8;\r\n    } else {\r\n      padding = (depth === 0) ? 8 : (depth * 8 + 16);\r\n    }\r\n    return this.sanitizer.bypassSecurityTrustStyle(`padding-left: ${padding}px;`);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of (tree | sortItems)\">\r\n      <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #fileOrFolder let-item=\"item\">\r\n\r\n      <div class=\"file\" *ngIf=\"!item.isFolder\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n        [ngClass]=\"{'active': toggledItems.includes(item.pathFromRoot) }\" matTooltipShowDelay=\"750\"\r\n        [matTooltip]=\"item.name\" (click)=\"openTemplate(item.pathFromRoot)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div *ngIf=\"item.isFolder\">\r\n        <div class=\"folder-name-wrapper\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n          (click)=\"toggleItem(item.pathFromRoot)\">\r\n          <div class=\"folder-name\" matTooltipShowDelay=\"750\" [matTooltip]=\"item.name\">\r\n            <mat-icon>\r\n              {{ toggledItems.includes(item.pathFromRoot) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n            </mat-icon>\r\n            <span>{{ item.name }}</span>\r\n          </div>\r\n          <div class=\"add-item\" matTooltipShowDelay=\"750\" matTooltip=\"Create file in this folder\"\r\n            appClickStopPropagation (click)=\"addFile(item.pathFromRoot)\">\r\n            <mat-icon>add</mat-icon>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledItems.includes(item.pathFromRoot)\">\r\n          <ng-container *ngFor=\"let item1 of (item.children | sortItems)\">\r\n            <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item1}\"></ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button matTooltip=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { calculateTree, toggleInArray } from './code-templates.helpers';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeTemplatesComponent implements OnInit, OnChanges {\r\n  @Input() view: SourceView;\r\n  @Input() templates: string[];\r\n  @Output() createTemplate: EventEmitter<string> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItems: string[] = [];\r\n\r\n  constructor(private dialogService: DialogService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.templates?.currentValue) {\r\n      this.tree = calculateTree(this.templates);\r\n    }\r\n    if (changes.view?.currentValue) {\r\n      this.showFileInTree(this.view.FileName);\r\n    }\r\n  }\r\n\r\n  openTemplate(path: string) {\r\n    this.dialogService.openCodeFile(path);\r\n  }\r\n\r\n  toggleItem(path: string) {\r\n    toggleInArray(path, this.toggledItems);\r\n  }\r\n\r\n  addFile(folder?: string) {\r\n    this.createTemplate.emit(folder);\r\n  }\r\n\r\n  private showFileInTree(file: string) {\r\n    if (file == null) { return; }\r\n    if (this.toggledItems.includes(file)) { return; }\r\n\r\n    const paths = file.split('/');\r\n    let pathFromRoot = '';\r\n    for (const path of paths) {\r\n      pathFromRoot = !pathFromRoot ? path : `${pathFromRoot}/${path}`;\r\n      if (this.toggledItems.includes(pathFromRoot)) { continue; }\r\n      this.toggleItem(pathFromRoot);\r\n    }\r\n  }\r\n\r\n}\r\n","import { TreeItem } from '../models/tree-item.model';\r\n\r\nexport function calculateTree(templates: string[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.split('/');\r\n    const last = paths[paths.length - 1];\r\n    let pathFromRoot = '';\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const path = paths[i];\r\n      pathFromRoot += i ? `/${path}` : path;\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          depth: i,\r\n          name: path,\r\n          pathFromRoot,\r\n          isFolder: path !== last,\r\n          ...(path !== last && { children: [] }),\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function toggleInArray<T>(item: T, array: T[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","export function toggleInArray(item: any, array: any[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'objectToArray' })\r\nexport class ObjectToArrayPipe implements PipeTransform {\r\n  transform(obj: object | Array<any>): Array<any> {\r\n    if (typeof obj !== typeof {}) { return obj as Array<any>; }\r\n    return Object.keys(obj).map(key => {\r\n      return (obj as any)[key];\r\n    });\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" [matTooltip]=\"'SourceEditorSnippets.' + section.key + '.Help' | translate\"\r\n      matTooltipShowDelay=\"750\" (click)=\"toggleSection(section)\">\r\n      <mat-icon>{{ toggledSections.includes(section) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ 'SourceEditorSnippets.' + section.key + '.Title' | translate }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\"\r\n          [matTooltip]=\"'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Help' | translate\"\r\n          matTooltipShowDelay=\"750\" (click)=\"toggleFolder(folder)\">\r\n          <mat-icon>{{ toggledFolders.includes(folder) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n          <span>{{ 'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Title' | translate }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | objectToArray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [matTooltip]=\"snippet.snip\" matTooltipShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon *ngIf=\"snippet.more\" matTooltip=\"Show More\" matTooltipShowDelay=\"750\"\r\n                (click)=\"toggleMore(snippet)\">\r\n                {{ toggledMores.includes(snippet) ? 'more_vert' : 'more_horiz' }}\r\n              </mat-icon>\r\n              <mat-icon matTooltip=\"Show Help\" matTooltipShowDelay=\"750\" appClickStopPropagation\r\n                (click)=\"toggleInfo(snippet)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet)\">\r\n              <div class=\"text\" [innerHTML]=\"snippet.help | safeHtml\"></div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"toggledMores.includes(snippet)\">\r\n              <div *ngFor=\"let more of (snippet.more | objectToArray)\">\r\n\r\n                <div class=\"snippet-label\">\r\n                  <div matRipple class=\"text text-more\" [matTooltip]=\"more.snip\" matTooltipShowDelay=\"750\"\r\n                    (click)=\"addSnippet(more.snip)\">\r\n                    {{ more.label }}\r\n                  </div>\r\n                  <mat-icon matTooltip=\"Show Help\" matTooltipShowDelay=\"750\" appClickStopPropagation\r\n                    (click)=\"toggleInfo(more)\">\r\n                    info\r\n                  </mat-icon>\r\n                </div>\r\n\r\n                <div class=\"snippet-help snippet-help-more\" *ngIf=\"toggledInfos.includes(more)\">\r\n                  <div class=\"text\" [innerHTML]=\"more.help | safeHtml\"></div>\r\n                  <div *ngFor=\"let link of more.links\">\r\n                    <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { toggleInArray } from './code-snippets.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeSnippetsComponent implements OnInit {\r\n  @Input() snippets: any;\r\n  @Output() insertSnippet: EventEmitter<any> = new EventEmitter();\r\n  toggledSections: any[] = [];\r\n  toggledFolders: any[] = [];\r\n  toggledInfos: any[] = [];\r\n  toggledMores: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  addSnippet(snippet: string) {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(set: any) {\r\n    toggleInArray(set, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(item: any) {\r\n    toggleInArray(item, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(info: any) {\r\n    toggleInArray(info, this.toggledInfos);\r\n  }\r\n\r\n  toggleMore(more: any) {\r\n    toggleInArray(more, this.toggledMores);\r\n  }\r\n\r\n}\r\n","import { EditorOptions } from './ace.model';\r\n\r\nexport const aceOptions: Partial<EditorOptions> & EditorPluginsOptions = {\r\n  mode: 'ace/mode/razor',\r\n  wrap: true,\r\n  useSoftTabs: true,\r\n  theme: 'ace/theme/sqlserver',\r\n  fontSize: 14,\r\n  fontFamily: 'Consolas, Courier New, monospace',\r\n  showGutter: true,\r\n  enableBasicAutocompletion: true,\r\n  enableLiveAutocompletion: true,\r\n  enableSnippets: true,\r\n};\r\n\r\ninterface EditorPluginsOptions {\r\n  enableBasicAutocompletion: boolean;\r\n  enableLiveAutocompletion: boolean;\r\n  enableSnippets: boolean;\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { Component, OnInit, Input, ElementRef, NgZone, OnChanges, SimpleChanges, ChangeDetectionStrategy, OnDestroy, forwardRef, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { aceOptions } from './ace-options';\r\nimport { Ace, Editor } from './ace.model';\r\ndeclare const ace: Ace;\r\n\r\n@Component({\r\n  selector: 'app-ace-editor',\r\n  template: `<div style=\"width: 100%; height: 100%;\" #editor></div>`,\r\n  styles: [':host {display: block; width: 100%; height: 100%}'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AceEditorComponent),\r\n    multi: true\r\n  }],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AceEditorComponent implements OnInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') editorRef: ElementRef;\r\n  @Input() filename: string;\r\n  @Input() snippets: any[];\r\n  @Input() insertSnippet: any;\r\n  /** If value changes editor will be resized */\r\n  @Input() toggleResize: boolean;\r\n\r\n  private value = '';\r\n  private editor: Editor;\r\n\r\n  propagateChange: (_: any) => void = () => { };\r\n  propagateTouched: (_: any) => void = () => { };\r\n\r\n  constructor(private zone: NgZone) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts(\r\n      [\r\n        { test: 'ace', src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ace.min.js' },\r\n        { test: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-modelist.min.js' },\r\n        { test: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-language_tools.min.js' },\r\n      ],\r\n      this.aceLoaded.bind(this)\r\n    );\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const filename = changes.filename?.currentValue;\r\n    const snippets = changes.snippets?.currentValue;\r\n    this.updateValues(filename, snippets);\r\n\r\n    if (!this.editor) { return; }\r\n    const resize = changes.toggleResize?.currentValue !== changes.toggleResize?.previousValue;\r\n    if (resize) {\r\n      this.zone.runOutsideAngular(() => {\r\n        // wait for Angular to update DOM to be able to get proper size of the container\r\n        setTimeout(() => { this.editor.resize(); }, 50);\r\n      });\r\n    }\r\n    const snippet = changes.insertSnippet?.currentValue;\r\n    if (snippet) {\r\n      this.zone.runOutsideAngular(() => {\r\n        const snippetManager = ace.require('ace/snippets').snippetManager;\r\n        snippetManager.insertSnippet(this.editor, snippet);\r\n        this.editor.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    this.value = value || '';\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      const p = this.editor.getCursorPosition();\r\n      this.editor.setValue(this.value, -1);\r\n      this.editor.moveCursorToPosition(p);\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void) {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: (_: any) => void) {\r\n    this.propagateTouched = fn;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor.destroy();\r\n      this.editor.container.remove();\r\n      this.editor = null;\r\n    });\r\n  }\r\n\r\n  private aceLoaded() {\r\n    this.zone.runOutsideAngular(() => {\r\n      ace.config.set('basePath', 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11');\r\n      this.editor = ace.edit(this.editorRef.nativeElement, aceOptions);\r\n      (this.editor as any).$blockScrolling = Infinity;\r\n      this.editor.session.setValue(this.value); // set value and reset undo history\r\n      this.updateValues(this.filename, this.snippets);\r\n      this.editor.on('change', this.onEditorValueChange.bind(this));\r\n      this.editor.on('blur', this.onEditorBlurred.bind(this));\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  private onEditorValueChange() {\r\n    this.zone.run(() => {\r\n      this.propagateChange(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private onEditorBlurred() {\r\n    this.zone.run(() => {\r\n      this.propagateTouched(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private updateValues(filename: string, snippets: any[]) {\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      if (filename) {\r\n        const modelist = ace.require('ace/ext/modelist');\r\n        const mode = modelist.getModeForPath(filename).mode;\r\n        this.editor.session.setMode(mode);\r\n      }\r\n      if (snippets) {\r\n        const snippetManager = ace.require('ace/snippets').snippetManager;\r\n        snippetManager.register(this.snippets);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.templates}\" matTooltip=\"Templates\"\r\n      (click)=\"toggleExplorer(explorer.templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.snippets}\" matTooltip=\"Snippets\"\r\n      (click)=\"toggleExplorer(explorer.snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== explorer.templates\" [view]=\"view\" [templates]=\"templates\"\r\n    (createTemplate)=\"createTemplate($event)\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== explorer.snippets\" [snippets]=\"explorerSnipps\"\r\n    (insertSnippet)=\"changeInsertSnipp($event)\">\r\n  </app-code-snippets>\r\n\r\n  <app-ace-editor *ngIf=\"view\" [filename]=\"view.FileName\" [(ngModel)]=\"view.Code\" [snippets]=\"editorSnipps\"\r\n    [insertSnippet]=\"insertSnipp\" [toggleResize]=\"!this.activeExplorer\">\r\n  </app-ace-editor>\r\n\r\n  <button mat-fab mat-elevation-z24 matTooltip=\"Click to save or CTRL + S\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { Component, OnInit, OnDestroy, NgZone } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { forkJoin } from 'rxjs';\r\n\r\nimport { Context } from '../shared/services/context';\r\nimport { keyItems } from '../shared/constants/session.constants';\r\nimport { SourceService } from './services/source.service';\r\nimport { EditItem, SourceItem, } from '../shared/models/edit-form.model';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { ElementEventListener } from '../../../../shared/element-event-listener.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SnackBarStackService } from '../shared/services/snack-bar-stack.service';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SanitizeService } from '../../../../edit/eav-material-controls/adam/sanitize.service';\r\nimport { defaultTemplateName, defaultControllerName } from '../shared/constants/file-names.constants';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss']\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  explorer = {\r\n    templates: 'templates',\r\n    snippets: 'snippets'\r\n  };\r\n  activeExplorer = this.explorer.templates;\r\n  view: SourceView;\r\n  templates: string[];\r\n  explorerSnipps: any;\r\n  editorSnipps: any;\r\n  insertSnipp: any;\r\n\r\n  private viewKey: number | string; // templateId or path\r\n  private eventListeners: ElementEventListener[] = [];\r\n  private savedCode: string;\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private snackBarStack: SnackBarStackService,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n    private dialogService: DialogService,\r\n    private sanitizeService: SanitizeService,\r\n  ) {\r\n    this.context.init(this.route);\r\n    this.calculateViewKey();\r\n    this.attachListeners();\r\n  }\r\n\r\n  ngOnInit() {\r\n    forkJoin({\r\n      view: this.sourceService.get(this.viewKey),\r\n      templates: this.sourceService.getTemplates(),\r\n    }).subscribe(result => {\r\n      this.view = result.view;\r\n      this.savedCode = this.view.Code;\r\n      this.titleService.setTitle(`${this.view.FileName} - Code Editor`);\r\n      this.templates = result.templates;\r\n      this.showCodeAndEditionWarnings(result.view, result.templates);\r\n\r\n      this.snippetsService.getSnippets(this.view).then(res => {\r\n        this.explorerSnipps = res.sets;\r\n        this.editorSnipps = res.list;\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.detachListeners();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    if (this.activeExplorer === explorer) {\r\n      this.activeExplorer = null;\r\n    } else {\r\n      this.activeExplorer = explorer;\r\n    }\r\n  }\r\n\r\n  createTemplate(folder?: string) {\r\n    let question = 'File name:';\r\n    let suggestion = defaultTemplateName;\r\n    if (folder === 'api' || folder?.startsWith('api/')) {\r\n      question = 'Controller name:';\r\n      suggestion = defaultControllerName;\r\n    }\r\n    let name = prompt(question, suggestion);\r\n    if (name === null || name.length === 0) { return; }\r\n\r\n    name = this.sanitizeService.sanitizePath(name);\r\n    if (folder != null) {\r\n      name = `${folder}/${name}`;\r\n    }\r\n    this.sourceService.createTemplate(name).subscribe(res => {\r\n      this.sourceService.getTemplates().subscribe(files => {\r\n        this.templates = files;\r\n      });\r\n    });\r\n  }\r\n\r\n  changeInsertSnipp(snippet: any) {\r\n    this.insertSnipp = snippet;\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    let codeToSave = this.view.Code;\r\n    this.sourceService.save(this.viewKey, this.view).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n        this.savedCode = codeToSave;\r\n        codeToSave = null;\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private calculateViewKey() {\r\n    // spm TODO: Move items for code-editor to the url?\r\n    const itemsRaw = sessionStorage.getItem(keyItems);\r\n    const editItems: EditItem[] | SourceItem[] = JSON.parse(itemsRaw);\r\n    const item = editItems[0];\r\n    this.viewKey = (item as EditItem).EntityId || (item as SourceItem).Path;\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(view: SourceView, files: string[]) {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file === pathWithSlash + nameCode);\r\n    const otherEditions = files.filter(file => file.endsWith(fullName)).length - 1;\r\n\r\n    if (codeFile) {\r\n      this.snackBarStack\r\n        .add(`This template also has a code-behind file '${codeFile}'.`, 'Open')\r\n        .subscribe(() => {\r\n          this.dialogService.openCodeFile(codeFile);\r\n        });\r\n    }\r\n    if (otherEditions) {\r\n      this.snackBarStack\r\n        .add(`There are ${otherEditions} other editions of this. You may be editing an edition which is not the one you see.`, 'Help')\r\n        .subscribe(() => {\r\n          window.open('https://r.2sxc.org/polymorphism', '_blank');\r\n        });\r\n    }\r\n  }\r\n\r\n  private attachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      const closing = this.stopClose.bind(this);\r\n      const save = this.keyboardSave.bind(this);\r\n      window.addEventListener('beforeunload', closing);\r\n      window.addEventListener('keydown', save);\r\n      this.eventListeners.push({ element: window, type: 'beforeunload', listener: closing });\r\n      this.eventListeners.push({ element: window, type: 'keydown', listener: save });\r\n    });\r\n  }\r\n\r\n  private detachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(listener => {\r\n        listener.element.removeEventListener(listener.type, listener.listener);\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n  }\r\n\r\n  private stopClose(e: BeforeUnloadEvent) {\r\n    if (this.savedCode === this.view.Code) { return; }\r\n    e.preventDefault(); // Cancel the event\r\n    e.returnValue = ''; // Chrome requires returnValue to be set\r\n  }\r\n\r\n  private keyboardSave(e: KeyboardEvent) {\r\n    const CTRL_S = e.keyCode === 83 && (navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey);\r\n    if (!CTRL_S) { return; }\r\n    e.preventDefault();\r\n    this.zone.run(() => { this.save(); });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { Context } from '../shared/services/context';\r\nimport { SourceService } from './services/source.service';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { ObjectToArrayPipe } from './code-snippets/object-to-array.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { SanitizeService } from '../../../../edit/eav-material-controls/adam/sanitize.service';\r\nimport { DepthPaddingPipe } from './code-templates/depth-padding.pipe';\r\nimport { SortItemsPipe } from './code-templates/order-items.pipe';\r\ndeclare const sxcVersion: string;\r\n\r\nexport function translateLoaderFactory(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './i18n/code-editor.', `.js?${sxcVersion}`);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ObjectToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n    DepthPaddingPipe,\r\n    SortItemsPipe,\r\n  ],\r\n  entryComponents: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n    FormsModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    TranslateModule.forChild({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (translateLoaderFactory),\r\n        deps: [HttpClient],\r\n      },\r\n      defaultLanguage: 'en',\r\n      isolate: true,\r\n    }),\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    DialogService,\r\n    SnippetsService,\r\n    SanitizeService,\r\n    TranslateService,\r\n  ]\r\n})\r\nexport class CodeEditorModule { }\r\n"],"sourceRoot":"webpack:///"}