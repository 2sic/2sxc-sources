{"version":3,"sources":["C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm5/internal/operators/toArray.js","./src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts"],"names":["toArrayReducer","arr","item","index","push","dataTypeLabels","Boolean","label","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","dialogRef","route","contentTypesService","contentTypesFieldsService","snackBar","hostClass","fields","filteredInputTypeOptions","dataTypeHints","inputTypeHints","contentTypeNamePattern","contentTypeNameError","findIcon","subscription","Subscription","this","disableClose","add","backdropClick","subscribe","event","form","dirty","confirm","closeDialog","ngOnInit","contentTypeStaticName","snapshot","paramMap","get","editFieldId","parseInt","editMode","contentType$","retrieveContentType","pipe","share","fields$","mergeMap","contentType","getFields","dataTypes$","typeListRetrieve","map","rawDataTypes","dataTypes","rawDataType","name","icon","calculateDataTypes","inputTypes$","getInputTypesList","forkJoin","joined","allFields","inputTypeOptions","editField","find","field","Id","i","Type","InputType","StringDefault","StaticName","IsTitle","length","SortOrder","calculateInputTypeOptions","calculateHints","ngOnDestroy","unsubscribe","close","resetInputType","toLowerCase","DefaultSuffix","filter","option","dataType","selectedDataType","selectedInputType","inputTypeOption","inputType","save","open","updateInputType","res","duration","of","concatMap","catchError","error","reduce","responses","EditContentTypeFieldsComponent"],"mappings":"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","file":"edit-content-type-fields-component.288983adf2b9b141602b.js","sourcesContent":["/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */\nimport { reduce } from './reduce';\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nexport function toArray() {\n    return reduce(toArrayReducer, []);\n}\n//# sourceMappingURL=toArray.js.map\n","import { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\n// tslint:disable:max-line-length\r\nconst dataTypeLabels: { [key: string]: { label: string, description: string } } = {\r\n  Boolean: { label: 'Boolean (yes/no)', description: 'Yes/no or true/false values' },\r\n  Custom: { label: 'Custom - ui-tools or custom types', description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: 'Date and/or time', description: 'For date, time or combined values' },\r\n  Empty: { label: 'Empty - for form-titles etc.', description: 'Use to structure your form' },\r\n  Entity: { label: 'Entity (other content-items)', description: 'One or more other content-items' },\r\n  Hyperlink: { label: 'Link / file reference', description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: 'Number', description: 'Any kind of number' },\r\n  String: { label: 'Text / string', description: 'Any kind of text' },\r\n};\r\n// tslint:enable:max-line-length\r\n\r\nexport class DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\" [ngSwitch]=\"editMode\">\r\n    <ng-container *ngSwitchCase=\"undefined\">Fields</ng-container>\r\n    <ng-container *ngSwitchCase=\"true\">Edit Field</ng-container>\r\n    <ng-container *ngSwitchCase=\"false\">Add Fields</ng-container>\r\n  </div>\r\n</div>\r\n\r\n<form #ngForm=\"ngForm\" class=\"dialog-form\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n    <div class=\"row-container\" *ngFor=\"let field of fields; index as i\">\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Name</mat-label>\r\n          <input matInput [pattern]=\"contentTypeNamePattern\" [(ngModel)]=\"field.StaticName\" [name]=\"'StaticName' + i\"\r\n            [disabled]=\"editMode\" #staticName=\"ngModel\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"staticName.touched && staticName.errors\">\r\n          <app-field-hint *ngIf=\"staticName.errors.pattern\" [isError]=\"true\">{{ contentTypeNameError }}</app-field-hint>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Data Type</mat-label>\r\n          <mat-select (selectionChange)=\"resetInputType(i); calculateInputTypeOptions(i); calculateHints(i)\"\r\n            [(ngModel)]=\"field.Type\" [name]=\"'Type' + i\" [disabled]=\"editMode\">\r\n            <mat-select-trigger>\r\n              <mat-icon class=\"type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n              <span>{{ field.Type }}</span>\r\n            </mat-select-trigger>\r\n            <mat-option *ngFor=\"let dataType of dataTypes\" [value]=\"dataType.name\">\r\n              <mat-icon>{{ dataType.icon }}</mat-icon>\r\n              <span>{{ dataType.label }}</span>\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n      </div>\r\n\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Input Type</mat-label>\r\n          <mat-select (selectionChange)=\"calculateHints(i)\" [(ngModel)]=\"field.InputType\" [name]=\"'InputType' + i\">\r\n            <mat-option *ngFor=\"let option of filteredInputTypeOptions[i]\" [value]=\"option.inputType\">\r\n              {{ option.label }}</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"save()\">Save</button>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit, HostBinding, OnDestroy, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Subscription, forkJoin, of } from 'rxjs';\r\nimport { map, mergeMap, share, catchError, toArray, filter, concatMap } from 'rxjs/operators';\r\n\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\nimport { contentTypeNamePattern, contentTypeNameError } from '../../app-administration/constants/content-type.patterns';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\nimport { InputTypeConstants } from '../constants/input-type.constants';\r\nimport { DataTypeConstants } from '../constants/data-type.constants';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss']\r\n})\r\nexport class EditContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) form: NgForm;\r\n\r\n  fields: Partial<Field>[] = [];\r\n  editMode: boolean;\r\n  dataTypes: DataType[];\r\n  inputTypeOptions: FieldInputTypeOption[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  contentTypeNamePattern = contentTypeNamePattern;\r\n  contentTypeNameError = contentTypeNameError;\r\n  findIcon = calculateTypeIcon;\r\n\r\n  private contentType: ContentType;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.dialogRef.disableClose = true;\r\n    this.subscription.add(this.dialogRef.backdropClick().subscribe(event => {\r\n      if (this.form.dirty) {\r\n        const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n        if (!confirmed) { return; }\r\n      }\r\n      this.closeDialog();\r\n    }));\r\n  }\r\n\r\n  ngOnInit() {\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n    const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n    this.editMode = (editFieldId !== null);\r\n\r\n    const contentType$ = this.contentTypesService.retrieveContentType(contentTypeStaticName).pipe(share());\r\n    const fields$ = contentType$.pipe(mergeMap(contentType => this.contentTypesFieldsService.getFields(contentType)));\r\n    const dataTypes$ = this.contentTypesFieldsService.typeListRetrieve().pipe(map(rawDataTypes => calculateDataTypes(rawDataTypes)));\r\n    const inputTypes$ = this.contentTypesFieldsService.getInputTypesList();\r\n\r\n    forkJoin([contentType$, fields$, dataTypes$, inputTypes$]).subscribe(joined => {\r\n      this.contentType = joined[0];\r\n      const allFields = joined[1];\r\n      this.dataTypes = joined[2];\r\n      this.inputTypeOptions = joined[3];\r\n\r\n      if (this.editMode) {\r\n        const editField = allFields.find(field => field.Id === editFieldId);\r\n        this.fields.push(editField);\r\n      } else {\r\n        for (let i = 1; i <= 8; i++) {\r\n          this.fields.push({\r\n            Id: 0,\r\n            Type: DataTypeConstants.String,\r\n            InputType: InputTypeConstants.StringDefault,\r\n            StaticName: '',\r\n            IsTitle: allFields.length === 0,\r\n            SortOrder: allFields.length + i,\r\n          });\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < this.fields.length; i++) {\r\n        this.calculateInputTypeOptions(i);\r\n        this.calculateHints(i);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    this.fields[index].InputType = this.fields[index].Type.toLowerCase() + InputTypeConstants.DefaultSuffix;\r\n  }\r\n\r\n  calculateInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.inputTypeOptions\r\n      .filter(option => option.dataType === this.fields[index].Type.toLowerCase());\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType ? selectedDataType.description : '';\r\n    this.inputTypeHints[index] = selectedInputType ? selectedInputType.description : '';\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    if (this.editMode) {\r\n      const field = this.fields[0];\r\n      this.contentTypesFieldsService.updateInputType(field.Id, field.StaticName, field.InputType).subscribe(res => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    } else {\r\n      of(...this.fields).pipe(\r\n        filter(field => !!field.StaticName),\r\n        concatMap(field =>\r\n          this.contentTypesFieldsService.add(field, this.contentType.Id).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(responses => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}