{"version":3,"sources":["./src/app/app-administration/sub-dialogs/content-import/content-import.component.html","./src/app/app-administration/sub-dialogs/content-import/content-import.component.ts"],"names":["dialogRef","route","contentImportService","hostClass","errors","0","1","2","3","4","5","6","7","8","viewStates","waiting","default","evaluated","imported","this","viewStateSelected","formValues","defaultLanguage","sessionStorage","getItem","contentType","snapshot","paramMap","get","file","resourcesReferences","clearEntities","ngOnInit","evaluateContent","subscribe","result","evaluationResult","importContent","importResult","back","undefined","closeDialog","close","fileChange","event","target","files","ContentImportComponent"],"mappings":"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","file":"content-import-component.b1ecbe32bdce37f487d5.js","sourcesContent":["<!-- HEADER -->\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    Import Content / Data\r\n    <ng-container *ngIf=\"viewStateSelected > 0\">Step {{ viewStateSelected }} of 3</ng-container>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n  importing, and that you created the import-file using the template provided by the Export. Please visit\r\n  <a href=\"http://2sxc.org/help\" target=\"_blank\">http://2sxc.org/help</a> for more instructions.\r\n</p>\r\n<!-- END HEADER -->\r\n\r\n<ng-container [ngSwitch]=\"viewStateSelected\">\r\n\r\n  <!-- FORM -->\r\n  <form #ngForm=\"ngForm\" class=\"dialog-form\" *ngSwitchCase=\"1\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n      <div>\r\n        <button mat-raised-button matTooltip=\"Open file browser\" (click)=\"fileInput.click()\">\r\n          <span *ngIf=\"!formValues.file\">Select file</span>\r\n          <span *ngIf=\"formValues.file\">{{ formValues.file.name }}</span>\r\n        </button>\r\n        <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n      </div>\r\n\r\n      <div>\r\n        <p class=\"field-label\">References to pages / files</p>\r\n        <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\">\r\n          <mat-radio-button value=\"Keep\">\r\n            Import links as written in the file (for example /Portals/...)\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"Resolve\">\r\n            Try to resolve paths to references\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n\r\n      <div>\r\n        <p class=\"field-label\">Clear all other entities</p>\r\n        <mat-radio-group [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n          <mat-radio-button value=\"None\">\r\n            Keep all entities not found in import\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"All\">\r\n            Remove all entities not found in import\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n\r\n      <p class=\"hint\">Remember to backup your DNN first!</p>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n        (click)=\"evaluateContent()\">\r\n        Preview Import\r\n      </button>\r\n    </div>\r\n  </form>\r\n  <!-- END FORM -->\r\n\r\n  <!-- WAITING -->\r\n  <p *ngSwitchCase=\"0\" class=\"progress-message\">Please wait while processing...</p>\r\n  <!-- END WAITING -->\r\n\r\n  <!-- EVALUATION RESULT -->\r\n  <ng-container *ngSwitchCase=\"2\">\r\n    <ng-container *ngIf=\"evaluationResult\">\r\n      <!-- DETAILS / STATISTICS -->\r\n      <div *ngIf=\"evaluationResult.Succeeded\" class=\"dialog-component-content fancy-scrollbar-light\">\r\n        <p class=\"evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n        <p class=\"evaluation__title\">File contains:</p>\r\n        <ul class=\"evaluation__content\">\r\n          <li>{{ evaluationResult.Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n          <li>{{ evaluationResult.Detail.LanguagesInDocumentCount }} languages</li>\r\n          <li>{{ evaluationResult.Detail.AttributeNamesInDocument.length }} columns:\r\n            {{ evaluationResult.Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n        </ul>\r\n        <p class=\"evaluation__title\">If you press Import, it will:</p>\r\n        <ul class=\"evaluation__content\">\r\n          <li>Create {{ evaluationResult.Detail.AmountOfEntitiesCreated }} content-items</li>\r\n          <li>Update {{ evaluationResult.Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n          <li>Delete {{ evaluationResult.Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n          <li>Ignore {{ evaluationResult.Detail.AttributeNamesNotImported.length }} columns:\r\n            {{ evaluationResult.Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n        </ul>\r\n        <p class=\"hint\">Note: The import validates much data and may take several minutes.</p>\r\n      </div>\r\n      <!-- END DETAILS / STATISTICS -->\r\n      <!-- ERRORS -->\r\n      <div *ngIf=\"!evaluationResult.Succeeded\" class=\"dialog-component-content fancy-scrollbar-light\">\r\n        <p class=\"evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n        <ul class=\"evaluation__content\">\r\n          <li *ngFor=\"let error of evaluationResult.Detail\">\r\n            <div>{{ errors[error.ErrorCode] }}</div>\r\n            <div *ngIf=\"error.ErrorDetail\"><i>Details: {{ error.ErrorDetail }}</i></div>\r\n            <div *ngIf=\"error.LineNumber\"><i>Line-no: {{ error.LineNumber }}</i></div>\r\n            <div *ngIf=\"error.LineDetail\"><i>Line-details: {{ error.LineDetail }}</i></div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <!-- END ERRORS -->\r\n      <div class=\"dialog-component-actions\">\r\n        <button mat-raised-button (click)=\"back()\">Back</button>\r\n        <button mat-raised-button color=\"accent\" [disabled]=\"!evaluationResult.Succeeded\" (click)=\"importContent()\">\r\n          Import\r\n        </button>\r\n      </div>\r\n    </ng-container>\r\n  </ng-container>\r\n  <!-- END EVALUATION RESULT -->\r\n\r\n  <!-- IMPORT RESULT -->\r\n  <div *ngSwitchCase=\"3\">\r\n    <div *ngIf=\"importResult\" class=\"progress-message\">\r\n      <p *ngIf=\"importResult.Succeeded\">Import done.</p>\r\n      <p *ngIf=\"!importResult.Succeeded\">Import failed.</p>\r\n    </div>\r\n    <div class=\"dialog-component-actions\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n    </div>\r\n  </div>\r\n  <!-- END IMPORT RESULT -->\r\n</ng-container>\r\n","import { Component, OnInit, HostBinding } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\n\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from '../../models/content-import.model';\r\nimport { ContentImportService } from '../../services/content-import.service';\r\nimport { keyLangPri } from '../../../shared/constants/session.constants';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss']\r\n})\r\nexport class ContentImportComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentImport;\r\n  viewStateSelected: number;\r\n  evaluationResult: EvaluateContentResult;\r\n  importResult: ImportContentResult;\r\n  errors: { [key: string]: string } = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentImportService: ContentImportService,\r\n  ) {\r\n    this.viewStateSelected = this.viewStates.default;\r\n    this.formValues = {\r\n      defaultLanguage: sessionStorage.getItem(keyLangPri),\r\n      contentType: this.route.snapshot.paramMap.get('contentTypeStaticName'),\r\n      file: null,\r\n      resourcesReferences: 'Keep',\r\n      clearEntities: 'None',\r\n    };\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  async evaluateContent() {\r\n    this.viewStateSelected = this.viewStates.waiting;\r\n    return (await this.contentImportService.evaluateContent(this.formValues)).subscribe(result => {\r\n      this.evaluationResult = result;\r\n      this.viewStateSelected = this.viewStates.evaluated;\r\n    });\r\n  }\r\n\r\n  async importContent() {\r\n    this.viewStateSelected = this.viewStates.waiting;\r\n    return (await this.contentImportService.importContent(this.formValues)).subscribe(result => {\r\n      this.importResult = result;\r\n      this.viewStateSelected = this.viewStates.imported;\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected = this.viewStates.default;\r\n    this.evaluationResult = undefined;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}