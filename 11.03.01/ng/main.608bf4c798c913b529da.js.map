{"version":3,"sources":["webpack:///./src/app/history/index.ts","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/core/log.ts","webpack:///./src/app/debug-config.ts","webpack:///./src/app/core/boot-control.ts","webpack:///./src/app/config.ts","webpack:///./src/app/history/sxc-versions.service.ts","webpack:///./src/app/history/history.component.html","webpack:///./src/app/history/history.component.ts","webpack:///./src/app/i18n/constants.ts","webpack:///./src/app/core/behavior-observable.ts","webpack:///./src/app/core/app.ts","webpack:///./src/app/template-picker/picker.service.ts","webpack:///./src/app/template-picker/data/content-types-processor.service.ts","webpack:///./src/app/template-picker/constants.ts","webpack:///./src/app/template-picker/data/template-processor.ts","webpack:///./src/app/template-picker/template-filter.pipe.ts","webpack:///./src/app/template-picker/current-data.service.ts","webpack:///./src/app/installer/installer.service.ts","webpack:///./src/app/installer/getting-started.service.ts","webpack:///./src/app/installer/installer.component.html","webpack:///./src/app/installer/installer.component.ts","webpack:///./src/app/template-picker/template-picker.component.html","webpack:///./src/app/template-picker/template-picker.component.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/i18n/index.ts","webpack:///./src/app/core/core.module.ts","webpack:///./src/app/installer/installer.module.ts","webpack:///./src/app/material-module.ts","webpack:///./src/app/template-picker/template-picker.module.ts","webpack:///./src/app/history/version-dialog.module.ts","webpack:///./src/app/app.module.ts","webpack:///./src/main.ts"],"names":["historyApiRoot","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","name","parent","autoDump","logs","Array","loggers","Object","this","add","msg","push","Log","forceLogToConsole","arguments","Constants","console","log","apply","subLog","newLog","dump","configureRuntimeLogging","state","window","_reboot","Subject","rebootRequest$","asObservable","getRebootController","BootController","instance","reboot","next","appId","get","apps","item","JSON","parse","moduleId","Number","cbId","dialog","getSxcInstance","$2sxc","Config","key","urlParams","require","http","versionsSubject","ReplaySubject","versions","errorSubject","error","loadVersions","restore","changeId","post","pipe","map","all","ver","ChangeSetId","HistoryId","Data","v","prevAttrs","findPrevious","attrs","Json","Entity","Attributes","entries","reduce","t","c","prototype","concat","value","type","hasChanged","stringify","TimeStamp","timestamp","date","Date","y","getFullYear","m","getUTCMonth","d","getDate","h","getHours","min","getMinutes","User","VersionNumber","subscribe","SxcVersionsService","prevVersion","find","v2","sxcVersion","restoreLive","version","_","location","reload","HistoryComponent","SupportedLanguages","create","initialValue","subj","BehaviorSubject","obs","subject","reset","isInitial","Observable","json","assign","VersionMain","parseInt","Version","substr","uninitializedList","apps$","contentTypes$","templates$","ready$","mustLoadApps","buildObservables","enableLogging","combineLatest","a","ct","types","templates","set","startWith","share","saveAppId","reloadParts","loadApps","toPromise","initLoading","requireApps","reloadAppParts","loadTemplates","loadContentTypes","response","Label","Metadata","Name","alreadyLoaded","appsFilter","App","streamLog","length","r","PickerService","translate","buildList","allTypes","allTemplates","template","unhide","unhideSelectedType","addEmptyTypeIfNeeded","filtered","hideNecessaryTypes","sortTypes","filter","IsHidden","contentTypes","currentType","currentTemplate","TemplateId","StaticName","forEach","layoutElementLabel","instant","ContentTypeStaticName","slice","Thumbnail","sort","b","localeCompare","findContentTypesById","selectedContentTypeId","ContentTypesProcessor","pickSelected","selected","app","transform","args","typeId","contentType","undefined","typeNameFilter","isContent","TemplateFilterPipe","api","templateFilter","ctProcessor","appId$","initialTypeId$","initialTemplateId$","selectedType$","selectedTemplate$","buildBasicObservables","app$","AppId","initialType$","type$","merge","current","findTemplatesForTypeOrAll","initialTemplate$","selected$","template$","TemplateProcessor","types$","init","config","appReady$","typeReady$","scan","acc","contentTypeId","templReady$","debounceTime","templateId","loadAll$","initLogging","activateCurrentApp","inita$","inittyp$","initt$","initAll$","slog","initLog","activateType","activateTemplate","CurrentDataService","installPackages","packages","step","switchMap","url","InstallerService","gettingStartedSubject","gettingStarted$","tap","loadGettingStarted","isContentApp","GettingStartedService","installer","sanitizer","remoteInstallerUrl","ready","subscriptions","bypassSecurityTrustResourceUrl","bootController","destroy","sub","unsubscribe","ngOnInit","alreadyProcessing","fromEvent","evt","data","action","values","packagesDisplayNames","displayName","confirm","showProgress","p","currentPackage","alert","top","InstallerComponent","cdRef","showCancel","showAdvanced","showInstaller","tabIndex","isBadContextForInstaller","loading$","preventAppSwich","showDebug","bridge","frameElement","dashInfo","getAdditionalDashboardConfig","boot","debugObservables","autosyncObservablesToEnsureUiUpdates","debug","initDone$","initObservables","initValuesFromBridge","initTrue$","l","typeOrAppReady","switchTab","templatesLoading$","skipUntil","previewTemplate","detectChanges","preventTypeSwitch","hasContent","isInnerContent","supportsAjax","user","canDesign","cancel","run","persistTemplate","setTemplate","selectApp","before","after","updateApp","selectContentType","setContentType","selectTemplate","timer","newApp","ajax","SupportsAjaxReload","showMessage","toString","reloadAndReInit","newConfig","TemplatePickerComponent","el","context","preConfigure","sxc","addLangs","ctxDto","lang","Context","Language","setDefaultLang","use","Current","split","showDialog","frame","open","afterClosed","hide","AppComponent","CoreModule","InstallerModule","MATERIAL_MODULES","MaterialModule","TemplatePickerModule","VersionDialogModule","HttpLoaderFactory","loader","AppModule","forRoot","provide","useFactory","deps","platform","destroyed","bootstrapModule","appBootstrap","catch","err"],"mappings":"oIACA,uEAAaA,EAAiB,gB,6DCD9B,SAASC,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,KAGRL,EAAyBQ,KAAO,WAAa,MAAO,IACpDR,EAAyBG,QAAUH,EACnCS,EAAOC,QAAUV,EACjBA,EAAyBW,GAAK,Q,6FCR9B,aAUE,WAAaC,EAAeC,GAN5B,KAAAD,KAAO,GACP,KAAAE,UCFgB,EDGhB,KAAAC,KAAO,IAAIC,MAEX,KAAAC,QAAe,IAAIC,OAGjBC,KAAKP,KAAOA,EACZO,KAAKN,OAASA,EAiClB,OA9BE,YAAAO,IAAA,SAAIC,G,IAAa,wDACfF,KAAKJ,KAAKO,KAAKD,GACXF,KAAKP,OAAMS,EAAMF,KAAKP,KAAO,IAAMS,GACnCF,KAAKN,QAAQM,KAAKN,OAAOE,KAAKO,KAAKD,IACnCF,KAAKL,UAAYS,EAAIC,qBACvBC,UAAU,GAAKC,eAA2BL,EAC1CM,QAAQC,IAAIC,MAAM,KAAMJ,aAI5B,YAAAK,OAAA,SAAOlB,EAAcE,GACnB,IAAMiB,EAAS,IAAIR,EAAIX,EAAMO,MAO7B,OANAA,KAAKF,QAAQL,GAAQmB,EACrBA,EAAOjB,SAAgC,kBAAf,EACpBA,EAAWK,KAAKL,SAIbiB,GAGT,YAAAC,KAAA,WACEb,KAAKC,IAAI,sBACTO,QAAQC,IAAI,iBAAiBT,KAAKP,KAAI,IAAKO,OAG/B,EAAAc,wBAAd,SAAsCC,GAElCX,EAAIC,kBAAoBU,GAzCd,EAAAV,mBAAoB,EA2CpC,EA7CA,GAgDaI,EAAM,IAAI,EAEvBO,OAAe,OAAIP,EEnDnB,IAAM,EAAM,EAAUE,OAAO,mBAK7B,0BAEU,KAAAM,QAA4B,IAAIC,EAAA,EACxC,KAAAC,eAAiBnB,KAAKiB,QAAQG,eAchC,OAZS,EAAAC,oBAAP,WAKE,OAJA,EAAIpB,IAAI,yBACHqB,EAAeC,WAClBD,EAAeC,SAAW,IAAID,GAEzBA,EAAeC,UAGjB,YAAAC,OAAP,WACE,EAAIvB,IAAI,iBACRD,KAAKiB,QAAQQ,MAAK,IAEtB,EAjBA,G,oFCJA,2BAWA,OAVS,EAAAC,MAAQ,WAAM,OAAAC,EAAI,UAClB,EAAAC,KAAO,WAAM,OAAAD,EAAI,SAEjB,EAAAE,KAAO,WAAM,OAAAC,KAAKC,MAAMjD,EAAI,UAAU,IAEtC,EAAAkD,SAAW,WAAM,OAAAC,OAAOnD,EAAI,SAC5B,EAAAoD,KAAO,WAAM,OAAAD,OAAOnD,EAAI,UACxB,EAAAqD,OAAS,WAAM,OAAArD,EAAI,WAEnB,EAAAsD,eAAiB,WAAM,OAAAC,MAAMC,EAAON,WAAYM,EAAOJ,SAChE,EAXA,GAcA,SAASpD,EAAIyD,GAAO,OAAOF,MAAMG,UAAUC,QAAQF,GAEnD,SAASZ,EAAIY,GAAO,OAAOF,MAAMG,UAAUb,IAAIY,G,4BCZ/C,aAQE,WACUG,GAAA,KAAAA,OAER1C,KAAK2C,gBAAkB,IAAIC,EAAA,EAAyB,GACpD5C,KAAK6C,SAAW7C,KAAK2C,gBAAgBvB,eAErCpB,KAAK8C,aAAe,IAAIF,EAAA,EAAsB,GAC9C5C,KAAK+C,MAAQ/C,KAAK8C,aAAa1B,eAE/BpB,KAAKgD,e,OAGP,YAAAC,QAAA,SAAQC,GACN,IAAMxB,EAAQY,EAAOZ,QACfG,EAAOS,EAAOT,OAGpB,OAAO7B,KAAK0C,KAAKS,KAFF,iBAAc,kBAAkBzB,EAAK,aAAawB,EAEhCrB,IAG3B,YAAAmB,aAAR,sBACQtB,EAAQY,EAAOZ,QACfG,EAAOS,EAAOT,OAGpB7B,KAAK0C,KAAKS,KAFK,iBAAc,kBAAkBzB,EAEbG,GAC/BuB,KACC,OAAAC,EAAA,IAAI,SAAAC,GACF,OAAAA,EAAID,KAAI,SAACE,GAAQ,OACfC,YAAaD,EAAIC,YACjBC,UAAWF,EAAIE,UACfC,MAgBsBC,EAhBSJ,EAgBMK,EAhBDC,EAAaP,EAAKC,GAiB1DO,EAAShC,KAAKC,MAAM4B,EAAEI,MAAwBC,OAAOC,WAEpDlE,OAAOmE,QAAQJ,GACnBK,QAAO,SAACC,EAAGC,GAAM,OAAAxE,MAAMyE,UAAUC,OAAOH,EACvCrE,OAAOmE,QAAQG,EAAE,IACdhB,KAAI,SAAC,G,IAACd,EAAG,KAAEiC,EAAK,KAAM,OACrBjC,IAAG,EACHiC,MAAOzE,OAAOmE,QAAQM,GACtBC,KAAMJ,EAAE,GACRK,WAAYd,GAAa9B,KAAK6C,UAAUf,EAAUS,EAAE,IAAI9B,MAAUT,KAAK6C,UAAUH,UAElF,KA3BGI,WAqCaC,EArCctB,EAAIqB,UAsCnCE,EAAO,IAAIC,KAAKF,GAChBG,EAAIF,EAAKG,cACTC,EAAIJ,EAAKK,cAAgB,EACzBC,EAAIN,EAAKO,UACTC,EAAIR,EAAKS,WACTC,EAAMV,EAAKW,aACPT,EAAC,KAAIE,EAAI,GAAK,IAAM,IAAKA,EAAC,KAAIE,EAAI,GAAK,IAAM,IAAKA,EAAC,KAAIE,EAAI,GAAK,IAAM,IAAKA,EAAC,KAAIE,EAAM,GAAK,IAAM,IAAKA,GA3CtGE,KAAMnC,EAAImC,KACVC,cAAepC,EAAIoC,eAmC/B,IAAyBd,EACjBC,EACAE,EACAE,EACAE,EACAE,EACAE,EA5B0B7B,EAAeC,EACzCE,SAVD8B,WACC,SAAAjC,GAAK,SAAKhB,gBAAgBlB,KAAKkC,MAC/B,WAAQ,EAAKb,aAAarB,KAAK,gC,sCA/C1BoE,GAAkB,Y,yBAAlBA,EAAkB,QAAlBA,EAAkB,Y,EAD/B,GAuEA,SAAShC,EAAaP,EAAmBK,GACvC,IAAMmC,EAAcxC,EAAIyC,MAAK,SAAAC,GAAM,OAAAA,EAAGL,gBAAkBhC,EAAEgC,cAAgB,KAE1E,OADqBG,GAAgBhE,KAAKC,MAAM+D,EAAY/B,MAAwBC,OAAOC,W,8GCtE3F,gBAAuD,Q,oBAAuC,Q,MAAvC,iD,sBACvD,gBAA0E,Q,oBAAuC,Q,MAAvC,iD,yBAkB5D,iBAAgD,QAAU,Q,4BAAV,oB,yBADlD,iBACE,uBACA,iBACF,Q,0CAFO,sCACA,qC,yBAIP,YAAkC,QAAkB,Q,uBAAlB,gC,yBADpC,iBACE,qBACF,Q,4BADK,iC,yBAVP,iBACE,iBAAkC,QAAa,OAE/C,iBAA8E,wEAC5E,uBAIF,OACA,uBAGA,eAAiB,QAAe,OAClC,Q,uBAbsD,6BAClB,2BAEtB,gCACgB,gCAKT,sCAGF,8B,qCAbrB,iBACE,uBAcF,OACA,yBACE,oBAAmB,wFAA+B,Q,oBAAiD,OACrG,O,+BAjBsB,+BAgB8B,2D,8DA5B1D,gBACE,8BAEE,qCACE,6BAAgC,Q,oBAAuE,OACvG,gCAAuB,QAAqB,OAC9C,OAIA,+BAqBF,OACF,Q,uBA5BsC,wEACT,2BCd/B,I,EAAA,aASE,WACSgC,GAAA,KAAAA,a,OAGT,YAAAC,YAAA,SAAYC,GACVnG,KAAKiG,WAAWhD,QAAQkD,EAAQ3C,aAC7BoC,WAAU,SAAAQ,GAAK,OAAApF,OAAOtB,OAAO2G,SAASC,a,sCAVhCC,GAAgB,U,uBAAhBA,EAAgB,ytB,GAAA,MDR7B,wBACE,iBAAoB,Q,oBAAmC,OACvD,iBACA,mBACE,qBAA+B,gBAAK,OACtC,OACF,OAGA,gBACE,sB,iBACA,uB,iBACA,uB,iBAiCF,Q,4EA5CsB,4CASE,mDACA,uBACF,4D,skJCTtB,GCDaC,EAAqB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,M,wYCAjE,cACE,a,OACE,cAAO,KA+BX,OAjC2C,OAmBlC,EAAAC,OAAP,SAAiBC,GACf,IAAMC,EAAO,IAAIC,EAAA,EAAmBF,GAC9BG,EAAMF,EAAKvF,eAUjB,OATAyF,EAAIH,aAAeA,EACnBG,EAAIC,QAAUH,EACdE,EAAIE,MAAQ,WACVF,EAAIC,QAAQrF,KAAKoF,EAAIH,eAEvBG,EAAIG,UAAY,WACd,OAAOH,EAAIC,QAAQtC,QAAUqC,EAAIH,cAEnCG,EAAIpF,KAAO,SAAC+C,GAAa,OAAAqC,EAAIC,QAAQrF,KAAK+C,IACnCqC,GAEX,EAjCA,CAA2CI,EAAA,G,aCH3C,cAgBA,OARI,SAAYC,GACRnH,OAAOoH,OAAOnH,KAAMkH,GAEpB,IACIlH,KAAKoH,YAAcC,SAASrH,KAAKsH,QAAQC,OAAO,EAAE,IACpD,MAAMrI,MAbhB,GCcM,GAAM,EAAUyB,OAAO,OTIhB,GSHP6G,GAAoB,GAC1B,cAuBE,WAAoB9E,GAAA,KAAAA,OAnBpB,KAAA+E,MAAQ,EAAmBhB,OAAce,IAGzC,KAAAE,cAAgB,EAAmBjB,OAAsBe,IAGzD,KAAAG,WAAa,EAAmBlB,OAAmBe,IAKnD,KAAAI,OAAS,IAAIX,EAAA,EAIL,KAAAY,cAAe,EAKrB,GAAI5H,IAAI,iBACRD,KAAK8H,mBACL9H,KAAK+H,gB,OAGC,YAAAD,iBAAR,sBACE,GAAI7H,IAAI,sBAGRD,KAAK4H,OAAS,OAAAI,EAAA,GAAchI,KAAKyH,MAAOzH,KAAK0H,cAAe1H,KAAK2H,YAC/D,SAACM,EAAGC,EAAI9D,GAAM,OAAGxC,KAAMqG,EAAGE,MAAOD,EAAIE,UAAWhE,MAC/ChB,KACC,OAAAC,EAAA,IAAI,SAAAgF,GAAO,QAAAA,EAAID,YAAcZ,IACxBa,EAAIF,QAAUX,IACZ,EAAKK,gBAAmBQ,EAAIzG,MAAQyG,EAAIzG,OAAS4F,QACxD,OAAAc,EAAA,IAAU,GACV,OAAAC,GAAA,OAGC,YAAAC,UAAP,SAAiB9G,EAAe+G,GAG9B,GAFA,GAAIxI,IAAI,aAAayB,EAAK,KAAK+G,EAAW,MAErCzI,KAAK0I,SAAU,MAAM,IAAIvJ,MAAM,4CACpC,OAAOa,KAAK0C,KAAKf,IAAOpB,8BAA4CmB,GAASiH,aAKxE,YAAAC,YAAP,SAAmBC,GAIjB,OAHA,GAAI5I,IAAI,4BAA4B4I,EAAW,KAC/C7I,KAAK6H,aAAegB,EAChBA,GAAa7I,KAAK0I,WACf1I,KAAK8I,kBAGP,YAAAA,eAAP,WACE,OAAO,OAAAd,EAAA,GACLhI,KAAK+I,gBACL/I,KAAKgJ,qBAMF,YAAAD,cAAP,sBACE,GAAI9I,IAAI,mBACRD,KAAK2H,WAAWZ,QAChB,IAAMF,EAAM7G,KAAK0C,KAAKf,IAAmBpB,sCACtC6C,KAAK,OAAAmF,GAAA,MAGR,OADA1B,EAAIjB,WAAU,SAAAqD,GAAY,SAAKtB,WAAWlG,KAAKwH,GAAY,OACpDpC,GAMD,YAAAmC,iBAAR,sBACE,GAAI/I,IAAI,sBACRD,KAAK0H,cAAcX,QACnB,IAAMF,EAAM7G,KAAK0C,KAAKf,IAAcpB,yCACjC6C,KAAK,OAAAmF,GAAA,MAQR,OAPA1B,EAAIzD,KAAK,OAAAC,EAAA,IAAI,SAAA4F,GAAY,OAACA,GAAY,IAAI5F,KAAI,SAAA6E,GAI1C,OAHAA,EAAGgB,MAAShB,EAAGiB,UAAYjB,EAAGiB,SAASD,MACnChB,EAAGiB,SAASD,MACZhB,EAAGkB,KACAlB,SAERtC,WAAU,SAAAsB,GAAQ,SAAKQ,cAAcjG,KAAKyF,MACtCL,GAMD,YAAA6B,SAAR,sBACQW,GAAiBrJ,KAAKyH,MAAMT,YAElC,GADA,GAAI/G,IAAI,qBAAqBoJ,IACzBA,EAAJ,CAEA,IAAMC,EAAahH,EAAOV,OAEpBiF,EAAM7G,KAAK0C,KAAKf,IAAcpB,sCAAoD+I,GACrFlG,KAAK,OAAAmF,GAAA,MAGR,OADA1B,EAAIjB,WAAU,SAAAqD,GAAY,SAAKxB,MAAMX,QAAQrF,KAAKwH,EAAS5F,KAAI,SAAA4E,GAAK,WAAIsB,GAAItB,UACrEpB,IAGD,YAAAkB,cAAR,WACE,IAAMyB,EAAY,EAAU7I,OAAO,eT/G1B,GSgHTX,KAAKyH,MAAM7B,WAAU,SAAAqC,GAAK,OAAAuB,EAAUvJ,IAAI,SAAQgI,GAAKA,EAAEwB,YACvDzJ,KAAK0H,cAAc9B,WAAU,SAAAsC,GAAM,OAAAsB,EAAUvJ,IAAI,kBAAiBiI,GAAMA,EAAGuB,YAC3EzJ,KAAK2H,WAAW/B,WAAU,SAAAxB,GAAK,OAAAoF,EAAUvJ,IAAI,eAAcmE,GAAKA,EAAEqF,YAClEzJ,KAAK4H,OAAOhC,WAAU,SAAA8D,GAAK,OAAAF,EAAUvJ,IAAI,UAAUyJ,O,sCArH1CC,GAAa,Y,yBAAbA,EAAa,QAAbA,EAAa,Y,EAD1B,G,0BCNM,GAAM,EAAUhJ,OAAO,gBV2BZ,GUtBjB,cAEE,WAAoBiJ,GAAA,KAAAA,Y,OAEb,YAAAC,UAAP,SAAiBC,EAAyBrF,EAAmBsF,EAA0BC,GACrF,GAAI/J,IAAI,2CACR,IAAIgK,EAASjK,KAAKkK,mBAAmBJ,EAAUrF,EAAMuF,GACrDC,EAASjK,KAAKmK,qBAAqBF,EAAQF,GAC3C,IAAMK,EAAWpK,KAAKqK,mBAAmBJ,GACzC,OAAOjK,KAAKsK,UAAUF,IAGhB,YAAAC,mBAAR,SAA2BlC,GACzB,OAAOA,EAAMoC,QAAO,SAAAnG,GAAK,OAACA,EAAEoG,aAMtB,YAAAN,mBAAR,SAA2BO,EAA6BC,EAA0BC,GAIhF,OAHAF,EACGF,QAAO,SAAAlG,GAAK,OAACsG,aAAe,EAAfA,EAAiBC,cAAevG,EAAEuG,YAAgBvG,EAAEwG,cAAeH,aAAW,EAAXA,EAAaG,eAC7FC,SAAQ,SAAAzG,GAAK,OAAAA,EAAEmG,UAAW,KACtBC,GAOD,YAAAN,qBAAR,SAA6BM,EAA6BrC,GACxD,IAAM2C,EAAsB/K,KAAK4J,WAAa5J,KAAK4J,UAAUoB,QJ1CvC,iCKJS,iBD4D/B,OAVI5C,GAAaA,EAAUrC,MAAK,SAAA3B,GAAK,MAA4B,KAA5BA,EAAE6G,2BACrCR,EAAeA,EAAaS,SACf/K,KAAK,CAChB0K,WCrD2B,iBDsD3BzB,KJlDkB,+BImDlB+B,UAAW,KACXjC,MAAO6B,EACPP,UAAU,IAGPC,GAMD,YAAAH,UAAR,SAAkBG,GAEhB,OAAOA,EAAaW,MAAK,SAACnD,EAAGoD,GAAM,OAAC,GAAKpD,EAAEiB,OAAOoC,cAAcD,EAAEnC,WAK7D,EAAAqC,qBAAP,SAA4Bd,EAA6Be,GAEvD,OADA,GAAIvL,IAAI,6BAA6BuL,GAC9BA,EACHf,EAAa1E,MAAK,SAAA1B,GAAK,OAAAA,EAAEwG,aAAeW,KACxC,M,sCA7DKC,GAAqB,Y,yBAArBA,EAAqB,QAArBA,EAAqB,Y,EADlC,GETM,GAAM,EAAU9K,OAAO,qBZiCR,GY/BrB,4BAaA,OAZS,EAAA+K,aAAP,SAAoBC,EAAoBvD,EAAuB3D,EAAmBmH,GAGhF,OAFA,GAAI3L,IAAI,2BAA0B0L,GAAYA,EAASf,YAAU,gBAAgBxC,EAAUqB,OAAM,KAE7FkC,GAAYvD,EAAUrC,MAAK,SAAA3B,GAAK,OAAAA,EAAEwG,aAAee,EAASf,cACnDe,GAGNlH,GAAQmH,IAAQxD,GAAaA,EAAUqB,OAAerB,EAAU,GAG9D,MAEX,EAbA,GCHA,4B,OAME,YAAAyD,UAAA,SAAUzD,EAAuB0D,GAE/B,IAAMC,EAASD,EAAKE,YAAcF,EAAKE,YAAYnB,gBAAaoB,EAG1DC,EFhByB,mBEgBRH,EACnB,GACCA,GAAU,GAEf,OAAO3D,EACJmC,QAAO,SAAAnG,GAAK,OAACA,EAAEoG,YACfD,QAAO,SAAAnG,GAAK,OAAC0H,EAAKK,WAAa/H,EAAE6G,wBAA0BiB,M,sCAdrDE,I,8CAAAA,EAAkB,U,EAH/B,GCcM,GAAM,EAAUzL,OAAO,SdYhB,GcVb,cA0BE,WACU0L,EACAC,EACAC,GAFA,KAAAF,MACA,KAAAC,iBACA,KAAAC,cAZF,KAAAC,OAAS,EAAmB/F,OAAe,MAC3C,KAAAgG,eAAiB,EAAmBhG,OAAe,MACnD,KAAAiG,mBAAqB,EAAmBjG,OAAe,MACvD,KAAAkG,cAAgB,EAAmBlG,OAAoB,MACvD,KAAAmG,kBAAoB,EAAmBnG,OAAiB,MAU9DzG,KAAK6M,wB,OAGC,YAAAA,sBAAR,sBAEE7M,KAAK8M,KAAO,OAAA9E,EAAA,GACVhI,KAAKqM,IAAI5E,MACTzH,KAAKwM,QACL,SAAC5K,EAAMF,GAAU,OAAAE,EAAKmE,MAAK,SAAAkC,GAAK,OAAAA,EAAE8E,QAAUrL,QAG9C,IAAMsL,EAAe,OAAAhF,EAAA,GACnBhI,KAAKyM,eACLzM,KAAKqM,IAAI3E,eACT,SAACqE,EAAQzI,GAAQ,UAAsBiI,qBAAqBjI,EAAKyI,MACnE/L,KAAKiN,MAAQ,OAAAC,EAAA,GAAMF,EAAchN,KAAK2M,eAAevJ,KACnD,OAAAkF,EAAA,GAAU,MACV,OAAAC,GAAA,MAGFvI,KAAK2H,WAAa,OAAAK,EAAA,GAChBhI,KAAKqM,IAAI1E,WACT3H,KAAKiN,OACL,SAAC3J,EAAK6J,GAAY,SAAKC,0BAA0B9J,EAAK6J,MACrD/J,KAAK,OAAAkF,EAAA,GAAU,IAAIzI,QAGtB,IAAMwN,EAAmB,OAAArF,EAAA,GACvBhI,KAAK0M,mBACL1M,KAAKqM,IAAI1E,YACT,SAACnI,EAAI4I,GAAc,OAAAA,EAAUrC,MAAK,SAAA3B,GAAK,OAAAA,EAAEwG,aAAepL,QAAK4D,KAC3D,OAAAmH,EAAA,IAAO,SAAAnG,GAAK,OAAK,MAALA,KACZ,OAAAkE,EAAA,GAAU,MACV,OAAAC,GAAA,MAEE+E,EAAY,OAAAJ,EAAA,GAAMG,EAAkBrN,KAAK4M,kBAAkBxJ,KAAK,OAAAmH,EAAA,IAAO,SAAAnG,GAAK,OAAM,OAANA,OAClFpE,KAAKuN,UAAY,OAAAvF,EAAA,GACfsF,EACAtN,KAAK2H,WACL3H,KAAKiN,MACLjN,KAAK8M,MACL,SAACnB,EAAUvD,EAAW3D,EAAMmH,GAAQ,OAAA4B,GAAkB9B,aAAaC,EAAUvD,EAAW3D,EAAMmH,MAC7FxI,KACC,OAAAkF,EAAA,GAAU,MACV,OAAAC,GAAA,MAGJvI,KAAKyN,OAAS,OAAAzF,EAAA,GACZhI,KAAKqM,IAAI3E,cACT1H,KAAKiN,MACLjN,KAAKqM,IAAI1E,WACT3H,KAAKuN,WACL,SAACpF,EAAO1D,EAAM2D,EAAW4B,GAAa,SAAKuC,YAAY1C,UAAU1B,EAAO1D,EAAM2D,EAAW4B,OAG7F,YAAA0D,KAAA,SAAKC,GACH3N,KAAK2N,OAASA,EAEd,GAAI1N,IAAI,4BAA4B6B,KAAK6C,UAAUgJ,GAAWA,GAC9D,IAAMC,EAAY5N,KAAK8M,KAAK1J,KAC1B,OAAAC,EAAA,IAAI,SAAA4E,GAAK,OAAA0F,EAAOxB,aAAelE,KAC/B,OAAAK,EAAA,GAAUqF,EAAOxB,YAAcwB,EAAOjM,QAElCmM,EAAa7N,KAAKiN,MAAM7J,KAC5B,OAAAC,EAAA,IAAI,SAAAe,GAAK,QAAEA,KACX,OAAA0J,GAAA,IAAK,SAACC,EAAKvJ,GAAU,OAAAuJ,GAAOvJ,KAAQmJ,EAAOK,gBACvCC,EAAcjO,KAAKuN,UAAUnK,KACjC,OAAAC,EAAA,IAAI,SAAAe,GAAK,QAAEA,KACX,OAAA8J,GAAA,GAAa,KACb,OAAA5F,EAAA,IAAWqF,EAAOQ,aAEdC,EAAW,OAAApG,EAAA,GAAc4F,EAAWK,EAAaJ,GACpDzK,KAAK,OAAAC,EAAA,IAAI,SAAAgF,GAAO,OAAAA,EAAI,IAAMA,EAAI,IAAMA,EAAI,OAS3C,OAPArI,KAAKqO,YAAYT,EAAWC,EAAYI,EAAaG,GAGrDpO,KAAKsO,mBAAmBX,EAAOjM,OAC/B1B,KAAKyM,eAAehL,KAAKkM,EAAOK,eAChChO,KAAK0M,mBAAmBjL,KAAKkM,EAAOQ,YAE7BC,GAGD,YAAAC,YAAR,SAAoBE,EAClBC,EACAC,EACAC,GACA,IAAMC,EAAO,GAAIhO,OAAO,Ud5Gf,Gc6GTX,KAAKiN,MAAMrH,WAAU,SAAAxB,GAAK,OAAAuK,EAAK1O,IAAI,kBAAiBmE,GAAKA,EAAE8E,OAAK,IAAK9E,MACrEpE,KAAK8M,KAAKlH,WAAU,SAAAqC,GAAK,OAAA0G,EAAK1O,IAAI,iBAAgBgI,GAAKA,EAAE8E,OAAK,IAAK9E,MACnEjI,KAAKuN,UAAU3H,WAAU,SAAAxB,GAAK,OAAAuK,EAAK1O,IAAI,sBAAqBmE,GAAKA,EAAEwG,YAAU,IAAKxG,MAClFpE,KAAK2H,WAAW/B,WAAU,SAAAxB,GAAK,OAAAuK,EAAK1O,IAAI,sBAAqBmE,GAAKA,EAAEqF,QAAM,IAAKrF,MAC/EpE,KAAKyN,OAAO7H,WAAU,SAAAxB,GAAK,OAAAuK,EAAK1O,IAAI,kBAAiBmE,GAAKA,EAAEqF,QAAM,IAAKrF,MACvEpE,KAAK4M,kBAAkBhH,WAAU,SAAAxB,GAAK,OAAAuK,EAAK1O,IAAI,uBAAsBmE,GAAKA,EAAEwG,gBAE5E,IAAMgE,EAAU,GAAIjO,OAAO,ednHpB,GcoHPX,KAAKyM,eAAe7G,WAAU,SAAAxB,GAAK,OAAAwK,EAAQ3O,IAAI,mBAAmBmE,EAAC,IAAKA,MACxEpE,KAAK0M,mBAAmB9G,WAAU,SAAAxB,GAAK,OAAAwK,EAAQ3O,IAAI,uBAAuBmE,EAAC,IAAKA,MAChFmK,EAAO3I,WAAU,SAAAxB,GAAK,OAAAwK,EAAQ3O,IAAI,YAAamE,MAC/CoK,EAAS5I,WAAU,SAAAxB,GAAK,OAAAwK,EAAQ3O,IAAI,aAAcmE,MAClDqK,EAAO7I,WAAU,SAAAxB,GAAK,OAAAwK,EAAQ3O,IAAI,aAAcmE,MAChDsK,EAAS9I,WAAU,SAAAxB,GAAK,OAAAwK,EAAQ3O,IAAI,YAAamE,OAMnD,YAAAkK,mBAAA,SAAmB5M,GACjB,GAAIzB,IAAI,eAAeyB,EAAK,KAC5B1B,KAAKwM,OAAO/K,KAAKC,IAEnB,YAAAmN,aAAA,SAAa7C,GACX,GAAI/L,IAAI,gBAAgB+L,EAAY5C,KAAI,KACxCpJ,KAAK2M,cAAclL,KAAKuK,IAE1B,YAAA8C,iBAAA,SAAiB9E,GACf,GAAI/J,IAAI,oBAAoB+J,EAASY,WAAU,KAC/C5K,KAAK4M,kBAAkBnL,KAAKuI,IAItB,YAAAoD,0BAAR,SAAkCrD,EAA0BiC,GAC1D,OAAOhM,KAAKsM,eAAeT,UAAU9B,EAAc,CAAEiC,YAAW,EAAEG,UAAWnM,KAAK2N,OAAOxB,a,sCAzJhF4C,GAAkB,6B,yBAAlBA,EAAkB,QAAlBA,EAAkB,Y,EAD/B,G,wGCZA,cAGE,WACUrM,GAAA,KAAAA,O,OAGV,YAAAsM,gBAAA,SAAgBC,EAAiBC,GAAjC,WACE,OAAOD,EAAS9K,QAAO,SAACC,EAAyBC,GAAM,OAAAD,EAAEhB,KACrD,OAAA+L,GAAA,IAAU,WACR,OAAK9K,EAAE+K,KACPF,EAAK7K,GACmB,EAAK3B,KAAKf,IAAI,+CAA+C0C,EAAE+K,MAFpE,cAAa,SAG7B,cAAa,K,sCAZbC,GAAgB,Y,yBAAhBA,EAAgB,QAAhBA,EAAgB,Y,EAD7B,GCAA,cAOE,WAAoB3M,GAAA,KAAAA,OAJpB,KAAAkF,OAAS,IAAIX,EAAA,EAEL,KAAAqI,sBAAyC,IAAIpO,EAAA,EAGnDlB,KAAKuP,gBAAkBvP,KAAKsP,sBAAsBlO,eAClDpB,KAAK4H,OAAS5H,KAAKuP,gBAAgBnM,KACjC,OAAAC,EAAA,IAAI,WAAM,YACV,OAAAiF,EAAA,IAAU,IAEZtI,KAAK4H,OAAOxE,KAAK,OAAAoM,GAAA,IAAI,SAAA9F,GAAK,OAAAjJ,EAAIR,IAAI,yBAAyByJ,OAAO9D,Y,OAG7D,YAAA6J,mBAAP,SAA0BC,GAA1B,WACE1P,KAAK0C,KAAKf,IAAepB,yEAAuFmP,GAC7G9J,WAAU,SAAAsB,GAAQ,SAAKoI,sBAAsB7N,KAAKyF,O,sCAjB5CyI,GAAqB,Y,yBAArBA,EAAqB,QAArBA,EAAqB,Y,EADlC,G,0BCTA,gBACE,iCACA,eAAM,QAA8C,OACtD,Q,kBAFwB,qCAChB,2F,0BAER,cACE,mBACF,Q,kBAD2D,+CCM3D,kBAeE,WACUC,EACAvD,EACAwD,GAHV,WACU,KAAAD,YACA,KAAAvD,MACA,KAAAwD,YARV,KAAAC,mBAAqB,GACrB,KAAAC,OAAQ,EAEA,KAAAC,cAAgC,GAOtChQ,KAAKgQ,cAAc7P,KACjBH,KAAKqM,IAAIkD,gBAAgB3J,WAAU,SAAAwJ,GACjC,EAAKU,mBAA6B,EAAKD,UAAUI,+BAA+Bb,GAChF,EAAKW,OAAQ,MAGjB/O,OAAOkP,eAAe/O,eAAeiC,KACnC,OAAA8K,GAAA,GAAa,MACZtI,WAAU,WAAM,SAAKuK,a,OAG1B,YAAAA,QAAA,WACEnQ,KAAKgQ,cACFlF,SAAQ,SAAAsF,GAAO,OAAAA,EAAIC,iBACtB7P,QAAQC,IAAI,eAAgBT,KAAKgQ,gBAGnC,YAAAM,SAAA,sBACMC,GAAoB,EACxBvQ,KAAKqM,IAAIoD,mBAAmBzP,KAAK0P,cAEjC1P,KAAKgQ,cAAc7P,KAAK,OAAAqQ,GAAA,GAAUxP,OAAQ,WAAWoC,KAGnD,OAAAmH,EAAA,IAAO,WAAM,OAACgG,KAGd,OAAAlN,EAAA,IAAI,SAACoN,GACH,IACE,OAAO3O,KAAKC,MAAM0O,EAAIC,MACtB,MAAOxR,GACP,WAKJ,OAAAqL,EAAA,IAAO,SAAAmG,GAAQ,OAAAA,GACVzO,OAAOyO,EAAK1O,YAAcM,EAAON,YACjB,YAAhB0O,EAAKC,UAGV,OAAAtN,EAAA,IAAI,SAAAqN,GAAQ,OAAA3Q,OAAO6Q,OAAOF,EAAKzB,aAG/B,OAAA1E,EAAA,IAAO,SAAA0E,GACL,IAAM4B,EAAuB5B,EAC1B9K,QAAO,SAACC,EAAGC,GAAM,OAAGD,EAAC,MAAOC,EAAUyM,YAAW,OAAM,IAM1D,OAAOC,QAJK,6CAElBF,EAAoB,4FAKhB,OAAA1B,GAAA,IAAU,SAAAF,GAGR,OAFAsB,GAAoB,EACpB,EAAKS,cAAe,EACb,EAAKpB,UAAUZ,gBAAgBC,GAAU,SAAAgC,GAAK,SAAKC,eAAiBD,QAG7E,OAAAzB,GAAA,IAAI,WACF,EAAKwB,cAAe,EACpBG,MAAM,sCACNnQ,OAAOoQ,IAAI/K,SAASC,aAGrBV,UAAU,MAAM,WACf,EAAKoL,cAAe,EACpBG,MAAM,sBACNZ,GAAoB,O,sCArFfc,GAAkB,8B,uBAAlBA,EAAkB,oRDhB/B,uBAIA,wB,MAJsB,4BAIjB,+B,+fCOL,G,0BCPE,cACE,aAAI,gBAAK,OACT,aACE,aAAI,QAAgE,OACpE,aAAI,Q,gBAA8D,OAClE,aAAI,SAAmE,OACvE,cAAI,SAAmD,OACvD,cAAI,SAAgH,OACtH,OACF,Q,oBANQ,6HACA,iHACA,mIACA,wEACA,wI,sCAYJ,oBAAiC,sF,oBAC/B,mBAAU,gBAAK,OACjB,O,KAFqE,8C,sCAGrE,oBAA0D,2D,oBACxD,mBAAU,gBAAK,OACjB,O,qBAF6E,0E,0BASzE,Q,2DAAA,yM,yBAcI,iB,4BAAuE,6C,uBACvE,iBACE,mBAAU,eAAI,OAChB,Q,sHATJ,iBAGE,4FAA2B,6DAE3B,iBACE,wBACA,wBAGF,OACA,iBAAqB,eAAM,QAAkB,OAAO,OAEpD,iBACE,eAAM,QAAU,OAClB,OACF,O,oCAfE,wFACA,qBAIO,0DACA,0DAIoB,mCAER,yEACX,sB,sCAKV,iBAA8C,oDAAa,iB,oBACzD,iBACE,iBACE,mBAAU,kBAAO,OACnB,OACF,OACA,iBACE,eAAM,Q,oBAAwC,OAChD,OACF,O,MAT0E,iDAOhE,kD,sCAGV,iBAA8C,oDAAa,W,oBACzD,iBACE,iBACE,mBAAU,eAAI,OAChB,OACF,OACA,iBACE,eAAM,Q,oBAAqC,OAC7C,OACF,O,MAToE,8CAO1D,+C,0BAtCZ,iBAEE,0B,gBAmBA,yBAUA,yBAUF,Q,kBAnC6B,0CAeF,oCAUA,qC,yBAuBnB,iB,4BAAuE,6C,uBACvE,iBACE,mBAAU,uBAAY,OACxB,Q,sCAXJ,iBAGE,4GAA2C,6D,oBAI3C,iBACE,wBACA,wBAGF,OACA,iBACE,eAAM,QAAW,OACnB,OACF,O,oCAfE,kHACA,uEAMO,0DACA,0DAIY,yEACX,uB,0BAfZ,iBACE,yBAiBF,Q,kBAZI,iC,sBAmBJ,yB,yBAOI,iB,4BAAuE,6C,uBAErE,mBAA4B,wBAAa,Q,uBACzC,mBAA6B,qBAAU,Q,0BAFzC,iBACE,4BACA,4BACF,Q,mBAFY,iCACA,mC,2EAThB,iBAGE,uFAEA,iBACE,wBACA,wBAIF,OACA,iBACE,eAAM,QAAU,OAClB,OACF,O,oCAdE,wFACA,4DAIO,0DACA,0DAKY,wEACX,sB,sCAGV,iBAAmF,oDAAa,U,oBAC9F,iBACE,iBACE,mBAAU,mBAAQ,OACpB,OACF,OACA,iBACE,eAAM,Q,oBAAoC,OAC5C,OACF,O,MATwG,6CAO9F,8C,0BA1Bd,qB,oBACE,iBACE,gC,gBACA,yBAgBA,yBAUF,OACF,Q,kBA9B+C,+EAEJ,mDAKrC,oCAYuB,0F,0BAc/B,kBAAmF,QAAyK,Q,kBAAzK,uL,yBACnF,2B,kBAAkE,kC,wEC7HhE,GAAM,EAAU1Q,OAAO,UpBMhB,GoBJb,cA0DE,WACU0L,EACDtL,EACCuQ,GAFA,KAAAjF,MACD,KAAAtL,QACC,KAAAuQ,QAlDV,KAAAC,YAAa,EAMb,KAAAC,cAAe,EAGf,KAAAC,eAAgB,EAOhB,KAAAC,SAAW,EAMX,KAAAC,0BAA2B,EAMnB,KAAAC,SAAW,EAAmBnL,QAAgB,GAKtD,KAAAoL,iBAAkB,EAEX,KAAAC,WpBxCW,EoBiDlB,KAAA/B,OAAQ,EASN/P,KAAK+R,OAA+B/Q,OAAOgR,aAAcD,OACzD,IAAME,EAAWjS,KAAK+R,OAAOG,+BAE7BlS,KAAKmS,KAAKF,GACVjS,KAAKoS,mB,OAGP,YAAA9B,SAAA,WACEtQ,KAAKqS,wCAIC,YAAAF,KAAR,SAAaF,GACXjS,KAAK8R,UAAYG,EAASK,MAC1B,EAAIxR,wBAAwBmR,EAASK,OAGrCtS,KAAKqM,IAAIzD,aAAaqJ,EAAS9F,WAG/B,IAAMoG,EAAYvS,KAAKe,MAAM2M,KAAKuE,GAClCjS,KAAKwS,gBAAgBD,GACrBvS,KAAKyS,qBAAqBR,GAC1BjS,KAAK4R,SAASnQ,MAAK,IAGb,YAAA2Q,iBAAR,aASQ,YAAAI,gBAAR,SAAwBD,GAAxB,WACQG,EAAYH,EAAUnP,KAAK,OAAAmH,EAAA,IAAO,SAAAnG,GAAK,QAAEA,MAG/CpE,KAAK4H,OAAS,OAAAI,EAAA,GACZhI,KAAKqM,IAAIzE,OACT5H,KAAK4R,UACL,SAAClI,EAAGiJ,GAAM,OAAAjJ,IAAMiJ,KAGlB3S,KAAKyH,MAAQzH,KAAKqM,IAAI5E,MAGtB,IAAMmL,EAAiB,OAAA1F,EAAA,GAAMlN,KAAKe,MAAMkM,MAAOjN,KAAKe,MAAM+L,MAAM1J,KAAK,OAAAmH,EAAA,IAAO,SAAAnG,GAAK,QAAEA,MACnF,OAAA4D,EAAA,GAAc4K,EAAgBF,GAAW9M,WAAU,SAAAQ,GAAK,SAAKyM,eAG7D,OAAA7K,EAAA,GAAchI,KAAKqM,IAAI1E,WACrB3H,KAAKqM,IAAI3E,cACT1H,KAAKqM,IAAI5E,MACTzH,KAAKqM,IAAIzE,OAAOxE,KAAK,OAAAmH,EAAA,IAAO,SAAAb,GAAK,QAAEA,OACnC,SAACtB,EAAWhC,EAAGxE,GACb,GAAI3B,IAAI,iEACV,EAAKwR,cAAgB,EAAKtF,UACD,IAArB/D,EAAUqB,OACgD,IAA1D7H,EAAK2I,QAAO,SAAAtC,GAAK,OT/IK,IS+ILA,EAAE8E,SAA4BtD,UAClD7D,YAGH5F,KAAK8S,kBAAoB,OAAA9K,EAAA,GACvBhI,KAAKe,MAAM4G,WACX3H,KAAKe,MAAMwM,WACX,SAACjK,EAAKqI,GAAa,QAAErI,GAAOqI,MAAWvI,KACvC,OAAAkF,EAAA,IAAU,IAIZtI,KAAKe,MAAMwM,UAAUnK,KACnB,OAAAmH,EAAA,IAAO,SAAAnG,GAAK,QAAEA,KACd,OAAA2O,EAAA,GAAUL,IACT9M,WAAU,SAAAxB,GAAK,SAAK4O,gBAAgB5O,OAIjC,YAAAiO,qCAAR,sBACErS,KAAKe,MAAM+L,KAAKlH,WAAU,SAAAqC,GAAK,SAAK2D,IAAM3D,KAC1CjI,KAAKe,MAAM4G,WAAW/B,WAAU,SAAAxB,GAAK,SAAKgE,UAAYhE,KACtDpE,KAAKe,MAAMwM,UAAU3H,WAAU,SAAAxB,GAAK,SAAK4F,SAAW5F,KACpDpE,KAAKe,MAAM0M,OAAO7H,WAAU,SAAAxB,GAAK,SAAK+D,MAAQ/D,KAC9CpE,KAAKe,MAAMkM,MAAMrH,WAAU,SAAAxB,GAAK,SAAK4H,YAAc5H,KAEnDpE,KAAK4H,OAAOhC,WAAU,SAAA8D,GAAK,SAAKqG,MAAQrG,KACxC,OAAAwD,EAAA,GACElN,KAAK4H,OACL5H,KAAKe,MAAM+L,KACX9M,KAAKe,MAAMkM,MACXjN,KAAKe,MAAM0M,OACXzN,KAAKe,MAAMwM,UACXvN,KAAKe,MAAM4G,YACT/B,WAAU,WAAM,SAAK0L,MAAM2B,oBAIzB,YAAAR,qBAAR,SAA6B9E,GAC3B3N,KAAKkT,kBAAoBvF,EAAOwF,WAChCnT,KAAK2R,yBAA2BhE,EAAOyF,eACvCpT,KAAKmM,UAAYwB,EAAOxB,UACxBnM,KAAKqT,aAAerT,KAAKmM,WAAawB,EAAO0F,aAC7CrT,KAAKwR,aAAe7D,EAAO2F,KAAKC,UAChCvT,KAAK6R,gBAAkBlE,EAAOwF,WAC9BnT,KAAKuR,WAAkC,MAArB5D,EAAOQ,YAI3B,YAAAqF,OAAA,WAAiBxT,KAAK+R,OAAOyB,UAE7B,YAAAC,IAAA,SAAI9C,GAAwB3Q,KAAK+R,OAAO0B,IAAI9C,IAE5C,YAAA+C,gBAAA,SAAgB1J,GAAsBhK,KAAK+R,OAAO4B,YAAY3J,EAASY,WAAYZ,EAASZ,MAAM,IAKlG,YAAAwK,UAAA,SAAUC,EAAaC,GACrBtT,QAAQC,IAAI,eACRoT,GAAUA,EAAO9G,QAAU+G,EAAM/G,MAAO/M,KAAK6S,YAC5C7S,KAAK+T,UAAUD,IAMtB,YAAAE,kBAAA,SAAkBH,EAAqBC,GACjCD,GAAUA,EAAOhJ,aAAeiJ,EAAMjJ,WAAY7K,KAAK6S,YACtD7S,KAAKiU,eAAeH,IAM3B,YAAAI,eAAA,SAAelK,GACbhK,KAAKe,MAAM+N,iBAAiB9E,IAItB,YAAAiK,eAAR,SAAuBjI,GACrB,GAAI/L,IAAI,wBAAwB+L,EAAY5C,KAAI,eAAepJ,KAAKkT,mBAChElT,KAAKkT,mBACTlT,KAAKe,MAAM8N,aAAa7C,IAG1B,YAAA6G,UAAA,sBACE,GAAI5S,IAAI,eAER,OAAAkU,EAAA,GAAM,KAAKxL,YAAY1J,MAAK,SAAAmH,GAAK,SAAKsL,SAAW,MAI3C,YAAAqC,UAAR,SAAkBK,GAAlB,WAGQC,EAAOD,EAAOE,mBACpB,GAAIrU,IAAI,mBAAmBmU,EAAOrH,MAAK,qBAAqB/M,KAAK6R,gBAAe,aAAawC,GACzFrU,KAAK6R,kBAGT7R,KAAK4R,SAASnQ,MAAK,GACnBzB,KAAK+R,OAAOwC,YAAY,kBACJvU,KAAKqM,IAAI7D,UAAU4L,EAAOrH,MAAMyH,WAAYH,GAGlDpV,KADVoV,EACe,WACf,GAAIpU,IAAI,oCAER,GAAIA,IAAI,6BACR,EAAK8R,OAAO0C,kBACTxV,MAAK,SAAAyV,GAAa,SAAKvC,KAAKuC,OAGhB,WAAM,OAAA1T,OAAOtB,OAAO2G,SAASC,aAO1C,YAAA0M,gBAAR,SAAwB5O,GAAxB,WACE,GAAInE,IAAI,mBAAmBmE,EAAEwG,WAAU,cAAc5K,KAAKqT,cAC1DrT,KAAK4R,SAASnQ,MAAK,GACnBzB,KAAK+R,OACF4B,YAAYvP,EAAEwG,WAAYxG,EAAEgF,MAAM,GAClCnK,MAAK,SAAAmH,GAAK,SAAKwL,SAASnQ,MAAK,O,sCArPvBkT,GAAuB,8B,uBAAvBA,EAAuB,swC,GAAA,MDxBpC,gBAGE,yBAYA,6BAGA,gBAGE,gBACE,0BAGA,0BAGF,OAGA,0BAAe,+DACb,kBACE,+BAOA,wBA4CA,2CAqBF,OAGA,6BA+BF,OAEA,0BACA,mCACF,OACF,Q,oBA7IO,iCAYa,gDAAsC,wBAItD,6CAGkB,gCAGuB,kCAM1B,yCASN,kCAAmC,cAoEjC,qDAiCsB,iEAClB,oE,4qvGC3HnB,G,kWCpBA,8BCgBA,mBASE,WACS/K,EACCzH,EACRyS,EACAC,EACAnS,GALF,MAOE,YAAMkS,EAAIC,EAAQC,aAAa,CAAEC,IAAKzS,EAAOF,oBAAqB,IAAM,K,OANjE,EAAAwH,YACC,EAAAzH,SAMRyH,EAAUoL,SAASxO,GAEnB9D,EAAKf,IAAgCpB,uCAAgC+B,EAAOZ,SACzEkE,WAAU,SAAAqP,GACT,IAAMC,EAAOD,EAAOE,QAAQC,SAC5BxL,EAAUyL,ehBpCe,MgBqCzBzL,EAAU0L,IAAcJ,EAAKK,QClClBC,MAAM,KAAK,IDmCtB,EAAKC,gB,SAnBqB,QAuBxB,YAAAA,WAAR,WACEzV,KAAKP,KAAO6C,EAAOH,SACnB1B,EAAIR,IAAI,YAAYD,KAAKP,KAAI,KAC7B,IAAMiW,EAA6B1U,OAAOgR,aACxB,iBAAdhS,KAAKP,MACPO,KAAKmC,OAAOwT,KAAK,GAAkBC,cAChChQ,WAAU,WAAM,OAAA8P,EAAM3D,OAAO8D,W,sCA7BzBC,GAAY,oD,uBAAZA,EAAY,wGDrBzB,uC,KAAqB,sD,mECgBrB,CAKkC,K,0BEdlC,4B,8BAYaC,I,oDAAAA,IAAU,UANV,CACT,GACA,GACA,IACD,SATQ,CACP,IACA,Q,EAHJ,G,aCDA,4B,8BAeaC,I,oDAAAA,IAAe,UAJf,CACT,IACD,SAZQ,CACP,IACA,S,EAHJ,GCIMC,GAAmB,CACvB,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KAGF,4B,8BAKaC,I,oDAAAA,IAAc,SAJhBD,GAXT,IACA,IACA,IACA,IACA,KACA,KACA,KACA,O,EAGF,GCJA,4B,8BA2BaE,I,oDAAAA,IAAoB,UAVpB,CACT,GACA,IACD,SAhBQ,CACP,IACA,KACA,KACA,KACA,GACA,KACA,GACA,IACA,KACA,GACA,Q,EAfJ,GCPA,4B,8BAsBaC,I,oDAAAA,IAAmB,UAVnB,CACT,GACD,SAVQ,CACP,IACA,IACA,KACA,IACA,KACA,O,EAVJ,GCIO,SAASC,GAAkB3T,GAChC,IAAM4T,EAAS,IAAI,IAAoB5T,EvBTf,UACG,OuBU3B,OADAjC,EAAIR,IAAI,2BAA4BqW,GAC7BA,EAGT,gC,8BAwBaC,EAAS,WAFR,M,oDAEDA,IAAS,UAJT,CAAE,KACZ,SAhBQ,CACP,IACA,IACA,IACA,GACA,IAAgBC,QAAQ,CACtBF,OAAQ,CACNG,QAAS,IACTC,WAAYL,GACZM,KAAM,CAAC,QAGX,GACA,O,EAlBJ,GCVE,cAGFlW,EAAIR,IAAI,mBAGR,IAAM2W,GAAW,eAsBM5V,OAAOkP,eAAiB,EAAe7O,uBAG/CF,eAAeiC,KAC5B,OAAAkF,EAAA,IAAU,IACT1C,WAAU,WAAM,OAzBnB,WACEnF,EAAIR,IAAI,UAER,IAEO2W,GAASC,WACZD,GAASzG,UACX,MAAOjR,GACPsB,QAAQC,IAAI,yBAA0BvB,GAKxC,MAAyB4X,gBAAgB,IACtC7X,MAAK,WAAM,OAAA+B,OAAO+V,cAAgB/V,OAAO+V,kBACzCC,OAAM,SAAAC,GAAO,OAAAzW,QAAQuC,MAAM,wBAAyBkU,MAUtCvJ,Q","file":"main.608bf4c798c913b529da.js","sourcesContent":["\r\nexport const historyApiRoot = `eav/entities`;\r\n\r\nexport * from './version-dto';\r\nexport * from './version';\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","import { Constants } from './constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\n\r\nexport class Log {\r\n  /** global state to determine if logging to console should be done or not */\r\n  public static forceLogToConsole = false;\r\n\r\n  name = '';\r\n  autoDump = DebugConfig.logger.logToConsole;\r\n  logs = new Array<string>();\r\n  parent: Log;\r\n  loggers: any = new Object();\r\n\r\n  constructor (name?: string, parent?: Log) {\r\n    this.name = name;\r\n    this.parent = parent;\r\n  }\r\n\r\n  add(msg: string, ...args: any[]): void {\r\n    this.logs.push(msg);\r\n    if (this.name) msg = this.name + ':' + msg;\r\n    if (this.parent) this.parent.logs.push(msg);\r\n    if (this.autoDump || Log.forceLogToConsole) {\r\n      arguments[0] = Constants.logName + ': ' + msg;\r\n      console.log.apply(null, arguments);\r\n    }\r\n  }\r\n\r\n  subLog(name: string, autoDump?: boolean): Log {\r\n    const newLog = new Log(name, this);\r\n    this.loggers[name] = newLog;\r\n    newLog.autoDump = typeof(autoDump) === 'boolean'\r\n      ? autoDump : this.autoDump;\r\n    if (DebugConfig.logger.internals)\r\n      this.add(`logger: subLog(${name}, ${autoDump}) resulting in autoDump=${newLog.autoDump}`);\r\n\r\n    return newLog;\r\n  }\r\n\r\n  dump(): void {\r\n    this.add('dumping to console');\r\n    console.log(`Log dump for '${this.name}'`, this);\r\n  }\r\n\r\n  public static configureRuntimeLogging(state: boolean) {\r\n    if(DebugConfig.logger.urlDebugActivatesLive)\r\n      Log.forceLogToConsole = state;\r\n  }\r\n}\r\n\r\n\r\nexport const log = new Log();\r\n\r\nwindow['logger'] = log;\r\n","\r\n/** configuration what to debug directly to the screen and what to keep secret */\r\nexport const DebugConfig = {\r\n\r\n  /** logger configuration */\r\n  logger: {\r\n    /** should we stream messages directly to console */\r\n    logToConsole: false,\r\n    /** should we also log internal events */\r\n    internals: false,\r\n    /** allow url param ?debug=true to turn on logging */\r\n    urlDebugEnablesAll: true,\r\n    /** if url param ?debug=true also enables all live-logging */\r\n    urlDebugActivatesLive: true\r\n  },\r\n\r\n  /** api debugging */\r\n  api: {\r\n    enabled: false,\r\n    streams: false,\r\n  },\r\n\r\n  /** template picker */\r\n  picker: {\r\n    enabled: false,\r\n    streams: false,\r\n    showDebugPanel: false\r\n  },\r\n\r\n  /** template state */\r\n  state: {\r\n    enabled: false,\r\n    streams: false,\r\n    inits: false,\r\n  },\r\n\r\n  /** content-type processor */\r\n  typeProcessor: false,\r\n  /** template processor */\r\n  templateProcessor: false,\r\n};\r\n","import { Subject } from 'rxjs';\r\nimport { log as parentLog } from './log';\r\n\r\nconst log = parentLog.subLog('boot-controller');\r\n/**\r\n * Special reboot controller, to restart the angular app\r\n * when critical parameters were changed\r\n */\r\nexport class BootController {\r\n  private static instance: BootController;\r\n  private _reboot: Subject<boolean> = new Subject();\r\n  rebootRequest$ = this._reboot.asObservable();\r\n\r\n  static getRebootController() {\r\n    log.add('getRebootController()');\r\n    if (!BootController.instance) {\r\n      BootController.instance = new BootController();\r\n    }\r\n    return BootController.instance;\r\n  }\r\n\r\n  public reboot() {\r\n    log.add('restarting...');\r\n    this._reboot.next(true);\r\n  }\r\n}\r\n","import { SxcRoot } from '../../../sxc-typings';\r\n\r\ndeclare const $2sxc: SxcRoot;\r\n\r\nexport class Config {\r\n  static appId = () => get('appId');\r\n  static apps = () => get('apps');\r\n\r\n  static item = () => JSON.parse(req('items'))[0];\r\n\r\n  static moduleId = () => Number(req('mid'));\r\n  static cbId = () => Number(req('cbid'));\r\n  static dialog = () => req('dialog');\r\n\r\n  static getSxcInstance = () => $2sxc(Config.moduleId(), Config.cbId());\r\n}\r\n\r\n\r\nfunction req(key) { return $2sxc.urlParams.require(key); }\r\n\r\nfunction get(key) { return $2sxc.urlParams.get(key); }\r\n","\r\nimport { map } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ReplaySubject, Observable } from 'rxjs';\r\nimport { Config } from '../config';\r\nimport { VersionDto, Version, historyApiRoot, VersionData, EntityJsonDto } from '.';\r\n\r\n@Injectable()\r\nexport class SxcVersionsService {\r\n  versions: Observable<Version[]>;\r\n  error: Observable<string>;\r\n\r\n  private versionsSubject: ReplaySubject<Version[]>;\r\n  private errorSubject: ReplaySubject<string>;\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) {\r\n    this.versionsSubject = new ReplaySubject<Version[]>(1);\r\n    this.versions = this.versionsSubject.asObservable();\r\n\r\n    this.errorSubject = new ReplaySubject<string>(1);\r\n    this.error = this.errorSubject.asObservable();\r\n\r\n    this.loadVersions();\r\n  }\r\n\r\n  restore(changeId: number): Observable<void> {\r\n    const appId = Config.appId();\r\n    const item = Config.item();\r\n    const url = `${historyApiRoot}/restore?appId=${appId}&changeId=${changeId}`;\r\n\r\n    return this.http.post<void>(url, item);\r\n  }\r\n\r\n  private loadVersions(): void {\r\n    const appId = Config.appId();\r\n    const item = Config.item();\r\n    const url = `${historyApiRoot}/history?appId=${appId}`;\r\n\r\n    this.http.post<VersionDto[]>(url, item)\r\n      .pipe(\r\n        map(all =>\r\n          all.map((ver) => ({\r\n            ChangeSetId: ver.ChangeSetId,\r\n            HistoryId: ver.HistoryId,\r\n            Data: convertVersionJsonToData(ver, findPrevious(all, ver)),\r\n            TimeStamp: formatTimestamp(ver.TimeStamp),\r\n            User: ver.User,\r\n            VersionNumber: ver.VersionNumber,\r\n          } as Version)\r\n        ))\r\n      )\r\n      .subscribe(\r\n        v => this.versionsSubject.next(v),\r\n        () => { this.errorSubject.next('Could not load versions.'); }\r\n      );\r\n  }\r\n}\r\n\r\n\r\n/** Take the multi-level Attributes and flatten for use in the UI */\r\nfunction convertVersionJsonToData(v: VersionDto, prevAttrs: any[]): VersionData[] {\r\n  const attrs = (JSON.parse(v.Json) as EntityJsonDto).Entity.Attributes;\r\n\r\n  return Object.entries(attrs)\r\n    .reduce((t, c) => Array.prototype.concat(t,\r\n      Object.entries(c[1])\r\n        .map(([key, value]) => ({\r\n          key,\r\n          value: Object.entries(value),\r\n          type: c[0],\r\n          hasChanged: prevAttrs && JSON.stringify(prevAttrs[c[0]][key]) !== JSON.stringify(value),\r\n        } as VersionData))\r\n      ), []);\r\n}\r\n\r\n\r\nfunction findPrevious(all: VersionDto[], v: VersionDto) {\r\n  const prevVersion = all.find(v2 => v2.VersionNumber === v.VersionNumber - 1);\r\n  const prevVerAttrs = prevVersion && (JSON.parse(prevVersion.Json) as EntityJsonDto).Entity.Attributes;\r\n  return prevVerAttrs;\r\n}\r\n\r\nfunction formatTimestamp(timestamp: string) {\r\n  const date = new Date(timestamp);\r\n  const y = date.getFullYear();\r\n  const m = date.getUTCMonth() + 1;\r\n  const d = date.getDate();\r\n  const h = date.getHours();\r\n  const min = date.getMinutes();\r\n  return `${y}-${m < 10 ? '0' : ''}${m}-${d < 10 ? '0' : ''}${d} ${h < 10 ? '0' : ''}${h}:${min < 10 ? '0' : ''}${min}`;\r\n}\r\n","<!-- dialog header -->\r\n<mat-toolbar color=\"primary\">\r\n  <span class=\"title\">{{\"ItemHistory.Title\" | translate}}</span>\r\n  <span class=\"spacer\"></span>\r\n  <button mat-dialog-close mat-icon-button>\r\n    <mat-icon class=\"example-icon\">close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n\r\n<!-- list of versions -->\r\n<div class=\"table\">\r\n  <div class=\"no-items\" *ngIf=\"sxcVersion.error | async\">{{'ItemHistory.NoHistory' | translate}}</div>\r\n  <div class=\"no-items\" *ngIf=\"(sxcVersion.versions | async)?.length === 0\">{{'ItemHistory.NoHistory' | translate}}</div>\r\n  <div class=\"record\" *ngFor=\"let version of sxcVersion.versions | async\">\r\n    <mat-expansion-panel>\r\n      <!-- version header -->\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title fxFlex=\"108px\">{{\"ItemHistory.Version\" | translate:({version:version.VersionNumber})}}</mat-panel-title>\r\n        <mat-panel-description>{{version.TimeStamp}}</mat-panel-description>\r\n      </mat-expansion-panel-header>\r\n\r\n      <!-- version body -->\r\n      <!-- use ng-template to ensure lazy initialization, otherwise it's slow with a lot of data -->\r\n      <ng-template matExpansionPanelContent>\r\n        <div class=\"detail\">\r\n          <div fxLayout=\"row\" *ngFor=\"let data of version.Data\" [class.changed]=\"data.hasChanged\">\r\n            <div fxFlex=\"160px\" class=\"label\">{{data.key}}:</div>\r\n            <!-- expandable value details -->\r\n            <div fxFlex [class.expand]=\"data.expand\" class=\"value\" title=\"expand content\" (click)=\"data.expand=!data.expand\">\r\n              <div class=\"lang-wrapper\" *ngFor=\"let val of data.value\">\r\n                <div *ngIf=\"data.value.length > 0\" class=\"lang\">{{val[0]}}</div>\r\n                <div [innerHTML]=\"val[1]\"></div>\r\n              </div>\r\n            </div>\r\n            <div flex=\"nogrow\" *ngIf=\"data.value.length > 1\">\r\n              <i *ngFor=\"let val of data.value\">[{{val[0]}}]&nbsp;</i>\r\n            </div>\r\n            <i flex=\"nogrow\">[{{data.type}}]</i>\r\n          </div>\r\n        </div>\r\n        <mat-action-row>\r\n          <button mat-button (click)=\"restoreLive(version)\">{{'ItemHistory.Buttons.RestoreLive' | translate}}</button>\r\n        </mat-action-row>\r\n      </ng-template>\r\n    </mat-expansion-panel>\r\n  </div>\r\n</div>\r\n\r\n","import { Component } from '@angular/core';\r\nimport { SxcVersionsService } from './sxc-versions.service';\r\nimport { Version } from './version';\r\n\r\n@Component({\r\n  selector: 'app-history',\r\n  templateUrl: './history.component.html',\r\n  styleUrls: ['./history.component.scss'],\r\n})\r\nexport class HistoryComponent {\r\n  // versions: Version[] = [];\r\n  // versionParam: any;\r\n\r\n  constructor(\r\n    public sxcVersion: SxcVersionsService\r\n  ) { }\r\n\r\n  restoreLive(version: Version) {\r\n    this.sxcVersion.restore(version.ChangeSetId)\r\n      .subscribe(_ => window.parent.location.reload());\r\n  }\r\n}\r\n  // 2020-07-28 2dm turned off, not used anywhere ATM\r\n  // Might be activated some time, but not now\r\n  // restoreDraft(version) {\r\n  //   this.dialog.open(ConfirmRestoreDialog, {\r\n  //     data: { version, isDraft: true },\r\n  //   }).afterClosed()\r\n  //     .subscribe(res => res ? alert('restoring draft') : undefined);\r\n  // }\r\n// }\r\n//\r\n// @Component({\r\n//   selector: 'confirm-restore-dialog',\r\n//   template: `\r\n//     <div class=\"content\">\r\n//       <div class=\"title\">Restoring {{data.isDraft ? 'draft' : 'live'}} to version <b>{{data.version.ChangeSetId}}</b>.</div>\r\n//       <div fxLayout=\"row\">\r\n//         <button mat-button [mat-dialog-close]=\"false\">abort</button>\r\n//         <span fxFlex></span>\r\n//         <button mat-raised-button [mat-dialog-close]=\"true\">proceed</button>\r\n//       </div>\r\n//     </div>\r\n//   `,\r\n// })\r\n// export class ConfirmRestoreDialog {\r\n//   constructor(\r\n//     public dialogRef: MatDialogRef<ConfirmRestoreDialog>,\r\n//     @Inject(MAT_DIALOG_DATA) public data: any\r\n//   ) { }\r\n// }\r\n","/* Constants for i18n */\r\n\r\nexport const PrimaryUiLanguage = 'en';\r\nexport const SupportedLanguages = ['en', 'de', 'es', 'fr', 'it', 'uk'];\r\nexport const i18nPrefix = 'TemplatePicker.LayoutElement';\r\n// todo: note there is another prefix ItemHistory... which will be removed soon\r\nexport const pathToI18n = './i18n/';\r\nexport const i18nExtension = '.js';\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n// Todo: probably not needed any more, since now Subjects are automatically observables\r\nexport class BehaviorObservable<T> extends Observable<T> {\r\n  private constructor() {\r\n    super();\r\n  }\r\n  /** The source subject */\r\n  subject: BehaviorSubject<T>;\r\n\r\n  /** will reset back to the initial value */\r\n  reset: () => void;\r\n\r\n  /** check if it's the initial object */\r\n  isInitial: () => boolean;\r\n\r\n  /** the initial object */\r\n  initialValue: T;\r\n\r\n  /** shorthand to push next value */\r\n  next: (value: T) => void;\r\n\r\n  static create<T>(initialValue: T): BehaviorObservable<T> {\r\n    const subj = new BehaviorSubject<T>(initialValue);\r\n    const obs = subj.asObservable() as BehaviorObservable<T>;\r\n    obs.initialValue = initialValue;\r\n    obs.subject = subj;\r\n    obs.reset = () => {\r\n      obs.subject.next(obs.initialValue);\r\n    };\r\n    obs.isInitial = () => {\r\n      return obs.subject.value === obs.initialValue;\r\n    };\r\n    obs.next = (value: T) => obs.subject.next(value);\r\n    return obs;\r\n  }\r\n}\r\n","export class App {\r\n    AppId: number;\r\n    Name: string;\r\n    Thumbnail: string;\r\n    SupportsAjaxReload: boolean;\r\n    Version: string;\r\n    VersionMain: number;\r\n\r\n    constructor(json: any) {\r\n        Object.assign(this, json);\r\n\r\n        try {\r\n            this.VersionMain = parseInt(this.Version.substr(0,2));\r\n        } catch(e) { /* ignore */}\r\n    }\r\n\r\n}\r\n","import { combineLatest } from 'rxjs';\r\nimport { map, startWith, share } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { App } from 'app/core/app';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { Config } from '../config';\r\n\r\nconst log = parentLog.subLog('api', DebugConfig.api.enabled);\r\nconst uninitializedList = []; // this must be created as a variable, so we can check later if it's still the original or a new empty list\r\n@Injectable()\r\nexport class PickerService {\r\n  // #region public properties\r\n  /** all apps of the zone */\r\n  apps$ = BehaviorObservable.create<App[]>(uninitializedList);\r\n\r\n  /** all types of this app */\r\n  contentTypes$ = BehaviorObservable.create<ContentType[]>(uninitializedList);\r\n\r\n  /** templates/views of this app */\r\n  templates$ = BehaviorObservable.create<Template[]>(uninitializedList);\r\n\r\n  /**\r\n   * ready is true when all necessary data is loaded\r\n   * note that apps are not loaded if not needed */\r\n  ready$ = new Observable<boolean>();\r\n  // #endregion\r\n\r\n  // #region private properties\r\n  private mustLoadApps = false;\r\n  // all the subjects - these are all multi-cast, so don't use share!\r\n  // #endregion\r\n\r\n  constructor(private http: HttpClient) {\r\n    log.add('constructor()');\r\n    this.buildObservables();\r\n    this.enableLogging();\r\n  }\r\n\r\n  private buildObservables() {\r\n    log.add(`buildObservables()`);\r\n\r\n    // ready requires all to have data, but app can be skipped if not required\r\n    this.ready$ = combineLatest(this.apps$, this.contentTypes$, this.templates$,\r\n      (a, ct, t) => ({ apps: a, types: ct, templates: t }))\r\n      .pipe(\r\n        map(set => set.templates !== uninitializedList\r\n          && set.types !== uninitializedList\r\n          && (!this.mustLoadApps || !!(set.apps && set.apps !== uninitializedList))),\r\n        startWith(false),\r\n        share());\r\n  }\r\n\r\n  public saveAppId(appId: string, reloadParts: boolean): Promise<any> {\r\n    log.add(`saveAppId(${appId}, ${reloadParts})`);\r\n    // skip doing anything here, if we're in content-mode (which doesn't use/change apps)\r\n    if (!this.loadApps) throw new Error(`can't save app, as we're not in app-mode`);\r\n    return this.http.get(`${Constants.apiRootTemplates}SetAppId?appId=${appId}`).toPromise();\r\n  }\r\n\r\n\r\n\r\n  public initLoading(requireApps: boolean): Observable<any> {\r\n    log.add(`initLoading(requireApps: ${requireApps})`);\r\n    this.mustLoadApps = requireApps;\r\n    if (requireApps) this.loadApps();\r\n    return this.reloadAppParts();\r\n  }\r\n\r\n  public reloadAppParts(): Observable<any> {\r\n    return combineLatest(\r\n      this.loadTemplates(),\r\n      this.loadContentTypes());\r\n  }\r\n\r\n  /**\r\n   * load templates - is sometimes repeated if the app changes\r\n   */\r\n  public loadTemplates(): Observable<any> {\r\n    log.add('loadTemplates()');\r\n    this.templates$.reset();\r\n    const obs = this.http.get<Template[]>(`${Constants.apiRootTemplates}GetSelectableTemplates`)\r\n      .pipe(share()); // ensure it's only run once\r\n\r\n    obs.subscribe(response => this.templates$.next(response || []));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load the ContentTypes - only needed on first initialization\r\n   */\r\n  private loadContentTypes(): Observable<any> {\r\n    log.add(`loadContentTypes()`);\r\n    this.contentTypes$.reset();\r\n    const obs = this.http.get<any[]>(`${Constants.apiRootTemplates}GetSelectableContentTypes`)\r\n      .pipe(share()); // ensure it's only run once\r\n    obs.pipe(map(response => (response || []).map(ct => {\r\n        ct.Label = (ct.Metadata && ct.Metadata.Label)\r\n          ? ct.Metadata.Label\r\n          : ct.Name;\r\n        return ct;\r\n      })))\r\n      .subscribe(json => this.contentTypes$.next(json));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load all Apps, only needed on first initialization\r\n   */\r\n  private loadApps(): Observable<any> {\r\n    const alreadyLoaded = !this.apps$.isInitial();\r\n    log.add(`loadApps() - skip:${alreadyLoaded}`);\r\n    if (alreadyLoaded) return;\r\n\r\n    const appsFilter = Config.apps();\r\n\r\n    const obs = this.http.get<any[]>(`${Constants.apiRootTemplates}GetSelectableApps?apps=${appsFilter}`)\r\n      .pipe(share()); // ensure it's only run once\r\n\r\n    obs.subscribe(response => this.apps$.subject.next(response.map(a => new App(a))));\r\n    return obs;\r\n  }\r\n\r\n  private enableLogging() {\r\n    const streamLog = parentLog.subLog('api-streams', DebugConfig.api.streams);\r\n    this.apps$.subscribe(a => streamLog.add(`app$:${a && a.length}`));\r\n    this.contentTypes$.subscribe(ct => streamLog.add(`contentTypes$:${ct && ct.length}`));\r\n    this.templates$.subscribe(t => streamLog.add(`templates$:${t && t.length}`));\r\n    this.ready$.subscribe(r => streamLog.add(`ready$:${r}`));\r\n  }\r\n\r\n}\r\n","import { ContentType } from '../content-type';\r\nimport { cViewWithoutContent } from '../constants';\r\nimport { Template } from '../template';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { i18nPrefix } from 'app/i18n';\r\n\r\n// const debug = true;\r\nconst log = parentLog.subLog('ct-processor', DebugConfig.typeProcessor);\r\n\r\n/**\r\n * This is a helper to do various transformations for the list of content-types\r\n */\r\n@Injectable()\r\nexport class ContentTypesProcessor {\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  public buildList(allTypes: ContentType[], type: ContentType, allTemplates: Template[], template: Template): ContentType[] {\r\n    log.add('buildList(...) of content-types to show');\r\n    let unhide = this.unhideSelectedType(allTypes, type, template);\r\n    unhide = this.addEmptyTypeIfNeeded(unhide, allTemplates);\r\n    const filtered = this.hideNecessaryTypes(unhide);\r\n    return this.sortTypes(filtered);\r\n  }\r\n\r\n  private hideNecessaryTypes(types: ContentType[]): ContentType[] {\r\n    return types.filter(t => !t.IsHidden);\r\n  }\r\n\r\n  /**\r\n   * Ensure current content-type is visible, just in case it's configured as hidden\r\n   */\r\n  private unhideSelectedType(contentTypes: ContentType[], currentType: ContentType, currentTemplate: Template): ContentType[] {\r\n    contentTypes\r\n      .filter(c => (currentTemplate?.TemplateId === c.TemplateId) || (c.StaticName === currentType?.StaticName))\r\n      .forEach(c => c.IsHidden = false);\r\n    return contentTypes;\r\n  }\r\n\r\n\r\n  /**\r\n   * add an empty content-type for UI selection if any template would support \"no content-type\"\r\n   */\r\n  private addEmptyTypeIfNeeded(contentTypes: ContentType[], templates: Template[]): ContentType[] {\r\n    const layoutElementLabel = (this.translate && this.translate.instant(i18nPrefix))\r\n      || cViewWithoutContent; // if translate is not ready, use the nicer label\r\n\r\n    // add option for empty content type\r\n    if (templates && templates.find(t => t.ContentTypeStaticName === '')) {\r\n      contentTypes = contentTypes.slice(); // copy it first to not change original\r\n      contentTypes.push({\r\n        StaticName: cViewWithoutContent,\r\n        Name: i18nPrefix,\r\n        Thumbnail: null,\r\n        Label: layoutElementLabel,\r\n        IsHidden: false,\r\n      } as ContentType);\r\n    }\r\n    return contentTypes;\r\n  }\r\n\r\n  /**\r\n   * Sort the types by label\r\n   */\r\n  private sortTypes(contentTypes: ContentType[]): ContentType[] {\r\n    // https://stackoverflow.com/questions/51165/how-to-sort-strings-in-javascript\r\n    return contentTypes.sort((a, b) => ('' + a.Label).localeCompare(b.Label));\r\n  }\r\n\r\n\r\n  // tslint:disable-next-line:member-ordering\r\n  static findContentTypesById(contentTypes: ContentType[], selectedContentTypeId: string): ContentType {\r\n    log.add(`findContentTypesById(..., ${selectedContentTypeId}`);\r\n    return selectedContentTypeId\r\n      ? contentTypes.find(c => c.StaticName === selectedContentTypeId)\r\n      : null;\r\n  }\r\n\r\n}\r\n\r\n","export const cViewWithoutContent = '_LayoutElement';\r\nexport const cAppActionImport = -1;\r\n","import { Template } from '../template';\r\nimport { ContentType } from '../content-type';\r\nimport { App } from 'app/core/app';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\nconst log = parentLog.subLog('TemplateProcessor', DebugConfig.templateProcessor);\r\n\r\nexport class TemplateProcessor {\r\n  static pickSelected(selected: Template, templates: Template[], type: ContentType, app: App): Template {\r\n    log.add(`pickSelected(selected: ${selected && selected.TemplateId}, templates: ${templates.length})`)\r\n    // if one is selected, return that; but only if it's in the list of possible templates\r\n    if (selected && templates.find(t => t.TemplateId === selected.TemplateId))\r\n        return selected;\r\n\r\n    // if none is selected, return the first; assuming a type or app has been selected\r\n    if ((type || app) && templates && templates.length) return templates[0];\r\n\r\n    // nothing valid\r\n    return null;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { cViewWithoutContent } from './constants';\r\nimport { Template } from './template';\r\nimport { ContentType } from './content-type';\r\n\r\n@Pipe({\r\n  name: 'templateFilter'\r\n})\r\nexport class TemplateFilterPipe implements PipeTransform {\r\n\r\n\r\n  transform(templates: Template[], args: {isContent: boolean, contentType: ContentType } ): Template[] {\r\n\r\n    const typeId = args.contentType ? args.contentType.StaticName : undefined;\r\n\r\n    // in case we're filtering for the special \"empty\" code, use empty in the filter\r\n    const typeNameFilter = typeId === cViewWithoutContent\r\n      ? ''\r\n      : (typeId || '');\r\n\r\n    return templates\r\n      .filter(t => !t.IsHidden)\r\n      .filter(t => !args.isContent || t.ContentTypeStaticName === typeNameFilter);\r\n  }\r\n}\r\n","\r\n// #region imports\r\nimport { scan, debounceTime, share, startWith, map, filter } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable as O, combineLatest, merge } from 'rxjs';\r\n\r\nimport { App } from 'app/core/app';\r\nimport { PickerService } from './picker.service';\r\nimport { IQuickDialogConfig } from 'app/interfaces-shared/iquick-dialog-config';\r\nimport { Template } from './template';\r\nimport { ContentType } from './content-type';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { TemplateProcessor } from './data/template-processor';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\n// #endregion\r\n\r\nconst log = parentLog.subLog('state', DebugConfig.state.enabled);\r\n\r\n@Injectable()\r\nexport class CurrentDataService {\r\n  /** Currently selected app */\r\n  app$: O<App>;\r\n\r\n  /** Relevant types */\r\n  types$: O<ContentType[]>;\r\n\r\n  /** The currently selected type */\r\n  type$: O<ContentType>;\r\n\r\n  /** Stream containing the currently selected template or null if not selected */\r\n  template$: O<Template>;\r\n\r\n  /** all templates relevant for the UI */\r\n  templates$: O<Template[]>;\r\n\r\n  private appId$ = BehaviorObservable.create<number>(null);\r\n  private initialTypeId$ = BehaviorObservable.create<string>(null);\r\n  private initialTemplateId$ = BehaviorObservable.create<number>(null);\r\n  private selectedType$ = BehaviorObservable.create<ContentType>(null);\r\n  private selectedTemplate$ = BehaviorObservable.create<Template>(null);\r\n\r\n\r\n  private config: IQuickDialogConfig;\r\n\r\n  constructor(\r\n    private api: PickerService,\r\n    private templateFilter: TemplateFilterPipe,\r\n    private ctProcessor: ContentTypesProcessor\r\n  ) {\r\n    this.buildBasicObservables();\r\n  }\r\n\r\n  private buildBasicObservables() {\r\n    // app-stream should contain selected app, once the ID is known - or null\r\n    this.app$ = combineLatest(\r\n      this.api.apps$,\r\n      this.appId$,\r\n      (apps, appId) => apps.find(a => a.AppId === appId));\r\n\r\n    // current type should be either the initial type, or a manually selected type\r\n    const initialType$ = combineLatest(\r\n      this.initialTypeId$,\r\n      this.api.contentTypes$,\r\n      (typeId, all) => ContentTypesProcessor.findContentTypesById(all, typeId));\r\n    this.type$ = merge(initialType$, this.selectedType$).pipe(\r\n      startWith(null),\r\n      share());\r\n\r\n    // the templates-list is always filtered by the currently selected type\r\n    this.templates$ = combineLatest(\r\n      this.api.templates$,\r\n      this.type$,\r\n      (all, current) => this.findTemplatesForTypeOrAll(all, current))\r\n      .pipe(startWith(new Array<Template>()));\r\n\r\n    // the current template is either the last selected, or auto-selected when conditions change\r\n    const initialTemplate$ = combineLatest(\r\n      this.initialTemplateId$,\r\n      this.api.templates$,\r\n      (id, templates) => templates.find(t => t.TemplateId === id)).pipe(\r\n        filter(t => t != null), // only allow new values which are not null, to guarantee later template$ updates don't affect this\r\n        startWith(null),\r\n        share());\r\n\r\n    const selected$ = merge(initialTemplate$, this.selectedTemplate$.pipe(filter(t => t !== null)));\r\n    this.template$ = combineLatest(\r\n      selected$,\r\n      this.templates$,\r\n      this.type$,\r\n      this.app$,\r\n      (selected, templates, type, app) => TemplateProcessor.pickSelected(selected, templates, type, app))\r\n      .pipe(\r\n        startWith(null),\r\n        share());\r\n\r\n    // construct list of relevant types for the UI\r\n    this.types$ = combineLatest(\r\n      this.api.contentTypes$,\r\n      this.type$,\r\n      this.api.templates$,\r\n      this.template$,\r\n      (types, type, templates, template) => this.ctProcessor.buildList(types, type, templates, template));\r\n  }\r\n\r\n  init(config: IQuickDialogConfig): O<boolean> {\r\n    this.config = config;\r\n    // app-init is ready, if it has an app or doesn't need to init one\r\n    log.add(`initializing with config:${JSON.stringify(config)}`, config);\r\n    const appReady$ = this.app$.pipe(\r\n      map(a => config.isContent || !!a),\r\n      startWith(config.isContent || !config.appId));\r\n\r\n    const typeReady$ = this.type$.pipe(\r\n      map(t => !!t),\r\n      scan((acc, value) => acc || value, !config.contentTypeId));\r\n    const templReady$ = this.template$.pipe(\r\n      map(t => !!t),\r\n      debounceTime(100), // need to debounce, because the template might have a value and change again\r\n      startWith(!config.templateId));\r\n\r\n    const loadAll$ = combineLatest(appReady$, templReady$, typeReady$)\r\n      .pipe(map(set => set[0] && set[1] && set[2]));\r\n\r\n    this.initLogging(appReady$, typeReady$, templReady$, loadAll$);\r\n\r\n    // automatically set the app, type and template\r\n    this.activateCurrentApp(config.appId);\r\n    this.initialTypeId$.next(config.contentTypeId);\r\n    this.initialTemplateId$.next(config.templateId);\r\n\r\n    return loadAll$;\r\n  }\r\n\r\n  private initLogging(inita$: O<boolean>,\r\n    inittyp$: O<boolean>,\r\n    initt$: O<boolean>,\r\n    initAll$: O<boolean>): void {\r\n    const slog = log.subLog('stream', DebugConfig.state.streams);\r\n    this.type$.subscribe(t => slog.add(`type$ update:'${t && t.Label}'`, t));\r\n    this.app$.subscribe(a => slog.add(`app$ update:'${a && a.AppId}'`, a));\r\n    this.template$.subscribe(t => slog.add(`template$ update:'${t && t.TemplateId}'`, t));\r\n    this.templates$.subscribe(t => slog.add(`templates$ count:'${t && t.length}'`, t));\r\n    this.types$.subscribe(t => slog.add(`types$ count:'${t && t.length}'`, t));\r\n    this.selectedTemplate$.subscribe(t => slog.add(`selectedTemplate$: ${t && t.TemplateId}`));\r\n\r\n    const initLog = log.subLog('stream-init', DebugConfig.state.inits);\r\n    this.initialTypeId$.subscribe(t => initLog.add(`initial TypeId:'${t}'`, t));\r\n    this.initialTemplateId$.subscribe(t => initLog.add(`initial TemplateId:'${t}'`, t));\r\n    inita$.subscribe(t => initLog.add(`init app$`, t));\r\n    inittyp$.subscribe(t => initLog.add(`init type$`, t));\r\n    initt$.subscribe(t => initLog.add(`init temp$`, t));\r\n    initAll$.subscribe(t => initLog.add(`init all$`, t));\r\n  }\r\n\r\n\r\n\r\n  //#region activate calls from outside\r\n  activateCurrentApp(appId: number) {\r\n    log.add(`activateApp(${appId})`);\r\n    this.appId$.next(appId);\r\n  }\r\n  activateType(contentType: ContentType) {\r\n    log.add(`activateType(${contentType.Name})`);\r\n    this.selectedType$.next(contentType);\r\n  }\r\n  activateTemplate(template: Template) {\r\n    log.add(`activateTemplate(${template.TemplateId})`);\r\n    this.selectedTemplate$.next(template);\r\n  }\r\n  //#endregion\r\n\r\n  private findTemplatesForTypeOrAll(allTemplates: Template[], contentType: ContentType): Template[] {\r\n    return this.templateFilter.transform(allTemplates, { contentType, isContent: this.config.isContent });\r\n  }\r\n\r\n}\r\n","\r\nimport {of as observableOf } from 'rxjs';\r\n\r\nimport {switchMap} from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\n@Injectable()\r\nexport class InstallerService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  installPackages(packages: any[], step: Function): Observable<any> {\r\n    return packages.reduce((t: Observable<Response>, c) => t.pipe(\r\n        switchMap(() => {\r\n          if (!c.url) return observableOf(true);\r\n          step(c);\r\n          return <Observable<any>>this.http.get(`app-sys/installer/installpackage?packageUrl=${c.url}`);\r\n        })), observableOf(true));\r\n  }\r\n}\r\n","\r\nimport { startWith, map, tap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { log } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\n\r\n\r\n@Injectable()\r\nexport class GettingStartedService {\r\n  gettingStarted$: Observable<string>;\r\n  ready$ = new Observable<boolean>();\r\n\r\n  private gettingStartedSubject: Subject<string> = new Subject<string>();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.gettingStarted$ = this.gettingStartedSubject.asObservable();\r\n    this.ready$ = this.gettingStarted$.pipe(\r\n      map(() => true),\r\n      startWith(false));\r\n\r\n    this.ready$.pipe(tap(r => log.add(`ready getting started:${r}`))).subscribe();\r\n  }\r\n\r\n  public loadGettingStarted(isContentApp: boolean): void {\r\n    this.http.get<string>(`${Constants.apiRootTemplates}RemoteInstallDialogUrl?dialog=gettingstarted&isContentApp=${isContentApp}`)\r\n      .subscribe(json => this.gettingStartedSubject.next(json));\r\n  }\r\n\r\n}\r\n","<div class=\"progress\" *ngIf=\"showProgress\">\r\n  <mat-progress-spinner [mode]=\"'indeterminate'\"></mat-progress-spinner>\r\n  <span>Installing {{ currentPackage?.displayName }}..</span>\r\n</div>\r\n<div *ngIf=\"ready\">\r\n  <iframe class=\"fr-getting-started\" id=\"frGettingStarted\" [src]=\"remoteInstallerUrl\" width=\"100%\" height=\"300px\"></iframe>\r\n</div>\r\n","\r\nimport { tap, switchMap, map, filter, debounceTime } from 'rxjs/operators';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { GettingStartedService } from './getting-started.service';\r\nimport { Config } from '../config';\r\n\r\ndeclare const $2sxc: any;\r\n\r\n@Component({\r\n  selector: 'app-installer',\r\n  templateUrl: './installer.component.html',\r\n  styleUrls: ['./installer.component.scss']\r\n})\r\nexport class InstallerComponent implements OnInit {\r\n  @Input() isContentApp: boolean;\r\n\r\n  showProgress: boolean;\r\n  currentPackage: any;\r\n  remoteInstallerUrl = '';\r\n  ready = false;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private installer: InstallerService,\r\n    private api: GettingStartedService,\r\n    private sanitizer: DomSanitizer,\r\n  ) {\r\n    this.subscriptions.push(\r\n      this.api.gettingStarted$.subscribe(url => {\r\n        this.remoteInstallerUrl = <string>this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n        this.ready = true;\r\n      }));\r\n\r\n    window.bootController.rebootRequest$.pipe(\r\n      debounceTime(1000))\r\n      .subscribe(() => this.destroy());\r\n  }\r\n\r\n  destroy(): void {\r\n    this.subscriptions\r\n      .forEach(sub => sub.unsubscribe());\r\n    console.log('destroy subs', this.subscriptions);\r\n  }\r\n\r\n  ngOnInit() {\r\n    let alreadyProcessing = false;\r\n    this.api.loadGettingStarted(this.isContentApp);\r\n\r\n    this.subscriptions.push(fromEvent(window, 'message').pipe(\r\n\r\n      // Ensure only one installation is processed.\r\n      filter(() => !alreadyProcessing),\r\n\r\n      // Get data from event.\r\n      map((evt: MessageEvent) => {\r\n        try {\r\n          return JSON.parse(evt.data);\r\n        } catch (e) {\r\n          return void 0;\r\n        }\r\n      }),\r\n\r\n      // Check if data is correct.\r\n      filter(data => data\r\n        && Number(data.moduleId) === Config.moduleId()\r\n        && data.action === 'install'),\r\n\r\n      // Get packages from data.\r\n      map(data => Object.values(data.packages)),\r\n\r\n      // Show confirm dialog.\r\n      filter(packages => {\r\n        const packagesDisplayNames = packages\r\n          .reduce((t, c) => `${t} - ${(c as any).displayName}\\n`, '');\r\n\r\n        const msg = `Do you want to install these packages?\r\n\r\n${packagesDisplayNames}\r\nThis takes 5 - 30 seconds per package. Don't reload the page while it's installing.`;\r\n        return confirm(msg);\r\n      }),\r\n\r\n      switchMap(packages => {\r\n        alreadyProcessing = true;\r\n        this.showProgress = true;\r\n        return this.installer.installPackages(packages, p => this.currentPackage = p);\r\n      }),\r\n\r\n      tap(() => {\r\n        this.showProgress = false;\r\n        alert('Installation complete 👍');\r\n        window.top.location.reload();\r\n      }))\r\n\r\n      .subscribe(null, () => {\r\n        this.showProgress = false;\r\n        alert('An error occurred.');\r\n        alreadyProcessing = false;\r\n      }));\r\n  }\r\n}\r\n","\r\n<div class=\"content\">\r\n\r\n  <!-- debug info section -->\r\n  <div *ngIf=\"showDebug\">\r\n    <h4>Debug</h4>\r\n    <ul>\r\n      <li>Types: {{ types?.length }}, current: {{contentType?.StaticName}}</li>\r\n      <li>Apps: {{ (apps$ | async)?.length }}, current: {{app?.AppId }} </li>\r\n      <li>Templates: {{templates?.length}}, current: {{template?.TemplateId}}</li>\r\n      <li>Config: isContent='{{isContent}}' Ready: {{ready}} </li>\r\n      <li>Tab to show: '{{tabIndex}}' / preventTypeSwitch '{{preventTypeSwitch}}' / preventAppSwitch '{{preventAppSwich}}'</li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- loading indicator -->\r\n  <mat-progress-bar [ngStyle]=\"{ opacity: ready ? 0 : 1 }\" [mode]=\"'indeterminate'\"></mat-progress-bar>\r\n\r\n  <!-- main dialog, starting with save/cancel button -->\r\n  <div class=\"card\"\r\n    [ngClass]=\"{ blocked: !ready }\"\r\n  >\r\n    <div class=\"top-controls\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n      <button mat-fab *ngIf=\"template\" (click)=\"persistTemplate(template)\" [attr.title]=\"'TemplatePicker.Save' | translate\">\r\n        <mat-icon>check</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab class=\"secondary\" *ngIf=\"showCancel\" (click)=\"cancel()\" [attr.title]=\"('TemplatePicker.' + (isContent ? 'Cancel' : 'Close')) | translate\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- tabs -->\r\n    <mat-tab-group [(selectedIndex)]=\"tabIndex\">\r\n      <mat-tab>\r\n        <ng-template mat-tab-label>\r\n          {{(isContent \r\n            ? (contentType?.Name || ('TemplatePicker.ContentTypePickerDefault' | translate)) \r\n            : (app?.Name || ('TemplatePicker.AppPickerDefault' | translate)))}}\r\n        </ng-template>\r\n\r\n        <!-- App Selector -->\r\n        <div *ngIf=\"!isContent; else contentApp\" class=\"tiles\">\r\n\r\n          <div class=\"tile\" \r\n            [ngClass]=\"{ active: app?.AppId === a.AppId, blocked: preventTypeSwitch }\" \r\n            [attr.title]=\"a.Name\" \r\n            (click)=\"selectApp(app, a)\"\r\n            (dblclick)=\"switchTab()\" *ngFor=\"let a of apps$ | async\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"a.Thumbnail !== null && a.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"a.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"a.Thumbnail === null || a.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon>star</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"version\"><span>v{{a.VersionMain}}</span></div>\r\n\r\n            <div class=\"title\" [ngClass]=\"{ show: a.Thumbnail === null || a.Thumbnail === '' }\">\r\n              <span>{{a.Name}}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- install and manage buttons -->\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced\" (click)=\"run('app-import')\" [attr.title]=\"'TemplatePicker.Install' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>get_app</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.Install\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced\" (click)=\"run('zone')\" [attr.title]=\"'TemplatePicker.Zone' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>apps</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.Zone\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Content-Type selection (when not a generic app, but the default content-app -->\r\n        <ng-template #contentApp>\r\n          <div class=\"tiles\">\r\n            <div mat-button class=\"tile\" \r\n              [ngClass]=\"{ active: contentType?.StaticName === c.StaticName, blocked: preventTypeSwitch }\"\r\n              [attr.title]=\"(c.Label | translate) + (showDebug ? ' (' + c.StaticName + ')' : '')\" \r\n              (click)=\"selectContentType(contentType, c)\"\r\n              (dblclick)=\"switchTab()\" \r\n              *ngFor=\"let c of types\"\r\n            >\r\n              <div class=\"bg\">\r\n                <img *ngIf=\"c.Thumbnail !== null && c.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"c.Thumbnail + '?w=176&h=176'\">\r\n                <div *ngIf=\"c.Thumbnail === null || c.Thumbnail === ''\" class=\"bg-icon\">\r\n                  <mat-icon>bubble_chart</mat-icon>\r\n                </div>\r\n              </div>\r\n              <div class=\"title\" [ngClass]=\"{ show: c.Thumbnail === null || c.Thumbnail === '' }\">\r\n                <span>{{c.Label}}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </mat-tab>\r\n\r\n      <!-- template selection after app/content-type selection -->\r\n      <mat-tab *ngIf=\"isContent ? contentType : app\" [label]=\"('TemplatePicker.ChangeView' | translate) + '(' + templates.length + ')'\">\r\n        <div class=\"tiles\">\r\n          <mat-spinner class=\"templates-spinner\" *ngIf=\"templatesLoading$ | async\"></mat-spinner>\r\n          <div class=\"tile\" \r\n            [ngClass]=\"{ active: template?.TemplateId === t.TemplateId }\" \r\n            [attr.title]=\"t.Name + (showDebug ? ' (' + t.TemplateId + ')' : '')\" \r\n            (click)=\"selectTemplate(t)\"\r\n            *ngFor=\"let t of templates\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"t.Thumbnail !== null && t.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"t.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"t.Thumbnail === null || t.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon *ngIf=\"isContent\">view_carousel</mat-icon>\r\n                <mat-icon *ngIf=\"!isContent\">view_quilt</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title\" [ngClass]=\"{ show: t.Thumbnail === null || t.Thumbnail === '' }\">\r\n              <span>{{t.Name}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced && !isContent && app?.AppId !== null\" (click)=\"run('app')\" [attr.title]=\"'TemplatePicker.App' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>settings</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.App\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n\r\n    <span class=\"no-install-allowed\" *ngIf=\"isBadContextForInstaller && showInstaller\">No {{isContent ? 'Content Apps' : 'Apps'}} installed yet. Please persue the installation by creating a new {{isContent ? 'Content' : 'App'}} in the root of your website.</span>\r\n    <app-installer *ngIf=\"!isBadContextForInstaller && showInstaller\" [isContentApp]=\"isContent\"></app-installer>\r\n  </div>\r\n</div>\r\n","\r\nimport {merge, combineLatest,  timer } from 'rxjs';\r\nimport {filter, startWith, skipUntil} from 'rxjs/operators';\r\nimport { Component, ChangeDetectorRef, OnInit } from '@angular/core';\r\nimport { IDialogFrameElement } from 'app/interfaces-shared/idialog-frame-element';\r\nimport { Observable } from 'rxjs';\r\nimport { App } from 'app/core/app';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { IIFrameBridge } from 'app/interfaces-shared/iiframe-bridge';\r\nimport { IQuickDialogConfig } from 'app/interfaces-shared/iquick-dialog-config';\r\nimport { cAppActionImport } from './constants';\r\nimport { log as parentLog, Log } from 'app/core/log';\r\nimport { PickerService } from './picker.service';\r\nimport { CurrentDataService } from './current-data.service';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\n\r\nconst log = parentLog.subLog('picker', DebugConfig.picker.enabled);\r\n\r\n@Component({\r\n  selector: 'app-template-picker',\r\n  templateUrl: './template-picker.component.html',\r\n  styleUrls: ['./template-picker.component.scss'],\r\n})\r\nexport class TemplatePickerComponent implements OnInit {\r\n  // #region properties\r\n  /** Stream of all apps */\r\n  apps$: Observable<App[]>;\r\n\r\n  /** is cancelling possible */\r\n  showCancel = true;\r\n\r\n  /** is in the main content-app or a generic app */\r\n  isContent: boolean;\r\n\r\n  /** show advanced features (admin/host only) */\r\n  showAdvanced = false;\r\n\r\n  /** show the installer */\r\n  showInstaller = false;\r\n\r\n  /** Stream to indicate ready, for loading-indicator */\r\n  ready$: Observable<boolean>;\r\n  templatesLoading$: Observable<boolean>;\r\n\r\n  /** Tab-id, when we set it, the tab switches */\r\n  tabIndex = 0;\r\n\r\n  /** Indicate if the user is allowed to change content-types or not */\r\n  preventTypeSwitch: boolean;\r\n\r\n  /** Indicates whether the installer can be shown in this dialog or not */\r\n  isBadContextForInstaller = false;\r\n\r\n  /** The communication-object to the parent */\r\n  private bridge: IIFrameBridge;\r\n\r\n  /** internal loading state */\r\n  private loading$ = BehaviorObservable.create<boolean>(false);\r\n\r\n  /** Ajax-support changes how saving/changing is handled */\r\n  private supportsAjax: boolean;\r\n\r\n  preventAppSwich = false;\r\n\r\n  public showDebug = DebugConfig.picker.showDebugPanel;\r\n  // #endregion\r\n\r\n  // #region data to show - using local variables, because streams didn't update correctly :(\r\n  app: App;\r\n  templates: Template[];\r\n  template: Template;\r\n  contentType: ContentType;\r\n  types: ContentType[];\r\n  ready = false;\r\n  //#endregion\r\n\r\n  constructor(\r\n    private api: PickerService,\r\n    public state: CurrentDataService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {\r\n    // get configuration from iframe-bridge and set everything\r\n    this.bridge = (<IDialogFrameElement>window.frameElement).bridge;\r\n    const dashInfo = this.bridge.getAdditionalDashboardConfig();\r\n\r\n    this.boot(dashInfo);\r\n    this.debugObservables();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.autosyncObservablesToEnsureUiUpdates();\r\n  }\r\n\r\n\r\n  private boot(dashInfo: IQuickDialogConfig) {\r\n    this.showDebug = dashInfo.debug;\r\n    Log.configureRuntimeLogging(dashInfo.debug);\r\n\r\n    // start data-loading\r\n    this.api.initLoading(!dashInfo.isContent);\r\n\r\n    // init parts, variables, observables\r\n    const initDone$ = this.state.init(dashInfo);\r\n    this.initObservables(initDone$);\r\n    this.initValuesFromBridge(dashInfo);\r\n    this.loading$.next(false);\r\n  }\r\n\r\n  private debugObservables() {\r\n    if (!DebugConfig.picker.streams) return;\r\n    this.loading$.subscribe(l => log.add(`loading$:${l}`));\r\n    this.ready$.subscribe(r => log.add(`ready$:${r}`));\r\n  }\r\n\r\n  /**\r\n   * wire up observables for this component\r\n   */\r\n  private initObservables(initDone$: Observable<boolean>): void {\r\n    const initTrue$ = initDone$.pipe(filter(t => !!t));\r\n\r\n    // wire up basic observables\r\n    this.ready$ = combineLatest(\r\n      this.api.ready$,\r\n      this.loading$,\r\n      (r, l) => r && !l);\r\n\r\n    // all apps are the same as provided by the api\r\n    this.apps$ = this.api.apps$;\r\n\r\n    // if the content-type or app is set, switch tabs (ignore null/empty states)\r\n    const typeOrAppReady = merge(this.state.type$, this.state.app$).pipe(filter(t => !!t));\r\n    combineLatest(typeOrAppReady, initTrue$).subscribe(_ => this.switchTab());\r\n\r\n    // once the data is known, check if installer is needed\r\n    combineLatest(this.api.templates$,\r\n      this.api.contentTypes$,\r\n      this.api.apps$,\r\n      this.api.ready$.pipe(filter(r => !!r)),\r\n      (templates, _, apps) => {\r\n        log.add('apps/templates loaded, will check if we should show installer');\r\n      this.showInstaller = this.isContent\r\n        ? templates.length === 0\r\n        : apps.filter(a => a.AppId !== cAppActionImport).length === 0;\r\n    }).subscribe();\r\n\r\n    // template loading is true, when the template-list or selected template are not ready\r\n    this.templatesLoading$ = combineLatest(\r\n      this.state.templates$,\r\n      this.state.template$,\r\n      (all, selected) => !(all && selected)).pipe(\r\n      startWith(false));\r\n\r\n    // whenever the template changes, ensure the preview reloads\r\n    // but don't do this when initializing, that's why we listen to initDone$\r\n    this.state.template$.pipe(\r\n      filter(t => !!t),\r\n      skipUntil(initTrue$))\r\n      .subscribe(t => this.previewTemplate(t));\r\n  }\r\n\r\n  /** The UI doesn't update reliably :(, so we copy the data to local variables */\r\n  private autosyncObservablesToEnsureUiUpdates(): any {\r\n    this.state.app$.subscribe(a => this.app = a);\r\n    this.state.templates$.subscribe(t => this.templates = t);\r\n    this.state.template$.subscribe(t => this.template = t);\r\n    this.state.types$.subscribe(t => this.types = t);\r\n    this.state.type$.subscribe(t => this.contentType = t);\r\n\r\n    this.ready$.subscribe(r => this.ready = r);\r\n    merge(\r\n      this.ready$,\r\n      this.state.app$,\r\n      this.state.type$,\r\n      this.state.types$,\r\n      this.state.template$,\r\n      this.state.templates$,\r\n      ).subscribe(() => this.cdRef.detectChanges());\r\n  }\r\n\r\n\r\n  private initValuesFromBridge(config: IQuickDialogConfig): void {\r\n    this.preventTypeSwitch = config.hasContent;\r\n    this.isBadContextForInstaller = config.isInnerContent;\r\n    this.isContent = config.isContent;\r\n    this.supportsAjax = this.isContent || config.supportsAjax;\r\n    this.showAdvanced = config.user.canDesign;\r\n    this.preventAppSwich = config.hasContent;\r\n    this.showCancel = config.templateId != null;\r\n  }\r\n\r\n  //#region basic UI action binding\r\n  cancel(): void { this.bridge.cancel(); }\r\n\r\n  run(action: string): void { this.bridge.run(action); }\r\n\r\n  persistTemplate(template: Template) { this.bridge.setTemplate(template.TemplateId, template.Name, true); }\r\n\r\n  /**\r\n   * app selection from UI\r\n   */\r\n  selectApp(before: App, after: App): void {\r\n    console.log('selectApp()');\r\n    if (before && before.AppId === after.AppId) this.switchTab();\r\n    else this.updateApp(after);\r\n  }\r\n\r\n  /**\r\n   * content-type selection from UI\r\n   */\r\n  selectContentType(before: ContentType, after: ContentType): void {\r\n    if (before && before.StaticName === after.StaticName) this.switchTab();\r\n    else this.setContentType(after);\r\n  }\r\n\r\n  /**\r\n   * activate a template from the UI\r\n   */\r\n  selectTemplate(template: Template): void {\r\n    this.state.activateTemplate(template);\r\n  }\r\n  //#endregion\r\n\r\n  private setContentType(contentType: ContentType): void {\r\n    log.add(`select content-type '${contentType.Name}'; prevent: ${this.preventTypeSwitch}`);\r\n    if (this.preventTypeSwitch) return;\r\n    this.state.activateType(contentType);\r\n  }\r\n\r\n  switchTab() {\r\n    log.add('switchTab()');\r\n    // must delay change because of a bug in the tabs-updating\r\n    timer(100).toPromise().then(_ => this.tabIndex = 1);\r\n  }\r\n\r\n\r\n  private updateApp(newApp: App): void {\r\n    // ajax-support can change as apps are changed; for ajax, maybe both the previous and new must support it\r\n    // or just new? still WIP\r\n    const ajax = newApp.SupportsAjaxReload;\r\n    log.add(`changing app to ${newApp.AppId}; prevent-switch: ${this.preventAppSwich} use-ajax:${ajax}`);\r\n    if (this.preventAppSwich) return;\r\n\r\n\r\n    this.loading$.next(true);\r\n    this.bridge.showMessage('loading App...');\r\n    const savePromise = this.api.saveAppId(newApp.AppId.toString(), ajax);\r\n\r\n    if (ajax) {\r\n      savePromise.then(() => {\r\n        log.add('saved app, will reset some stuff');\r\n        // do this after save completed, to ensure that the module is ready on the server\r\n        log.add('calling reloadAndReInit()');\r\n        this.bridge.reloadAndReInit()\r\n          .then(newConfig => this.boot(newConfig));\r\n      });\r\n    } else {\r\n      savePromise.then(() => window.parent.location.reload());\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  private previewTemplate(t: Template): void {\r\n    log.add(`previewTemplate(${t.TemplateId}), ajax is ${this.supportsAjax}`);\r\n    this.loading$.next(true);\r\n    this.bridge\r\n      .setTemplate(t.TemplateId, t.Name, false)\r\n      .then(_ => this.loading$.next(false));\r\n  }\r\n\r\n}\r\n","<app-template-picker *ngIf=\"name === 'dash-view' || name === 'layout'\"></app-template-picker>","import { TranslateService } from '@ngx-translate/core';\r\nimport { Component, ElementRef } from '@angular/core';\r\nimport { HistoryComponent } from 'app/history/history.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { IDialogFrameElement } from './interfaces-shared/idialog-frame-element';\r\nimport { log } from './core/log';\r\nimport { DnnAppComponent, Context } from '@2sic.com/dnn-sxc-angular';\r\nimport { SxcRoot } from '../../../sxc-typings';\r\nimport { Config } from './config';\r\nimport { SupportedLanguages, langCode2, PrimaryUiLanguage } from './i18n';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Constants } from 'app/core/constants';\r\nimport { ContextDto } from './dto/index';\r\n\r\ndeclare const window: any, $2sxc: SxcRoot;\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent extends DnnAppComponent {\r\n  // name is used in template\r\n  public name: string;\r\n\r\n  constructor(\r\n    public translate: TranslateService,\r\n    private dialog: MatDialog,\r\n    el: ElementRef,\r\n    context: Context,\r\n    http: HttpClient\r\n  ) {\r\n    super(el, context.preConfigure({ sxc: Config.getSxcInstance() }), false);\r\n    translate.addLangs(SupportedLanguages);\r\n\r\n    http.get<{ Context: ContextDto }>(`${Constants.apiDialogCtx}?appId=${Config.appId()}`)\r\n      .subscribe(ctxDto => {\r\n        const lang = ctxDto.Context.Language;\r\n        translate.setDefaultLang(PrimaryUiLanguage);\r\n        translate.use(langCode2(lang.Current));\r\n        this.showDialog();\r\n      });\r\n  }\r\n\r\n  private showDialog() {\r\n    this.name = Config.dialog();\r\n    log.add(`loading '${this.name}'`);\r\n    const frame = <IDialogFrameElement>window.frameElement;\r\n    if (this.name === 'item-history') {\r\n      this.dialog.open(HistoryComponent).afterClosed()\r\n        .subscribe(() => frame.bridge.hide());\r\n    }\r\n  }\r\n}\r\n","\r\nexport * from './constants';\r\n\r\n\r\nexport function langCode2(langCode5: string) {\r\n  return langCode5.split('-')[0];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { GettingStartedService } from 'app/installer/getting-started.service';\r\nimport { PickerService } from 'app/template-picker/picker.service';\r\nimport { CurrentDataService } from 'app/template-picker/current-data.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    GettingStartedService,\r\n    PickerService,\r\n    CurrentDataService,\r\n  ]\r\n})\r\nexport class CoreModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InstallerComponent } from './installer.component';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  exports: [\r\n    InstallerComponent\r\n  ],\r\n  declarations: [\r\n    InstallerComponent\r\n  ],\r\n  providers: [\r\n    InstallerService\r\n  ]\r\n})\r\nexport class InstallerModule { }","import { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\nconst MATERIAL_MODULES = [\r\n  MatButtonModule,\r\n  MatDialogModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n];\r\n\r\n@NgModule({\r\n  imports: MATERIAL_MODULES,\r\n  exports: MATERIAL_MODULES,\r\n})\r\n\r\nexport class MaterialModule { }\r\n","import { TranslateModule } from '@ngx-translate/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TemplatePickerComponent } from './template-picker.component';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\nimport { CoreModule } from 'app/core/core.module';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { InstallerModule } from 'app/installer/installer.module';\r\nimport { DebugPipe } from './debug.pipe';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { MaterialModule } from 'app/material-module';\r\n\r\n@NgModule({\r\n  exports: [\r\n    TemplatePickerComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserAnimationsModule,\r\n    MatMenuModule,\r\n    MatTabsModule,\r\n    MaterialModule,\r\n    MatProgressBarModule,\r\n    CoreModule,\r\n    FormsModule,\r\n    FlexLayoutModule,\r\n    InstallerModule,\r\n    TranslateModule\r\n  ],\r\n  providers: [\r\n    TemplateFilterPipe,\r\n    ContentTypesProcessor\r\n  ],\r\n  declarations: [\r\n    TemplatePickerComponent,\r\n    TemplateFilterPipe,\r\n    DebugPipe,\r\n  ]\r\n})\r\nexport class TemplatePickerModule { }\r\n","import {TranslateModule} from '@ngx-translate/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SxcVersionsService } from './sxc-versions.service';\r\nimport { HistoryComponent } from './history.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MaterialModule } from 'app/material-module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  exports: [\r\n    HistoryComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    FlexLayoutModule,\r\n    TranslateModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n  ],\r\n  providers: [\r\n    SxcVersionsService,\r\n  ],\r\n  declarations: [\r\n    HistoryComponent,\r\n  ],\r\n  // entryComponents: [\r\n  //   HistoryComponent,\r\n  // ],\r\n})\r\nexport class VersionDialogModule { }\r\n","import { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DnnInterceptor } from '@2sic.com/dnn-sxc-angular';\r\nimport { AppComponent } from './app.component';\r\nimport { TemplatePickerModule } from 'app/template-picker/template-picker.module';\r\nimport { VersionDialogModule } from 'app/history/version-dialog.module';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { MaterialModule } from './material-module';\r\nimport { log } from './core/log';\r\nimport { pathToI18n, i18nExtension } from './i18n';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  const loader = new TranslateHttpLoader(http, pathToI18n, i18nExtension);\r\n  log.add('created translate-loader', loader);\r\n  return loader;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  exports: [ ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    TemplatePickerModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    MaterialModule, // must be after BrowserModule\r\n    VersionDialogModule,\r\n  ],\r\n  providers: [ DnnInterceptor\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","\r\nimport { startWith } from 'rxjs/operators';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { BootController } from './app/core/boot-control';\r\nimport { log } from 'app/core/log';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nlog.add('loading main.ts');\r\n\r\ndeclare const window;\r\nconst platform = platformBrowserDynamic();\r\n\r\nfunction init() {\r\n  log.add('init()');\r\n\r\n  try {\r\n    // kill listeners\r\n    if (!platform.destroyed)\r\n      platform.destroy();\r\n  } catch (e) {\r\n    console.log('platform destroy error', e);\r\n  }\r\n\r\n  // must re-create the object here, otherwise AOT compiler optimizations\r\n  // break these lines of code\r\n  platformBrowserDynamic().bootstrapModule(AppModule)\r\n    .then(() => window.appBootstrap && window.appBootstrap())\r\n    .catch(err => console.error('NG Bootstrap Error =>', err));\r\n}\r\n\r\n\r\n// provide hook for outside reboot calls\r\nconst bootController = window.bootController = BootController.getRebootController();\r\n\r\n// Init on reboot request.\r\nbootController.rebootRequest$.pipe(\r\n  startWith(true)) // Init on first load.\r\n  .subscribe(() => init());\r\n"],"sourceRoot":"webpack:///"}