{"version":3,"file":"default-node_modules_angular_material_fesm2022_radio_mjs.127d58b6577569bd.js","mappings":"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","names":["_c0","_c1","_c2","MatRadioChange","source","value","constructor","this","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatRadioGroup","multi","MAT_RADIO_GROUP","InjectionToken","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","disabledInteractive","_changeDetector","inject","ChangeDetectorRef","_value","_name","_IdGenerator","getId","_selected","_isInitialized","_labelPosition","_disabled","_required","_buttonChanges","_controlValueAccessorChangeFn","onTouched","change","EventEmitter","_radios","name","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","disabled","required","_disabledInteractive","ngAfterContentInit","changes","subscribe","find","radio","ngOnDestroy","unsubscribe","_touch","forEach","_markForCheck","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","static","__ngFactoryType__","i0","type","selectors","contentQueries","rf","ctx","dirIndex","MatRadioButton","_t","hostAttrs","inputs","booleanAttribute","outputs","exportAs","features","_elementRef","ElementRef","_focusMonitor","FocusMonitor","_radioDispatcher","UniqueSelectionDispatcher","_defaultOptions","optional","_ngZone","NgZone","_renderer","Renderer2","_uniqueId","_cleanupClick","id","ariaLabel","ariaLabelledby","ariaDescribedby","disableRipple","tabIndex","_checked","radioGroup","notify","_setDisabled","_color","inputId","_removeUniqueSelectionListener","_previousTabIndex","_inputElement","_rippleTrigger","_noopAnimations","_injector","Injector","_CdkPrivateStyleLoader","load","_StructuralStylesLoader","animationMode","ANIMATION_MODULE_TYPE","HostAttributeToken","numberAttribute","focus","options","origin","focusVia","nativeElement","ngOnInit","listen","ngDoCheck","_updateTabIndex","ngAfterViewInit","monitor","focusOrigin","runOutsideAngular","_onInputClick","stopMonitoring","_isRippleDisabled","_onInputInteraction","event","stopPropagation","groupValueChanged","_onTouchTargetClick","preventDefault","group","input","setAttribute","afterNextRender","queueMicrotask","document","activeElement","blur","injector","viewQuery","first","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","_r1","$event","dependencies","MatRipple","_MatInternalFormField","styles","encapsulation","changeDetection","MatRadioModule","imports","MatCommonModule","MatRippleModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/radio.mjs"],"sourcesContent":["import { _IdGenerator, FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { forwardRef, InjectionToken, inject, ChangeDetectorRef, EventEmitter, booleanAttribute, Directive, Output, ContentChildren, Input, ElementRef, NgZone, Renderer2, Injector, ANIMATION_MODULE_TYPE, HostAttributeToken, numberAttribute, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { _StructuralStylesLoader, MatRipple, _MatInternalFormField, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\n\n/** Change event object emitted by radio button and radio group. */\nclass MatRadioChange {\n    source;\n    value;\n    constructor(\n    /** The radio button that emits the change event. */\n    source, \n    /** The value of the radio button. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true,\n};\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        disabledInteractive: false,\n    };\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    _changeDetector = inject(ChangeDetectorRef);\n    /** Selected value for the radio group. */\n    _value = null;\n    /** The HTML name attribute applied to radio buttons in this group. */\n    _name = inject(_IdGenerator).getId('mat-radio-group-');\n    /** The currently selected radio button. Should match value. */\n    _selected = null;\n    /** Whether the `value` has been set to its initial value. */\n    _isInitialized = false;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    _labelPosition = 'after';\n    /** Whether the radio group is disabled. */\n    _disabled = false;\n    /** Whether the radio group is required. */\n    _required = false;\n    /** Subscription to changes in amount of radio buttons. */\n    _buttonChanges;\n    /** The method to be called in order to update ngModel */\n    _controlValueAccessorChangeFn = () => { };\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched = () => { };\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    change = new EventEmitter();\n    /** Child radio buttons. */\n    _radios;\n    /**\n     * Theme color of the radio buttons in the group. This API is supported in M2\n     * themes only, it has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/radio/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = value;\n        this._markRadiosForCheck();\n    }\n    /** Whether buttons in the group should be interactive while they're disabled. */\n    get disabledInteractive() {\n        return this._disabledInteractive;\n    }\n    set disabledInteractive(value) {\n        this._disabledInteractive = value;\n        this._markRadiosForCheck();\n    }\n    _disabledInteractive = false;\n    constructor() { }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n        // Clear the `selected` button when it's destroyed since the tabindex of the rest of the\n        // buttons depends on it. Note that we don't clear the `value`, because the radio button\n        // may be swapped out with a similar one and there are some internal apps that depend on\n        // that behavior.\n        this._buttonChanges = this._radios.changes.subscribe(() => {\n            if (this.selected && !this._radios.find(radio => radio === this.selected)) {\n                this._selected = null;\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._buttonChanges?.unsubscribe();\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatRadioGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: MatRadioGroup, isStandalone: true, selector: \"mat-radio-group\", inputs: { color: \"color\", name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: [\"disabled\", \"disabled\", booleanAttribute], required: [\"required\", \"required\", booleanAttribute], disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"radiogroup\" }, classAttribute: \"mat-mdc-radio-group\" }, providers: [\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ], queries: [{ propertyName: \"_radios\", predicate: i0.forwardRef(() => MatRadioButton), descendants: true }], exportAs: [\"matRadioGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatRadioGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-radio-group',\n                    exportAs: 'matRadioGroup',\n                    providers: [\n                        MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                        { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                    ],\n                    host: {\n                        'role': 'radiogroup',\n                        'class': 'mat-mdc-radio-group',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { change: [{\n                type: Output\n            }], _radios: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatRadioButton), { descendants: true }]\n            }], color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\nclass MatRadioButton {\n    _elementRef = inject(ElementRef);\n    _changeDetector = inject(ChangeDetectorRef);\n    _focusMonitor = inject(FocusMonitor);\n    _radioDispatcher = inject(UniqueSelectionDispatcher);\n    _defaultOptions = inject(MAT_RADIO_DEFAULT_OPTIONS, {\n        optional: true,\n    });\n    _ngZone = inject(NgZone);\n    _renderer = inject(Renderer2);\n    _uniqueId = inject(_IdGenerator).getId('mat-radio-');\n    _cleanupClick;\n    /** The unique ID for the radio button. */\n    id = this._uniqueId;\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    name;\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    ariaLabel;\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    ariaLabelledby;\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    ariaDescribedby;\n    /** Whether ripples are disabled inside the radio button */\n    disableRipple = false;\n    /** Tabindex of the radio button. */\n    tabIndex = 0;\n    /** Whether this radio button is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        if (this._checked !== value) {\n            this._checked = value;\n            if (value && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!value && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (value) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    _labelPosition;\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(value);\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = value;\n    }\n    /**\n     * Theme color of the radio button. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/radio/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        // As per M2 design specifications the selection control radio should use the accent color\n        // palette by default. https://m2.material.io/components/radio-buttons#specs\n        return (this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            (this._defaultOptions && this._defaultOptions.color) ||\n            'accent');\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    _color;\n    /** Whether the radio button should remain interactive when it is disabled. */\n    get disabledInteractive() {\n        return (this._disabledInteractive || (this.radioGroup !== null && this.radioGroup.disabledInteractive));\n    }\n    set disabledInteractive(value) {\n        this._disabledInteractive = value;\n    }\n    _disabledInteractive;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    change = new EventEmitter();\n    /** The parent radio group. May or may not be present. */\n    radioGroup;\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Whether this radio is checked. */\n    _checked = false;\n    /** Whether this radio is disabled. */\n    _disabled;\n    /** Whether this radio is required. */\n    _required;\n    /** Value assigned to this radio. */\n    _value = null;\n    /** Unregister function for _radioDispatcher */\n    _removeUniqueSelectionListener = () => { };\n    /** Previous value of the input's tabindex. */\n    _previousTabIndex;\n    /** The native `<input type=radio>` element */\n    _inputElement;\n    /** Trigger elements for the ripple events. */\n    _rippleTrigger;\n    /** Whether animations are disabled. */\n    _noopAnimations;\n    _injector = inject(Injector);\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        const radioGroup = inject(MAT_RADIO_GROUP, { optional: true });\n        const animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n        const tabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        this._disabledInteractive = this._defaultOptions?.disabledInteractive ?? false;\n        if (tabIndex) {\n            this.tabIndex = numberAttribute(tabIndex, 0);\n        }\n    }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n        this._removeUniqueSelectionListener = this._radioDispatcher.listen((id, name) => {\n            if (id !== this.id && name === this.name) {\n                this.checked = false;\n            }\n        });\n    }\n    ngDoCheck() {\n        this._updateTabIndex();\n    }\n    ngAfterViewInit() {\n        this._updateTabIndex();\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n        // We bind this outside of the zone, because:\n        // 1. Its logic is completely DOM-related so we can avoid some change detections.\n        // 2. There appear to be some internal tests that break when this triggers a change detection.\n        this._ngZone.runOutsideAngular(() => {\n            this._cleanupClick = this._renderer.listen(this._inputElement.nativeElement, 'click', this._onInputClick);\n        });\n    }\n    ngOnDestroy() {\n        this._cleanupClick?.();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n    _onInputInteraction(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        if (!this.checked && !this.disabled) {\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        }\n    }\n    /** Triggered when the user clicks on the touch target. */\n    _onTouchTargetClick(event) {\n        this._onInputInteraction(event);\n        if (!this.disabled || this.disabledInteractive) {\n            // Normally the input should be focused already, but if the click\n            // comes from the touch target, then we might have to focus it ourselves.\n            this._inputElement?.nativeElement.focus();\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** Called when the input is clicked. */\n    _onInputClick = (event) => {\n        // If the input is disabled while interactive, we need to prevent the\n        // selection from happening in this event handler. Note that even though\n        // this happens on `click` events, the logic applies when the user is\n        // navigating with the keyboard as well. An alternative way of doing\n        // this is by resetting the `checked` state in the `change` callback but\n        // it isn't optimal, because it can allow a pre-checked disabled button\n        // to be un-checked. This approach seems to cover everything.\n        if (this.disabled && this.disabledInteractive) {\n            event.preventDefault();\n        }\n    };\n    /** Gets the tabindex for the underlying input element. */\n    _updateTabIndex() {\n        const group = this.radioGroup;\n        let value;\n        // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n        // necessary, because the browser handles the tab order for inputs inside a group automatically,\n        // but we need an explicitly higher tabindex for the selected button in order for things like\n        // the focus trap to pick it up correctly.\n        if (!group || !group.selected || this.disabled) {\n            value = this.tabIndex;\n        }\n        else {\n            value = group.selected === this ? this.tabIndex : -1;\n        }\n        if (value !== this._previousTabIndex) {\n            // We have to set the tabindex directly on the DOM node, because it depends on\n            // the selected state which is prone to \"changed after checked errors\".\n            const input = this._inputElement?.nativeElement;\n            if (input) {\n                input.setAttribute('tabindex', value + '');\n                this._previousTabIndex = value;\n                // Wait for any pending tabindex changes to be applied\n                afterNextRender(() => {\n                    queueMicrotask(() => {\n                        // The radio group uses a \"selection follows focus\" pattern for tab management, so if this\n                        // radio button is currently focused and another radio button in the group becomes\n                        // selected, we should move focus to the newly selected radio button to maintain\n                        // consistency between the focused and selected states.\n                        if (group &&\n                            group.selected &&\n                            group.selected !== this &&\n                            document.activeElement === input) {\n                            group.selected?._inputElement.nativeElement.focus();\n                            // If this radio button still has focus, the selected one must be disabled. In this\n                            // case the radio group as a whole should lose focus.\n                            if (document.activeElement === input) {\n                                this._inputElement.nativeElement.blur();\n                            }\n                        }\n                    });\n                }, { injector: this._injector });\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatRadioButton, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.2.0\", type: MatRadioButton, isStandalone: true, selector: \"mat-radio-button\", inputs: { id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], checked: [\"checked\", \"checked\", booleanAttribute], value: \"value\", labelPosition: \"labelPosition\", disabled: [\"disabled\", \"disabled\", booleanAttribute], required: [\"required\", \"required\", booleanAttribute], color: \"color\", disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, outputs: { change: \"change\" }, host: { listeners: { \"focus\": \"_inputElement.nativeElement.focus()\" }, properties: { \"attr.id\": \"id\", \"class.mat-primary\": \"color === \\\"primary\\\"\", \"class.mat-accent\": \"color === \\\"accent\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\", \"class.mat-mdc-radio-checked\": \"checked\", \"class.mat-mdc-radio-disabled\": \"disabled\", \"class.mat-mdc-radio-disabled-interactive\": \"disabledInteractive\", \"class._mat-animation-noopable\": \"_noopAnimations\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" }, classAttribute: \"mat-mdc-radio-button\" }, viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"_rippleTrigger\", first: true, predicate: [\"formField\"], descendants: true, read: ElementRef, static: true }], exportAs: [\"matRadioButton\"], ngImport: i0, template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mdc-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled])~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-hover-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-hover-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-pressed-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-pressed-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mdc-radio-state-layer-size, 40px);height:var(--mdc-radio-state-layer-size, 40px);top:calc(-1*(var(--mdc-radio-state-layer-size, 40px) - 20px)/2);left:calc(-1*(var(--mdc-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mdc-radio-state-layer-size, 40px);height:var(--mdc-radio-state-layer-size, 40px)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-selected-focus-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-sys-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-sys-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-sys-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-sys-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple>.mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio>.mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-focus-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:48px;width:48px;transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display, block)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\"], dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"component\", type: _MatInternalFormField, selector: \"div[mat-internal-form-field]\", inputs: [\"labelPosition\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatRadioButton, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-radio-button', host: {\n                        'class': 'mat-mdc-radio-button',\n                        '[attr.id]': 'id',\n                        '[class.mat-primary]': 'color === \"primary\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        '[class.mat-mdc-radio-checked]': 'checked',\n                        '[class.mat-mdc-radio-disabled]': 'disabled',\n                        '[class.mat-mdc-radio-disabled-interactive]': 'disabledInteractive',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        // Note: under normal conditions focus shouldn't land on this element, however it may be\n                        // programmatically set, for example inside of a focus trap, in this case we want to forward\n                        // the focus to the native element.\n                        '(focus)': '_inputElement.nativeElement.focus()',\n                    }, exportAs: 'matRadioButton', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatRipple, _MatInternalFormField], template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mdc-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:not([disabled])~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-hover-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:hover>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-hover-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-pressed-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:active>.mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-pressed-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mdc-radio-state-layer-size, 40px);height:var(--mdc-radio-state-layer-size, 40px);top:calc(-1*(var(--mdc-radio-state-layer-size, 40px) - 20px)/2);left:calc(-1*(var(--mdc-radio-state-layer-size, 40px) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mdc-radio-state-layer-size, 40px);height:var(--mdc-radio-state-layer-size, 40px)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background>.mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-selected-focus-icon-color, var(--mat-sys-primary))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-sys-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity, 0.38)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background>.mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-sys-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity, 0.38)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-sys-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-sys-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-sys-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-sys-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple>.mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio>.mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background>.mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-focus-icon-color, var(--mat-sys-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:48px;width:48px;transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display, block)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\"] }]\n        }], ctorParameters: () => [], propDecorators: { id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], checked: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], value: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], color: [{\n                type: Input\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], change: [{\n                type: Output\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], _rippleTrigger: [{\n                type: ViewChild,\n                args: ['formField', { read: ElementRef, static: true }]\n            }] } });\n\nclass MatRadioModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatRadioModule, imports: [MatCommonModule, MatRippleModule, MatRadioGroup, MatRadioButton], exports: [MatCommonModule, MatRadioGroup, MatRadioButton] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatRadioModule, imports: [MatCommonModule, MatRippleModule, MatRadioButton, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule, MatRadioGroup, MatRadioButton],\n                    exports: [MatCommonModule, MatRadioGroup, MatRadioButton],\n                }]\n        }] });\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule };\n"],"x_google_ignoreList":[0]}