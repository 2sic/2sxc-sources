{"version":3,"file":"default-projects_eav-ui_src_app_edit_form_form-config_service_ts-projects_eav-ui_src_app_edit-b26668.de29edbdce9e345b.js","mappings":"yQAOA,MAAMA,EAAW,CACfC,KAAK,EACLC,YAAY,EACZC,gBAAgB,GAIZC,EAAqB,YAErBC,EAAc,WAcb,IAAMC,EAAU,MAAjB,MAAOA,UAAkBC,IAI7BC,GACAC,GAEAC,YAAoBC,GAClBC,QADkBC,KAAAF,WALpBE,KAAAC,OAAMC,MAAS,CAACT,aAAYN,GAE5Ba,MAAAL,KAAcQ,OAAOC,KACrBJ,MAAAJ,KAAcO,OAAOE,KAUdL,KAAAM,UAASC,OAAe,IAE/BP,MAAAQ,EAAYR,MAAKL,EAAYc,MAAMC,SACnCV,MAAAW,EAAeX,MAAKL,EAAYiB,OAChCZ,MAAAa,GAAiB,EAMjBb,MAAAc,KAAcP,UAAuBA,OAAe,KAMpDP,MAAAe,KAAQC,OAAS,IAAMhB,MAAKc,GAALd,IAGvBA,MAAAiB,KAAoBD,OAAS,IAAMhB,MAAKkB,EAAmBlB,MAAKe,MAzB9Df,KAAKC,IAAIkB,EAAE,cACb,CAOAX,GACAG,GACAE,GAMAC,GAMAC,GAGAE,GAiBOG,aAAaC,GAClB,OAAArB,KAAKC,IAAIkB,EAAE,gBACXnB,KAAKsB,SAAWD,EACTrB,IACT,CAEOuB,KAAKC,EAAcC,EAAcC,GAAyB,GAC/D,OAAO1B,KAAKX,WAAWmC,KAAMjB,OAAOkB,GACtC,CAEOpC,WAAWmC,EAAcC,GAC9BzB,KAAKC,IAAI0B,WAAW,IAAIH,KACxB,MAAMI,EAAI5B,KAAKC,IAAI4B,KAAK,aAAc,CAAEL,OAAMC,SAC9C,OAAAzB,MAAKc,EAAYgB,IAAIL,GACrBzB,MAAK+B,IACEH,EAAEI,EAAEhC,KAAM,gBAAkBA,KAAKM,SAC1C,CAMO2B,aAEL,MAAML,EAAI5B,KAAKC,IAAIiC,QAAUlC,KAAKC,OAAMC,MAAS,CAACT,cAClD0C,gBAAO,IAAMP,EAAET,EAAE,SAASnB,MAAKe,0BAA8Bf,KAAKM,YAAa,CAAER,SAAUE,KAAKF,WACzFE,IACT,CAEA+B,KAGE/B,MAAKoC,IACLpC,MAAKqC,GACP,CAOAC,KAGE,IAAKC,EAAgBvC,MAAKe,KACxB,OAAOf,MAAKe,IAEd,IAAIyB,EAuFR,SAASC,EAA8BD,GACrC,OAAOA,EAAME,QAAQ,gBAAiB,CAACC,EAAGlC,IAAU,IAAIA,EAAMmC,iBAChE,CAzFgBH,CAA8BzC,MAAKe,KAGvB,MAApBf,MAAKJ,IACP4C,EAAQA,EACLE,QAAQ,cAAe1C,MAAKJ,EAAYgB,OAAOiC,MAAMC,YACrDJ,QAAQ,eAAgB1C,MAAKJ,EAAYgB,OAAOmC,OAAOD,aAGnC,MAArB9C,MAAKW,IACP6B,EAAQA,EACLE,QAAQ,SAAU1C,MAAKW,EAAaqC,YACpCN,QAAQ,cAAe1C,MAAKW,EAAaqC,YACzCN,QAAQ,OAAQ1C,MAAKW,EAAasC,SAASH,YAC3CJ,QAAQ,YAAa1C,MAAKW,EAAasC,SAASH,aAErD,MAAMI,EAAmBlD,MAAKiB,IAAoBkC,KAClD,OAAKD,GAGLA,EAAiBE,QAAQ,CAACC,EAAGC,KAC3B,MAAMC,EAAevD,MAAKQ,IAAY6C,IAAIb,OAAS,GAC7CgB,EAAUxD,KAAKsB,SAAS+B,EAAGE,GAEjCf,EAAQA,EAAME,QAAQ,SAAWW,EAAET,cAAgB,IAAKY,GAExDhB,EAAQA,EAAME,QAAQ,IAAMW,EAAET,cAAgB,IAAKY,EAAO,GAErDhB,CACT,CAGAtB,GAAmBO,GAEjB,IAAKA,IAASc,EAAgBd,GAC5B,MAAO,GAET,MAAMgC,EAAUhC,EAAKiC,MAAMnE,GAE3B,OAAKkE,EAIE,CAAEN,KADgBM,EAAQE,IAAIC,GAASA,EAAMlB,QAAQlD,EAAa,MAFhE,EAIX,CAMQ8B,SAASuC,EAAarB,GAAyB,OAAOA,CAAO,CAGrEH,KACE,MAAMyB,EAAW9D,MAAKsC,IACtBtC,KAAKM,OAAOwB,IAAIgC,EAClB,CAMA1B,KACE,MAAMR,EAAI5B,KAAKC,IAAI4B,KAAK,kBAClBqB,EAAmBlD,MAAKiB,IAAoBkC,KAClD,IAAKD,EACH,OAAOtB,EAAEmC,IAAI,wBAGf,MAAMrD,EAAWwC,EACdS,IAAIK,GAAKhE,MAAKQ,EAAUwD,IACxBC,OAAOD,GAAU,MAALA,GAEf,GAAuB,GAAnBtD,EAASwD,OACX,OAAOtC,EAAEmC,IAAI,sBAEfrD,EAAS0C,QAAQe,GAAKnE,KAAKoE,cAAcC,IAAIF,EAAEG,aAAaC,UAAU5B,GAAK3C,MAAKqC,OAChFT,EAAEmC,KACJ,iDAhLWtE,GAAS+E,aAAA,sCAAT/E,EAASgF,QAAThF,EAASiF,WAAA,SAATjF,CAAU,KAoLvB,SAAS8C,EAAgBd,GACvB,OAAQA,GAAQ,IAAIkD,SAAS,IAC/B,gIC3MA,MAAMxF,EAAW,CACfyF,WAAW,EACXC,aAAa,EACbC,iBAAiB,GAIZ,IAAMC,EAAoB,MAA3B,MAAOA,UAA4BC,IAEvCnF,cACEE,OAAA,EAAMG,MAAS,CAAC6E,uBAAsB5F,IAGrBa,KAAAiF,MAASC,GAA8BA,EAAKC,OAE5CnF,KAAAoF,YAAeF,QAC7BG,IAAaC,MAChBC,QAASL,EAAKM,WACXN,IAkCLlF,MAAAyF,EAAqB,IAAIC,IAA0C,gBAenE1F,MAAA2F,EAA0B,IAAID,IAAqC,aAxDnE,CAUAE,QAAQT,EAAgBU,EAAiBL,EAAiBM,GACxD9F,KAAKqE,IAAI,CACPc,SACAK,UACAD,QAASC,EACTK,UACAC,cAEJ,CAEAC,WAAWZ,EAAgBa,GACzBhG,KAAKiG,OAAOd,EAAQ,CAAEK,QAASQ,GACjC,CASAE,gBAAgBf,GACd,MAAMvD,EAAI5B,KAAKC,IAAI4B,KAAK,YAAa,CAAEsD,WAEjCgB,EAAMnG,MAAKyF,EAAmBW,oBAAoBjB,EAAQ,KAC9D,MAAMkB,EAAWrG,KAAKsG,UAAUnB,EAAfnF,IAA4BqF,IAAaC,QAE1D,OADWtF,KAAKC,IAAI4B,KAAK,kBAAmB,CAAEwE,aACvC,IAAIE,KAAaF,EAAQ,GAElC,OAAOzE,EAAE4E,QAAQL,EAAI5F,OAAQ,UAAU4F,EAAIM,QAC7C,CACAhB,GAGAiB,aAAavB,GACX,OAAOnF,KAAK2G,OAAOC,QACjBjD,KAAIkD,GAAqBA,EAAkB1B,KAAO,EAClD2B,KAAgBC,GAAKA,IAAC,EACtBC,KAAY,GAEhB,CAGAC,oBAAoB9B,GAClB,OAAOnF,MAAK2F,EAAwBuB,YAAY/B,EAAQ,IAAMnF,KAAKmH,QAAQhC,IAASW,aAAc,EACpG,CACAH,GAIAyB,iBAAiBjC,EAAgBW,GAC/B9F,KAAKiG,OAAOd,EAAQ,CAAEW,cACxB,iDAlEWf,EAAmB,sCAAnBA,EAAmBN,QAAnBM,EAAmBL,UAAA2C,WADN,QAAM,SACnBtC,CAAoB,0HCT3B,MAAOuC,EAMX,yBAAOC,CAAmBC,EAAsBC,EAA6BC,GAE3E,MAAMC,EAAkB,IADPH,EAAOI,QAA6BH,EAAYI,WAEjEF,SAAgBG,cAAgB,GAChCH,EAAgBI,mBAAqB,GACrCJ,EAAgBK,WAAa,GAC7BL,EAAgBM,QAAU,GAC1BN,EAAgBO,mBAAqB,GACrCP,EAAgBQ,QAAU,GAC1BR,EAAgBS,OAAS,GACzBT,EAAgBU,OAAS,GACzBV,EAAgBW,WAAatI,KAAKuI,SAASd,EAAaD,GACxDG,EAAgBa,gBAAkBd,EAAWe,iBAAkB,EAC/Dd,EAAgBe,aAAehB,EAAWiB,UAAW,EAC9ChB,CACT,CAEA,eAAOY,CAASd,EAA6BpB,GAC3C,IAEE,MAAMuC,EAAOnB,EAAYI,SAASgB,KAAKC,GAAmC,gBAAvBA,EAASC,KAAKC,MAAiD,mBAAvBF,EAASC,KAAKC,MACzG,IAAIC,EAASL,EACT,IAAIM,IAAYN,EAAKO,WAAWlB,MAAO5B,GAAU+C,kBAAkBC,MACnE,KACJJ,SAAQA,GAASxB,EAAYuB,KACtBC,CACT,OACE,OAAOxB,EAAYuB,IACrB,CACF,gBC1CK,IAAMM,EAAe,MAAtB,MAAOA,SACItJ,KAAAuJ,YAAc,MAAO,QACrBvJ,KAAAwJ,iBAA2C,CACxDC,IAAK,YACLC,KAAM,YACNC,IAAK,aACLC,KAAM,aACNC,IAAK,kBACLC,KAAM,kBACNC,IAAK,WACLC,IAAK,aACLC,IAAK,aACLC,IAAK,aACLC,KAAM,aACNC,IAAK,aACLC,IAAK,aACLC,IAAK,eACLC,IAAK,eACLC,IAAK,YACLC,KAAM,YACNC,IAAK,YACLC,IAAK,YACLC,IAAK,YACL,QACa5K,KAAA6K,cAAwC,CACrDC,IAAK,SACL,CAEF,mBAAOC,CAAaC,GAClB,OAAOA,EAASC,UAAUD,EAASE,YAAY,KAAO,GAAGC,mBAC3D,CAEA,mBAAOC,CAAaJ,GAClB,MAAMK,EAAMrL,KAAK+K,aAAaC,GAC9B,OAAOhL,KAAK6K,cAAcQ,IAAQrL,KAAKwJ,iBAAiB6B,IAAQrL,KAAKuJ,WACvE,CAEA,kBAAO+B,CAAYN,GACjB,OAA0D,MAAnDhL,KAAK6K,cAAc7K,KAAK+K,aAAaC,GAC9C,CAEA,cAAOO,CAAQP,GACb,OAAOhL,KAAKwL,aAAaC,KAAKT,EAChC,CAEQ,iBAAOQ,GACb,MAAO,kGACT,SA/CWlC,CAAe,6BCUtB,MAAOoC,EAIX7L,YACU2B,EACAmK,EACAC,EACAlE,GAHA1H,KAAAwB,OACAxB,KAAA2L,YACA3L,KAAA4L,WACA5L,KAAA0H,aANV1H,KAAAC,OAAMC,MAAS,CAACwL,iBAOZ,CAGJG,yBAAyBC,GAEvB,MAAMH,EAAY3L,KAAK2L,UACjBnK,EAAOxB,KAAKwB,KACZoK,EAAW5L,KAAK4L,SAChBlE,EAAa1H,KAAK0H,WAClB9F,EAAI5B,KAAKC,IAAI8L,GAAG,oBAAqB,CAAEvK,OAAMmK,YAAWC,WAAUlE,aAAYoE,gBAE9EE,EAAatE,GAAYuE,UAAUzK,GACzC,GAAIsK,QAA8BI,IAAfF,EACjB,OAAOpK,EAAEuK,MAAM,2CAEjB,IAAIC,EAAeJ,GAAYlJ,YAAc8I,EAASS,aAItD,OAFAzK,EAAE0K,OAAO,CAAEF,iBAEHT,GACN,KAAKY,IAAiBC,eACpB,MAAuC,SAAhCJ,GAAcxJ,cACvB,KAAK2J,IAAiBE,gBACpB,OAAuB,MAAhBL,GAAyC,KAAjBA,EACI,SAA/BA,EAAaxJ,cACb,KACN,KAAK2J,IAAiBG,gBACpB,OAAuB,MAAhBN,GAAyC,KAAjBA,EAC3B,IAAIO,KAAKP,GAAcQ,SACvB,KACN,KAAKL,IAAiBM,cACtB,KAAKN,IAAiBO,eACtB,KAAKP,IAAiBQ,aACpB,OAAuB,MAAhBX,GAAyC,KAAjBA,EAC1BY,MAAMC,OAAOb,IAAwC,KAAvBa,OAAOb,GACtC,KACN,KAAKG,IAAiBW,cACtB,KAAKX,IAAiBY,YACtB,KAAKZ,IAAiBa,oBACtB,KAAKb,IAAiBc,aAEpB,GAAoB,MAAhBjB,GAAyC,KAAjBA,EAC1B,MAAO,GAQT,GAJIA,EAAazH,SAAS,OACxByH,EAAeA,EAAa1J,QAAQ,UAAW,MAG7C0J,EAAazH,SAAS,OAASyH,EAAazH,SAAS,KAAM,CAC7D,MAAM2I,EAAQlB,EAAamB,MAAM,KAAK5J,IAAI6J,GAAQA,EAAKC,QACvDrB,EAAesB,KAAKC,UAAUL,EAChC,CAGA,OAAOlB,EAAawB,WAAW,KAC3BF,KAAKG,MAAMzB,GACX,CAACA,EAAa1J,QAAQ,KAAM,KAClC,QACE,OAAO0J,GAAgB,GAE7B,UCjFI,MAAO0B,EAEH,sBAAOC,CAAgBC,EAAmBC,GAEhD,IAAKD,EAAa,OAAOA,EAEzB,KAAOA,EAAU/C,UAAU,EAAG,KAAOgD,GACnCD,EAAYA,EAAU/C,UAAU,GAElC,OAAO+C,CACT,CAEQ,oBAAOE,CAAcF,EAAmBC,GAE9C,IAAKD,EAAa,OAAOA,EAEzB,KAAOA,EAAU/C,UAAU+C,EAAU9J,OAAS,EAAG8J,EAAU9J,UAAY+J,GACrED,EAAYA,EAAU/C,UAAU,EAAG+C,EAAU9J,OAAS,GAExD,OAAO8J,CACT,CAEQ,mBAAOG,CAAaH,GAE1B,IAAKA,EAAa,OAAOA,EAEzB,MAAMI,EAAW,IAMjB,OAAOJ,EACJtL,QANe,mBAMI0L,GACnB1L,QANe,wBAMI0L,GACnB1L,QANgB,QAMI0L,GACpB1L,QANuB,gDAMI0L,GAC3B1L,QANuB,UAMI0L,EAChC,CAGA,mBAAOC,CAAaL,GAElB,OAAKA,IAGLA,EAAYhO,KAAK+N,gBAAgBC,EAAW,KAG5CA,EAAYhO,KAAKkO,cAAcF,EAAW,KAG1CA,EAAYhO,KAAK+N,gBAAgBC,EAAW,MAG5CA,EAAYhO,KAAKkO,cAAcF,EAAW,MAG9BhO,KAAKmO,aAAaH,GAGhC,CAGA,mBAAOM,CAAaN,GAElB,OAAKA,EAMEhO,KAAKqO,aAAaL,GAAWtL,QADlB,MADE,KAJKsL,CAO3B,iDCzEK,MAAMzB,EAAmB,CAE9BC,eAAgB,kBAChBC,gBAAiB,mBAGjB8B,cAAe,iBACfC,UAAW,aACXC,iBAAkB,qBAGlB/B,gBAAiB,mBAEjBgC,cAAe,WAGfC,aAAc,gBACdC,SAAU,YACVC,aAAc,gBAGdzB,oBAAqB,wBACrBF,cAAe,iBACfC,YAAa,eAGb2B,qBAAsB,yBAGtBC,iBAAkB,oBAClBC,iBAAkB,oBAGlBnC,cAAe,iBACfC,eAAgB,kBAGhBmC,cAAe,iBACfC,eAAgB,kBAChBC,oBAAqB,wBACrBC,qBAAsB,0BACtBC,WAAY,cACZC,qBAAsB,yBACtBC,cAAe,kBACfC,cAAe,iBAGfnC,aAAc,gBACdoC,aAAc,gBACd1C,aAAc,gBAGd2C,QAAS,4CCpDL,MAAOC,EAMX,oBAAOC,CAAiB1K,EAAS2K,GAC/B,MAAMC,EAAQD,EAAME,QAAQ7K,IACd,IAAV4K,EACFD,EAAMG,KAAK9K,GAEX2K,EAAMI,OAAOH,EAAO,EAExB,4DCPF,MAAM3Q,EAAW,CACfC,KAAK,EACLS,aAAa,GAGT,MAAO0G,EAWX1G,YAAY2F,EAAgCK,GAT5C7F,KAAAC,OAAMC,MAAS,CAACqG,gBAAepH,GAU7Ba,KAAKC,IAAI4B,KAAK,cAAe,CAAE2D,UAASK,YACjB,iBAAZL,GACTxF,KAAKwF,QAAUA,EACfxF,KAAK6F,QAAUA,IAEf7F,KAAKwF,QAAUA,EAAQA,QACvBxF,KAAK6F,QAAUL,EAAQK,QAE3B,CAIAqK,aAAgBC,EAA8B/D,EAAkB,MAE9D,OADoB,IAAIlD,IAAeiH,EAAiBnQ,MACrCoQ,uBAAuB/G,OAAS+C,CAErD,CAEOxE,QAAWkB,GAChB,GAAgB,MAAZA,EACF,MAAO,GAET,MAAMuH,EAAgBC,MAAMC,QAAQzH,GAAYA,EAAW,CAACA,GAC5D,GAA6B,IAAzBuH,EAAcnM,QAAoC,MAApBmM,EAAc,GAC9C,MAAO,GAET,MAAMG,EAA8B,GAEpC,UAAWtL,KAAQmL,EACjB,GAAqB,SAAjBnL,EAAK6D,KAAK0H,GAEd,UAAYjP,EAAM8K,KAAWoE,OAAOC,QAAQzL,EAAKiE,YAAa,CAC5D,MAAM3G,EAAQxC,KAAKkQ,aAAa5D,GAChCkE,EAAOhP,GAAQgB,CACjB,CAIF,UAAW0C,KAAQmL,EACjB,GAAqB,SAAjBnL,EAAK6D,KAAK0H,GAEd,UAAYjP,EAAM8K,KAAWoE,OAAOC,QAAQzL,EAAKiE,YAAa,CAC5D,MAAM3G,EAAQxC,KAAKkQ,aAAa5D,GAED,MAAhBkE,EAAOhP,KACI,MAATgB,GAA2B,KAAVA,KAGlCgO,EAAOhP,GAAQgB,EACjB,CAGF,OAAOgO,CACT,CAEAI,cAAcC,GAQZ,OANyCH,OAAOC,QAAQE,GACrDC,OAAO,CAACC,GAAMvP,EAAM8K,MACnByE,EAAIvP,GAAQxB,KAAKkQ,aAAa5D,GACvByE,GACN,GAGP,sEC5EI,MAAgBC,EAIpBnR,YAAYI,GAOZD,MAAAiR,KAASC,MAAgC,QAAS,IAGlDlR,MAAAmR,KAAQC,MAAY,OAAQ,IAAMV,OAAOpE,OAAOtM,MAAKiR,MAa3CjR,KAAAiF,MAAiCC,GAAUA,EAAamM,GAExDrR,KAAAoF,YAAyCF,GAASA,EAqG5DlF,MAAAsR,EAAoB,IAAI5L,IAAkC,QA7HxD1F,KAAKC,IAAMA,MAAOC,MAAS,CAAC8Q,oBAC5BhR,KAAKC,IAAIkB,EAAE,2BACXnB,KAAKwB,KAAOxB,KAAKC,IAAIuB,IACvB,CAGAyP,GAGAE,GAGA,SAAchK,GAAwC,OAAOnH,MAAKiR,CAAQ,CAG1E,QAAcM,GAA2B,OAAOvR,MAAKmR,CAAO,CAgB5D9M,IAAIa,GACF,MAAMtD,EAAI5B,KAAKC,IAAI8L,GAAG,MAAO,CAAE7G,SAC/B,IAAKA,EACH,OAAOtD,EAAEmC,IAAI,gBAGf/D,MAAKiR,EAAOnP,IAAI,IACX9B,MAAKiR,IACR,CAACjR,KAAKiF,MAAMC,IAAQlF,KAAKoF,YAAYF,KAEvCtD,EAAEmC,IAAI,QACR,CAEAyN,QAAQC,GACN,IAAI7P,EAAI5B,KAAKC,IAAI8L,GAAG,UAAW,CAAE0F,UACjC,IAAKA,GAAyB,GAAhBA,EAAMvN,OAClB,OAAOtC,EAAEmC,IAAI,0BAGf,MAAMzD,EAASmR,EAAMX,OAAO,CAACC,EAAK7L,SAC7B6L,EACH,CAAC/Q,KAAKiF,MAAMC,IAAQlF,KAAKoF,YAAYF,KACnC,IAAKlF,MAAKiR,MAEdjR,MAAKiR,EAAOnP,IAAIxB,GAChBsB,EAAEmC,IAAI,QACR,CAEAkC,OAAOoL,EAAUnM,GACf,MAAMtD,EAAI5B,KAAKC,IAAI8L,GAAG,SAAU,CAAEsF,KAAInM,SACtC,IAAKmM,IAAOnM,EACV,OAAOtD,EAAEmC,IAAI,sBAEf,MAAM2N,EAAS1R,KAAK2R,IAAIN,GACxB,IAAKK,EACH,OAAO9P,EAAEmC,IAAI,gBAAgBsN,wBAG/B,MAAMO,EAAU,IAAKF,KAAWxM,GAGhClF,MAAKiR,EAAOnP,IAAI,IACX9B,MAAKiR,IACR5N,CAACgO,GAAKO,IAERhQ,EAAEmC,IAAI,UACR,CAEA8N,OAAOR,GACL,MAAMzP,EAAI5B,KAAKC,IAAI8L,GAAG,SAAU,CAAEsF,QAC1BhO,CAACgO,GAAK1O,KAAMmP,GAAiB9R,MAAKiR,IAC1CjR,MAAKiR,EAAOnP,IAAIgQ,GAChBlQ,EAAEmC,IAAI,UACR,CAEAgO,aACE,MAAMnQ,EAAI5B,KAAKC,IAAI8L,GAAG,cACtB/L,MAAKiR,EAAOnP,IAAI,IAChBF,EAAEmC,IAAI,UACR,CAMA4N,IAAIN,GACF,MAAM/Q,EAASN,MAAKiR,IAASI,GAC7B,OAAArR,KAAKC,IAAIkB,EAAE,OAAOkQ,SAAsB,MAAV/Q,EAAiB,MAAQ,IAAM,SACtDA,CACT,CAEA0R,SACE,MAAM1R,EAASN,MAAKmR,IACpB,OAAAnR,KAAKC,IAAIkB,EAAE,oBAAyBb,EAAO4D,gBACpC5D,CACT,CAEA2R,QAAQC,GACN,MAAMtQ,EAAI5B,KAAKC,IAAI8L,GAAG,UAAW,CAAEmG,QAC7B5R,EAAS4R,EACZvO,IAAI0N,GAAMrR,MAAKiR,IAASI,IACxBpN,OAAOiB,GAAgB,MAARA,GAClB,OAAOtD,EAAEI,EAAE1B,EAAQ,SAASA,EAAO4D,eACrC,CAMAoC,UAAU+K,GACR,MAAM/Q,EAASN,MAAKsR,EAAkBlL,oBAAoBiL,EAAI,IAAMrR,KAAK2R,IAAIN,IAC7E,OAAArR,KAAKC,IAAIkB,EAAE,aAAakQ,KAAO,CAAE5K,MAAOnG,EAAOmG,QACxCnG,EAAOC,MAChB,CACA+Q,GAGAa,cAAcD,GACZ,MAAM/L,KAAMiL,MAAY,UAAW,IAAMc,EAAIvO,IAAI0N,GAAMrR,KAAK2R,IAAIN,IAAKpN,OAAOiB,GAAgB,MAARA,IACpF,OAAAlF,KAAKC,IAAIkB,EAAE,kBAAmB,CAAE+Q,QACzB/L,CACT,CAEAiM,eACE,MAAMb,EAAOvR,MAAKmR,EAClB,OAAAnR,KAAKC,IAAIkB,EAAE,0BAA0BoQ,IAAOrN,gBACrCqN,CACT,sECrJF,MAAMpS,EAAW,CACfC,KAAK,EACLS,aAAa,GAGT,MAAOqJ,EAMXrJ,YAAYwS,EAAoBhM,GAJhCrG,KAAAC,OAAMC,MAAS,CAACgJ,eAAc/J,GAY9Ba,MAAAsS,GAAU,EAPRtS,KAAKC,IAAI4B,KAAK,cAAe,CAAEwQ,QAAOhM,aACtCrG,MAAKuS,EAASF,EACdrS,MAAKwS,EAAgC,iBAAbnM,EAAwB,CAAEb,QAASa,EAAUR,QAASQ,GAAaA,EAC3FrG,MAAKyS,EAAUJ,GAAOK,QAAU,GAChC1S,MAAKsS,GAAWD,IAAUA,EAAMK,QAAkC,IAAxBL,EAAMK,OAAOxO,MACzD,CAEAoO,GAEAC,GAEAE,GACAD,GAEA,WAAIhN,GACF,OAAOxF,KAAK2S,WAAW3S,MAAKwS,EAC9B,CAaA,oBAAIpJ,GACF,OAAIpJ,MAAKsS,EAAgB,KAClBtS,KAAKwF,SAEPxF,KAAK2S,WAAWtN,IAAauN,YAAY5S,MAAKwS,GACrD,CASA,yBAAIpC,GACF,OAAIpQ,MAAKsS,EAAgB,KAClBtS,KAAKoJ,kBAAoBpJ,MAAKyS,EAAQ,IAAM,IACrD,CAGAE,WAAWtM,GACT,OAAIrG,MAAKsS,EAAgB,KAClBtS,MAAKyS,EAAQxO,OAAO4O,GAAO,IAAIC,IAAgBD,EAAIE,WAAY1M,GAAU2M,YAAY,IAAM,IACpG,CAGA,cAAIC,GACF,GAAIjT,MAAKsS,EAAS,OAAO,EACzB,MAAMzM,EAAU7F,MAAKwS,EAAU3M,QAC/B,OAAO7F,MAAKyS,EAAQxO,OAAO4O,GAAOA,EAAIE,WAAWlK,KAAKqK,GAAKA,EAAE7J,QAAUxD,GAAuB,MAAZqN,EAAE7J,QAAgBnF,OAAS,CAC/G,CAEA,sBAAIiP,GACF,OAAInT,MAAKsS,GACFtS,MAAKyS,EAAQxO,OAAO4O,GAAO,IAAIC,IAAgBD,EAAIE,WAAY/S,MAAKwS,GAAWY,oBAAoBlP,OAAS,CACrH,CAGA,qBAAImP,GACF,OAAIrT,MAAKsS,GACFtS,MAAKsT,IAAoBpP,OAAS,CAC3C,CAGAqP,gBACE,OAAOvT,MAAKsT,IAAoBpP,MAClC,CAGAsP,4BACE,OAAOxT,MAAKsT,IAAoBrP,OAAOwP,GAAgB,IAAXA,EAAEpK,OAA0B,MAAXoK,EAAEpK,QAAgBnF,MACjF,CAMAoP,GAAkBjN,GAChB,OAAIrG,MAAKsS,EAAgB,IACzBjM,IAAarG,MAAKwS,EACXxS,MAAKyS,EAAQxO,OAAO4O,GAAO,IAAIC,IAAgBD,EAAIE,WAAY1M,GAAUqN,iBAClF,CAGA,mBAAIC,GACF,GAAI3T,MAAKsS,EAAS,OAAO,KACzB,MAAMsB,EAAY5T,MAAKwS,EAAUhN,QACjC,OAAOxF,MAAKyS,EAAQ5J,KAAK4K,GAAKA,EAAEV,WAAWlK,KAAKgL,GAAKA,EAAExK,QAAUuK,KAAe,IAClF,CAEAE,uCACE,OAAI9T,MAAKsS,GACFtS,MAAKsT,IAAoBpP,OAAS,CAC3C,mNCxGMM,MAAA,2BAAAA,MAAA,EAAAuP,EAAA,0EAAkDvP,MAAnC,mBAAAwP,EAAmCxP,CAAA,0BAAAA,MAAA,EAAAyP,EAAAC,8BAFpD1P,MAAA,QACEA,MAAA,EAAA2P,EAAA,wBAAA3P,OAGFA,8BAHEA,cAAA4P,EAAAC,+BASE7P,MADF,OACEA,CADE,YAEAA,MAAA,YACAA,MAAA,SAAKA,MAAA,gBAETA,sCAUQA,MAAA,aAA4CA,MAAA,GAA4BA,wCAAhDA,MAAA,QAAA8P,EAAAC,MAAoB/P,cAAA,GAAA8P,EAAAC,KAAA,oCAM5C/P,MAAA,iBAA8CA,MAAA,oBAAcA,+BAG5DA,MAAA,iBAA8CA,MAAA,YAAMA,iDAf1DA,MADF,OACEA,CADE,YAEAA,MAAA,YACAA,MAAA,YAA2EA,MAAA,yBAAA8P,EAAA9P,MAAAgQ,GAAAC,UAAAL,EAAA5P,MAAA,UAAAA,MAAS4P,EAAAM,OAAAJ,GAAY,GAC9F9P,MAAA,YACEA,MAAA,iBACAA,MAAA,EAAAmQ,EAAA,eAGAnQ,MAAA,aAA4CA,MAAA,GAC9CA,UACAA,MAAA,YAIEA,MAHA,GAAAoQ,EAAA,kBAGApQ,CAH0B,GAAAqQ,EAAA,mBASlCrQ,qDAlB4BA,MAAA,GAAAA,MAAA,UAAA8P,EAAAjD,KAAA+C,EAAAU,SAAA,eAGpBtQ,MAAA,GAAAA,MAAA8P,EAAAC,KAAA,MAGwB/P,cAAA,QAAA8P,EAAA9S,MAAoBgD,cAAA8P,EAAA9S,MAG5CgD,MAAA,GAAAA,MAAA8P,EAAAS,cAAA,MAGAvQ,cAAA8P,EAAAU,aAAA,gCAzBVxQ,MAAA,QACEA,MAAA,EAAAyQ,EAAA,UAQAzQ,MAAA,EAAA0Q,EAAA,eAAA1Q,OAwBFA,8BAhCEA,cAAA,IAAA4P,EAAAe,iBAAAjR,OAAA,MAQAM,cAAA4P,EAAAe,wCA+BE3Q,MAAA,oDAGAA,MAAA,iBAA8BA,MAAA,mBAAAA,MAAA4Q,GAAA,MAAAC,EAAA7Q,QAAA8Q,KAAAlB,EAAA5P,QAAA,OAAAA,MAAS4P,EAAAmB,OAAAF,EAAAhE,IAAe,GACpD7M,MAAA,GACFA,+CADEA,cAAA,IAAA4P,EAAAoB,QAAA7Q,SAAA0Q,EAAAhE,IAAA,yEAUE7M,MAAA,iBAA8CA,MAAA,oBAAcA,+BAG5DA,MAAA,iBAA8CA,MAAA,YAAMA,8BAQxDA,MAAA,2BAAAA,MAAA,EAAAiR,EAAA,0EAAkDjR,MAAnC,mBAAAwP,EAAmCxP,CAAA,0BAAAA,MAAA,EAAAyP,EAAAyB,8BAFpDlR,MAAA,QACEA,MAAA,EAAAmR,EAAA,wBAAAnR,OAGFA,mCAHEA,cAAA6Q,EAAAO,mDA1BFpR,MADF,OACEA,CADE,YAKAA,MAHA,EAAAqR,EAAA,aAGArR,CAHkC,EAAAsR,EAAA,mBAQlCtR,MAAA,YAA2EA,MAAA,yBAAA6Q,EAAA7Q,MAAAuR,GAAAT,KAAAlB,EAAA5P,QAAA,OAAAA,MAAS4P,EAAAM,OAAAW,GAAY,GAC9F7Q,MAAA,YACEA,MAAA,iBACAA,MAAA,UAAMA,MAAA,GACRA,UACAA,MAAA,YAIEA,MAHA,GAAAwR,EAAA,kBAGAxR,CAHuB,GAAAyR,EAAA,mBAQ7BzR,YACAA,MAAA,GAAA0R,EAAA,UAOF1R,yCA9BIA,MAAA,GAAAA,MAAA,IAAA6Q,EAAAO,SAAA1R,OAAA,MAGAM,cAAA6Q,EAAAO,SAAA1R,OAAA,QAKwBM,cAAA,UAAA6Q,EAAAhE,KAAA+C,EAAAU,SAAA,eAGdtQ,MAAA,GAAAA,MAAA6Q,EAAA7T,MAGNgD,MAAA,GAAAA,MAAA6Q,EAAAc,WAAA,MAGA3R,cAAA6Q,EAAAL,aAAA,MAMNxQ,cAAA6Q,EAAAO,SAAA1R,OAAA,GAAAkQ,EAAAoB,QAAA7Q,SAAA0Q,EAAAhE,IAAA,QCjDD,IAAM+E,EAAmB,MAA1B,MAAOA,EAgBXvW,YACmCwW,EACzBC,EACAC,GAFyBvW,KAAAqW,aACzBrW,KAAAsW,SACAtW,KAAAuW,YAfVvW,KAAAwW,cAAajW,OAAe,IAC5BP,KAAAyW,eAAclW,OAAyB,IACvCP,KAAAqU,QAAO9T,OAAuB,IAE9BP,KAAAmV,kBAAiBnU,OAAS,KACxB,MAAMwV,EAAaxW,KAAKwW,aAExB,OADoBxW,KAAKyW,cACNxS,OAAOiB,GAAQA,EAAK1D,KAAK2J,oBAAoBxG,SAAS6R,EAAWrL,qBAAoB,GAGlGnL,KAAA0W,gBAAeC,KAAUC,IAM7B,CAEJC,WACE7W,KAAK8U,SAAW9U,KAAK8W,sBACrB9W,KAAKwV,QAAU,GAEfxV,KAAK+W,YACP,CAEAC,UAAUR,GACRxW,KAAKwW,WAAW1U,IAAI0U,EACtB,CAEA9B,OAAOY,GAEU,MAAXA,EAAKjE,OACJiE,EAAKN,cAAgBM,EAAKP,gBAClBkC,OAAOC,QAAQlX,KAAKuW,UAAUY,QAAQ,2DAGnDnX,KAAKoX,YAAY9B,EAAKjE,IACxB,CAEAkE,OAAO8B,GACL1H,IAAaC,cAAcyH,EAAQrX,KAAKwV,QAC1C,CAEQ4B,YAAYC,GAClB,GAAc,MAAVA,EAEF,YADArX,KAAKsW,OAAOgB,QAId,MAAMhC,EAAOtV,KAAKyW,cAAc5N,KAAKvF,GAAKA,EAAE+N,KAAOgG,GAC7C/W,EAA2B,CAC/B+Q,GAAIiE,EAAKjE,GAAGvO,WACZtB,KAAM8T,EAAK9T,MAEbxB,KAAKsW,OAAOgB,MAAMhX,EACpB,CAEQyW,aACN,MAAMQ,EAAS,UAEfvX,KAAK0W,aAAac,aAAa,uBADhB,qBACgD,MAAMjT,UAAU,CAC7EkT,KAAOtU,IACL,IAAKA,EAEH,YADAuU,QAAQC,MAAM3X,KAAKuW,UAAUY,QAAQ,mCAGvC,IAAKhU,EAAKoU,GAER,YADAG,QAAQC,MAAM3X,KAAKuW,UAAUY,QAAQ,qCAAuC,IAAMI,GAGpF,MAAMK,EAAQzU,EAAKoU,GACbd,EC1GR,SAAUoB,EAAgBD,GAC9B,OAAKA,EAESA,EAAMjU,IAAI2R,IACtB,IAAIf,EAAOe,EAAKwC,KAAKrK,OAAO/K,QAAQ,MAAO,KAAKA,QAAQ,QAAS,KACjE,OAAI6R,EAAK3G,WAAW,OAClB2G,EAAOA,EAAKtJ,UAAU,IAExBsJ,EAAOA,EAAKhH,MAAM,KAAKwK,MAAM,GAAG,GAAIC,KAAK,OAEZ,CAC3B3G,GAAIiE,EAAK7E,GACTjP,KAAM8T,EAAKtM,KACXuL,OACAQ,aAAcO,EAAK2C,aACnBjD,YAAaM,EAAK4C,eAdD,EAoBvB,CDqF4BL,CAAgBD,GACpC5X,KAAKyW,YAAY3U,IAAI2U,GACrB,MAAMpC,ECrFR,SAAU8D,EAAcP,GAC5B,IAAKA,EAAS,MAAO,GAErB,MAAMnG,EAAQmG,EAAMjU,IAAI2R,KAEpBM,SAAU,GACVvE,GAAIiE,EAAK7E,GACTjP,KAAM8T,EAAKtM,KACXoP,SAAU9C,EAAK+C,SACftD,aAAcO,EAAK2C,aACnBjD,YAAaM,EAAK4C,eAKhB7D,EAAuB,GAC7B,UAAWnP,KAAQuM,EAAO,CACxB,IAAsB,IAAlBvM,EAAKkT,SAAiB,CACxB/D,EAAKrE,KAAK9K,GACV,QACF,CAEA,MAAMoT,EAAS7G,EAAM5I,KAAKvF,GAAKA,EAAE+N,KAAOnM,EAAKkT,UACxCE,EAGHA,EAAO1C,SAAS5F,KAAK9K,GAFrBmP,EAAKrE,KAAK9K,EAId,CAEA,OAAOmP,CACT,CDsDqB8D,CAAcP,GAC3B5X,KAAKqU,KAAKvS,IAAIuS,EAAI,EAEpBsD,MAAQA,IACND,QAAQC,MAAMA,GACdD,QAAQC,MAAM,GAAG3X,KAAKuW,UAAUY,QAAQ,iCAAiCQ,EAAMxU,OAAM,GAG3F,CAEQ2T,sBACN,MAAMyB,EAAS,QACf,IAAIC,EAAyBxY,KAAKqW,WAAW5V,MAAMC,SAASV,KAAKqW,WAAWzV,OAAO6X,WAAWjW,MAC9F,GAA0B,iBAAfgW,IAEXA,EAAaA,EAAW/K,OAAOtC,oBAC1BqN,EAAW5K,WAAW2K,IAE3B,IAEE,OADWG,SAASF,EAAWjL,MAAMgL,GAAQ,GAAI,GAEnD,OACE,MACF,CACF,iDArGWnC,GAAmB5R,MAiBpBmU,MAAenU,MAAAoU,MAAApU,MAAAqU,MAAA,oCAjBdzC,EAAmB0C,UAAA,sBAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,8jBAAAC,SAAA,SAAAC,EAAAC,GAAA,KAAAD,EAAA,iBD/B5B3U,MAFJ,UAEIA,CAFoB,UAEpBA,CAD6B,WACSA,MAAA,wBACxCA,UAIMA,MAHN,UAGMA,CAH0B,UAG1BA,CAFyB,qBAEzBA,CADwD,eAC7CA,MAAA,YAAMA,QACjBA,MAAA,cAAyCA,MAAA,yBAAA6U,GAAA7U,aAAA8U,GAAA9U,MAAiB4U,EAAApC,UAAAqC,GAAiB,GAE/E7U,YACAA,MAAA,YAQEA,MAPA,GAAA+U,EAAA,SAOA/U,CAPqB,GAAAgV,EAAA,UA2CvBhV,QACAA,MAAA,GAAAiV,EAAA,0BAAAjV,OAmCFA,QACAA,MAAA,yBAEFA,cA5F0CA,MAAA,GAAAA,YAAA,0CAMlBA,MAAA,GAAAA,MAAA,UAAA4U,EAAA5C,cAIlBhS,MAAA,GAAAA,MAAA4U,EAAA5C,cAAA,MAOAhS,cAAA4U,EAAA5C,aAAA,uBCGEkD,KAAkBC,UAClBC,KAAcC,KACdC,KAAWC,eACXC,KACAC,KACAC,KAAaC,KACbC,KACAC,IAAexB,KACfyB,KAAcC,OAAA,k2DAGTnE,CAAmB,KExB1B,MAAOoE,EACX,WAAOC,CACL7Z,EACAH,EACAia,EACAC,EACAC,EACAC,GAMkBH,EAAUD,KAAKrE,EAAqB,CACpD0E,WAAW,EACX3X,KANuC,CACvCvC,SACAH,SAKAka,mBACAI,OAAQ,MACRC,MAAO,UAGCC,cAAcrU,QAAKsU,KAAK,IAAI3W,UAAW/B,IAC/CqY,EAASrY,EAAK,GAGhBoY,EAAkBO,cACpB,4DCjBI,MAAO/a,EACXP,YAES2B,EAGAZ,EAGAH,EAIAmL,EAGAwP,EAMAC,EAGAC,EAEAC,EAGAC,EAEPC,EAEAC,EAEAC,GAjCO3b,KAAAwB,OAGAxB,KAAAY,SAGAZ,KAAAS,QAIAT,KAAA4L,WAGA5L,KAAAob,SAMApb,KAAAqb,KAGArb,KAAAsb,UAEAtb,KAAAub,mBAGAvb,KAAAwb,SAwDTxb,MAAA4b,KAAiB1K,MAAqC,mBAAoB,IAC1ElR,MAAA6b,EAA2B7b,KAAK8b,QAAQ,oBAExC9b,KAAA+b,oBAAmB3K,MAAY,mBAAoB,KACjD,MAAMZ,EAAS,IACVxQ,MAAK4b,OACL5b,MAAK6b,KAA8B,IAGxC,OAAOvL,MAAM0L,KAAK,IAAIC,IAAIzL,GAAO,GAzDjCxQ,MAAKkc,EAAcT,KAGnBtZ,OAAO,KACL,MAAMga,EAA0Bnc,KAAK+b,mBACrC,GAAsC,GAAlCI,EAAwBjY,OAE5B,UAAWkY,KAAWD,EACpBT,EAAYW,eAAeD,EAAS,iBAAiBpc,KAAKwB,OAAM,EACjE,CAAE1B,SAAU6b,GAEjB,CAOA,cAAIF,GACF,GAAIzb,MAAKkc,EACP,OAAOlc,MAAKkc,EACd,MAAM,IAAII,MAAM,iDAAiDtc,KAAKwB,OACxE,CACA0a,GAWAJ,QAAuCta,GACrC,SAAO4P,MAAY5P,EAAgB,IAAMxB,KAAK4L,WAAWpK,GAC3D,CAEA+a,WAAsC/a,GACpC,SAAO4P,MAAY5P,EAAgB,IAAMxB,KAAK4L,WAAWpK,GAC3D,CAQAoa,GACAC,GAWAQ,eAAeD,GACb,MAAM5W,EAAUxF,MAAK4b,IAChBpW,EAAQb,SAASyX,IACpBpc,MAAK4b,EAAe9Z,IAAI,IAAI0D,EAAS4W,GACzC,uFC/GI,SAAUtV,EACdiF,GAEA,SAAOnF,QACL4V,QAAoB,EACpB7Y,KAAIoI,IAAE,EACNyQ,OAEJ,CAEM,SAAUC,EACd1Q,GAEA,SAAOnF,QACL4V,KAAqBE,MAAO,EAC5B/Y,KAAIoI,IAAE,EACNyQ,KAAqBE,KAEzB,yFCTO,IAAMrc,EAAiB,MAAxB,MAAOA,EAKXR,cAHAG,KAAAC,OAAMC,MAAS,CAACG,sBAahBL,KAAA2c,gBAAepc,OAA0B,MAmBjCP,KAAA4c,WAAUzc,OAAO0c,KACjB7c,KAAA8c,mBAAkB3c,OAAO4E,IA9BjB,CAiChBgY,eACEC,EACA7X,EACA8X,EACAC,EACAC,EACAC,EACAC,EACAzR,GAEA5L,KAAK4L,SAAWA,EAChB5L,KAAKsd,UAAY,CACf/X,QAASyX,EAAcO,SAASC,QAChC3X,QAASmX,EAAcO,SAASE,QAChClM,KAAMyL,EAAcO,SAASG,MAE/B1d,KAAKY,OAAS,CACZmC,OAAQ/C,KAAK4c,QAAQ7Z,OACrBF,MAAO7C,KAAK4c,QAAQ/Z,MACpB8a,QAASX,EAAcY,IAAIC,IAC3BC,cAAed,EAAcY,IAAIG,UACjCC,SAAUhe,KAAK4c,QAAQoB,UAAUlb,WACjCmb,WAAYC,eAAeC,QAAQC,OAAkBC,KACrDC,WAAYtB,EAAcuB,KAAKV,IAC/BW,MAAOxe,KAAK4c,QAAQ4B,OAAO1b,WAC3B2b,WAAYxH,OAAOyH,SAASC,SAASpR,MAAM,UAAU,GAAK,IAC1DqR,kBAAmB5e,KAAK6e,qBACoB,SAA1CX,eAAeC,QAAQC,MACvBF,eAAeC,QAAQW,OAEzB3Z,SACA8X,iBACAC,YACAC,aACAC,SACAC,gBACA0B,kBAAmB/B,EAAcgC,OAAOC,cAAe,EACvDC,uBAAwBlC,EAAcgC,OAAOG,2BAA4B,EACzEnC,gBACApR,YAEF5L,KAAK2c,aAAa7a,IAAI9B,KAAKY,QAC3BZ,KAAKqG,SAAWrG,KAAK8c,gBAAgBxW,UAAUtG,KAAKY,OAAOuE,OAC7D,CAEQ0Z,qBACNZ,EACAmB,GAGA,MAAMC,EAA8B,CAAEC,MAAM,EAAMC,MAAM,EAAMC,QAAQ,GAEtE,IAAKvB,EACH,OAAOoB,EAET,MAAMI,EAAUL,GAAc,GAC9B,OAAQK,GACN,IAAK,GACL,IAAK,gBACH,OAAOJ,EACT,IAAK,gBAGH,MAAO,CAAEG,QAAQ,EAAMD,MAAM,GAC/B,IAAK,iBACH,MAAO,CAAED,MAAM,GACjB,QACE5H,eAAQC,MAAM,oCAAoC8H,KAC3C,GAGb,CAOA,aAAIC,GACF,OAAO1f,KAAK2f,aAAe3f,KAAK8c,gBAAgBpW,aAAa1G,KAAKY,OAAOuE,OAC3E,iDAtHW9E,EAAiB,sCAAjBA,EAAiBoE,QAAjBpE,EAAiBqE,WAAA,SAAjBrE,CAAiB,sCCdxB,MAAOyS,EACXjT,YAAoB+f,EAAoCvZ,GAApCrG,KAAA4f,aAAoC5f,KAAAqG,UAA0B,CAElF,mBAAIqN,GAGF,QAFc1T,KAAK4f,WAAW/W,KAAKqK,GAAKA,EAAE7J,QAAUrJ,KAAKqG,SAASb,SAC5DxF,KAAKqG,SAASb,UAAYxF,KAAKqG,SAASR,SAAuB,MAAZqN,EAAE7J,MAE7D,CAEA,sBAAI+J,GACF,MAAMyM,EAAY,IAAI7f,KAAKqG,SAASb,UACpC,YAA4D0G,IAArDlM,KAAK4f,WAAW/W,KAAKqK,GAAKA,EAAE7J,QAAUwW,EAC/C,CAEA,cAAI7M,GAIF,QAHchT,KAAK4f,WAAW/W,KAAKqK,GAAKA,EAAE7J,QAAUrJ,KAAKqG,SAASb,SAC7D0N,EAAE7J,QAAU,IAAIrJ,KAAKqG,SAASb,WAC7BxF,KAAKqG,SAASb,UAAYxF,KAAKqG,SAASR,SAAuB,MAAZqN,EAAE7J,MAE7D,oCCnBI,MAAOhE,EAcX,kBAAOuN,CAAYkN,GACjB,MAAO,CACLta,QAASsa,EAASja,QAClBA,QAASia,EAASja,QAEtB,CAEA,kBAAOka,CAAYD,EAAwBta,GACzC,MAAO,CACLA,QAASA,EACTK,QAASia,EAASja,QAEtB,CAEA,YAAOP,GACL,MAAO,CACLE,QAAS,GACTK,QAAS,GACTN,QAAS,GAEb,sECjCI,MAAgBP,UAAwEgM,IAG5FgP,MAAUC,MAAajgB,KAAKmH,OAE5B+Y,MAASD,MAAajgB,KAAKuR,MAG3B,UAAc5K,GACZ,OAAO3G,MAAKggB,CACd,CAEA,SAAcG,GACZ,OAAOngB,MAAKkgB,CACd,CAEAE,WACE,OAAOpgB,KAAKmgB,KACd,CAEAE,SAASnO,GACP,OAAOlS,KAAK2G,OAAOC,QACjBE,KAAgBwZ,GAAOpO,EAAIvO,IAAI0N,GAAMiP,EAAIjP,IAAKpN,OAAO8C,GAAU,MAALA,IAE9D","names":["logSpecs","all","initSignal","watchAllFields","FieldsFindNoPrefix","FieldUnwrap","FieldMask","ServiceBase","#fieldState","#formConfig","constructor","injector","super","this","log","classLog","inject","FieldState","FormConfigService","result","signal","#controls","group","controls","#fieldConfig","config","#requirePrefix","#maskSignal","#mask","computed","#fieldsUsedInMask","#extractFieldNames","a","initPreClean","overloadPreCleanValues","preClean","init","name","mask","requirePrefix","extendName","l","fnIf","set","#updateMaskFinal","r","logChanges","enabled","effect","#watchAllFields","#onChange","#process","hasPlaceholders","value","lowercaseInsideSquareBrackets","replace","_","toLowerCase","appId","toString","zoneId","entityGuid","entityId","dataPlaceholders","data","forEach","e","i","replaceValue","cleaned","matches","match","map","token","key","maybeNew","end","f","filter","length","c","subscriptions","add","valueChanges","subscribe","i0","factory","ɵfac","includes","getReader","getLanguage","getReaderSignal","FormLanguageService","SignalStoreObservableBase","getId","item","formId","sanitizeAdd","FormLanguage","empty","initial","current","#entityReaderCache","ComputedCacheHelper","#signalsHideHeaderCache","addForm","primary","hideHeader","setCurrent","newLanguage","update","getEntityReader","sig","getOrCreateWithInfo","language","getSignal","EntityReader","rSilent","isNew","getLanguage$","cache$","pipe","languageInstances","mapUntilChanged","m","shareReplay","getHideHeaderSignal","getOrCreate","cache","updateHideHeader","providedIn","ContentTypeSettingsHelpers","getDefaultSettings","reader","contentType","itemHeader","defaultSettings","flatten","Metadata","Description","EditInstructions","Features","Label","ListInstructions","Notes","Icon","Link","_itemTitle","getTitle","_slotCanBeEmpty","IsEmptyAllowed","_slotIsEmpty","IsEmpty","type","find","metadata","Type","Name","label","FieldReader","Attributes","currentOrDefault","Value","FileTypeHelpers","defaultIcon","customExtensions","doc","docx","xls","xlsx","ppt","pptx","pdf","mp3","avi","mpg","mpeg","mov","mp4","zip","rar","txt","html","css","xml","xsl","matExtensions","vcf","getExtension","filename","substring","lastIndexOf","toLocaleLowerCase","getIconClass","ext","isKnownType","isImage","isImgRegex","test","FieldDefaults","inputType","settings","getDefaultOrPrefillValue","onlyPrefill","fn","prefillRaw","Prefill","undefined","rNull","defaultValue","DefaultValue","values","InputTypeCatalog","BooleanDefault","BooleanTristate","DateTimeDefault","Date","toJSON","NumberDefault","NumberDropdown","NumberPicker","isNaN","Number","EntityDefault","EntityQuery","EntityContentBlocks","EntityPicker","guids","split","guid","trim","JSON","stringify","startsWith","parse","SanitizeHelper","removeFromStart","sanitized","charToRemove","removeFromEnd","cleanBadPath","goodChar","sanitizePath","sanitizeName","CustomDefault","CustomGps","CustomJsonEditor","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","StringPicker","Unknown","ArrayHelpers","toggleInArray","array","index","indexOf","push","splice","getBestValue","attributeValues","currentOrDefaultOrAny","metadataItems","Array","isArray","merged","Id","Object","entries","currentValues","itemAttributes","reduce","acc","SignalStoreBase","#cache","signalObj","#list","computedObj","id","#itemSignalsCache","list","addMany","items","before","get","newItem","remove","updatedStore","clearCache","getAll","getMany","ids","getManySignal","getAllSignal","field","#noData","#field","#language","#values","Values","ofLanguage","bothPrimary","val","DimensionReader","Dimensions","hasCurrent","hasPrimary","d","hasCurrentReadonly","hasCurrentReadOnly","hasEditableValues","#valuesEditableOf","countEditable","countEditableWithContents","v","hasCurrentWrite","currentEditable","dimension","x","isEditableOrReadonlyTranslationExist","PagePickerComponent_Conditional_12_For_2_ng_container_0_Template","pageAndChildren_r3","_c0","page_r2","PagePickerComponent_Conditional_12_For_2_Template","ctx_r3","tree","page_r6","path","_r5","$implicit","select","PagePickerComponent_Conditional_13_For_3_Conditional_6_Template","PagePickerComponent_Conditional_13_For_3_Conditional_10_Template","PagePickerComponent_Conditional_13_For_3_Conditional_11_Template","selected","isNavigation","isClickable","PagePickerComponent_Conditional_13_Conditional_1_Template","PagePickerComponent_Conditional_13_For_3_Template","filteredSearch","_r8","page_r9","page","toggle","toggled","PagePickerComponent_ng_template_14_Conditional_12_For_2_ng_container_0_Template","child_r10","PagePickerComponent_ng_template_14_Conditional_12_For_2_Template","children","PagePickerComponent_ng_template_14_Conditional_2_Template","PagePickerComponent_ng_template_14_Conditional_3_Template","_r7","PagePickerComponent_ng_template_14_Conditional_10_Template","PagePickerComponent_ng_template_14_Conditional_11_Template","PagePickerComponent_ng_template_14_Conditional_12_Template","isVisible","PagePickerComponent","dialogData","dialog","translate","filterText","searchItems","queryService","transient","QueryService","ngOnInit","parseSelectedPageId","fetchPages","setFilter","window","confirm","instant","closeDialog","pageId","close","stream","getFromQuery","next","console","error","pages","buildPageSearch","Path","slice","join","IsNavigation","IsClickable","buildPageTree","parentId","ParentId","parent","prefix","fieldValue","fieldName","parseInt","MAT_DIALOG_DATA","i1","i2","selectors","decls","vars","consts","template","rf","ctx","$event","_r1","PagePickerComponent_Conditional_12_Template","PagePickerComponent_Conditional_13_Template","PagePickerComponent_ng_template_14_Template","MatFormFieldModule","i3","MatInputModule","i4","FormsModule","i5","NgTemplateOutlet","NgClass","MatIconModule","i6","MatDialogActions","TranslateModule","TippyDirective","styles","PagePicker","open","matDialog","viewContainerRef","changeDetectorRef","callback","autoFocus","height","width","afterClosed","take","markForCheck","basics","ui","uiValue","translationState","isOpen","pickerData","featuresSvc","injectorForEffects","#reqFeaturesMy","#reqFeaturesFromSettings","setting","requiredFeatures","from","Set","#pickerData","reqFeaturesFromSettings","feature","requireFeature","Error","settingExt","distinctUntilChanged","mapUntilObjChanged","isEqual","configSignal","context","Context","languageService","initFormConfig","dialogContext","isParentDialog","itemGuids","createMode","isCopy","enableHistory","languages","Language","Current","Primary","List","appRoot","App","Url","appSharedRoot","SharedUrl","moduleId","partOfPage","sessionStorage","getItem","keyPartOfPage","partOfPageDefault","portalRoot","Site","tabId","systemRoot","location","pathname","versioningOptions","getVersioningOptions","keyPublishing","enableFormulaSave","Enable","FormulaSave","removeEditRestrictions","OverrideEditRestrictions","publishing","allowAll","show","hide","branch","publish","language$","_language$","dimensions","currentRO","original","diffCurrent","#cache$","toObservable","#list$","list$","getList$","getMany$","obj"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/shared/helpers/field-mask.helper.ts","./projects/eav-ui/src/app/edit/form/form-language.service.ts","./projects/eav-ui/src/app/edit/state/fields-settings.helpers.ts","./projects/eav-ui/src/app/edit/shared/adam/file-type.helpers.ts","./projects/eav-ui/src/app/edit/shared/input-types/input-field.helpers.ts","./projects/eav-ui/src/app/edit/shared/helpers/sanitize.helper.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/shared/helpers/array.helpers.ts","./projects/eav-ui/src/app/edit/shared/helpers/entity-reader.ts","./projects/eav-ui/src/app/edit/shared/store/signal-store-base.ts","./projects/eav-ui/src/app/edit/localization/field-reader.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.component.html","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.component.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.helpers.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.helper.ts","./projects/eav-ui/src/app/edit/fields/field-state.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/edit/form/form-config.service.ts","./projects/eav-ui/src/app/edit/localization/dimension-reader.ts","./projects/eav-ui/src/app/edit/form/form-languages.model.ts","./projects/eav-ui/src/app/edit/shared/store/signal-store-observable-base.ts"],"sourcesContent":["import { Injectable, Injector, Signal, computed, effect, inject, signal } from '@angular/core';\r\nimport { IFieldMask } from '../../../../../../edit-types/src/IFieldMask';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { ServiceBase } from '../../../shared/services/service-base';\r\nimport { FieldState } from '../../fields/field-state';\r\nimport { FormConfigService } from '../../form/form-config.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  initSignal: false,\r\n  watchAllFields: true,\r\n}\r\n\r\nconst dataPrefix = 'data';\r\nconst FieldsFindNoPrefix = /\\[.*?\\]/ig;\r\nconst FieldsFindPrefix = /\\[[a-zA-Z]+\\:.*?\\]/ig;\r\nconst FieldUnwrap = /[\\[\\]]/ig;\r\n\r\n/**\r\n * Create a new FieldMask instance and access result with resolve\r\n * @example\r\n * const mask = new FieldMask(\"[FirstName]\", formGroup.controls);\r\n * const maskValue = mask.resolve();\r\n *\r\n * @param mask a string like \"[FirstName] [LastName]\"\r\n * @param model usually FormGroup controls, passed into here\r\n * @param overloadPreCleanValues a function which will \"scrub\" the found field-values\r\n */\r\n\r\n@Injectable()\r\nexport class FieldMask extends ServiceBase implements IFieldMask /* for field-change subscription */ {\r\n  \r\n  log = classLog({FieldMask}, logSpecs);\r\n\r\n  #fieldState = inject(FieldState);\r\n  #formConfig = inject(FormConfigService);\r\n\r\n  constructor(private injector: Injector) {\r\n    super();\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  /**\r\n   * The result of the mask as a signal, for external use/subscribing.\r\n   */\r\n  public result = signal<string>('');\r\n\r\n  #controls = this.#fieldState.group.controls;\r\n  #fieldConfig = this.#fieldState.config;\r\n  #requirePrefix = false;\r\n\r\n  /**\r\n   * The mask as a signal.\r\n   * This allows us to use a simple value or a possibly runtime-changing mask. \r\n   */\r\n  #maskSignal = signal<Signal<string>>(signal<string>(''));\r\n\r\n  /**\r\n   * The final mask to use - either picking the signal or the text\r\n   * TODO: we should be able to simplify this to just use a signal\r\n   */\r\n  #mask = computed(() => this.#maskSignal()());\r\n\r\n  /** Fields used in the mask */\r\n  #fieldsUsedInMask = computed(() => this.#extractFieldNames(this.#mask()));\r\n\r\n  // #fieldValuesSignals = inject(FieldsSettingsService).fieldValues;\r\n\r\n  // // TODO create a multi-field signal?\r\n\r\n  // public result2 = computed(() => {\r\n  //   // listen to all the fields for changes\r\n  //   this.#fieldsUsedInMask().forEach(field => {\r\n\r\n  //   });\r\n  // });\r\n\r\n\r\n  /**\r\n   * Attach any processing events before the mask is resolved the first time\r\n   */\r\n  public initPreClean(overloadPreCleanValues: (key: string, value: string) => string): this {\r\n    this.log.a('initPreClean');\r\n    this.preClean = overloadPreCleanValues;\r\n    return this;\r\n  }\r\n\r\n  public init(name: string, mask: string, requirePrefix: boolean = false): this {\r\n    return this.initSignal(name, signal(mask));\r\n  }\r\n\r\n  public initSignal(name: string, mask: Signal<string>): this {\r\n    this.log.extendName(`-${name}`);\r\n    const l = this.log.fnIf('initSignal', { name, mask });\r\n    this.#maskSignal.set(mask);\r\n    this.#updateMaskFinal();\r\n    return l.r(this, 'first result:' + this.result());\r\n  }\r\n\r\n  /**\r\n   * Activate an aggressive change logger to debug what's happening.\r\n   * Should only be used in development, as it will log a lot of data to the console.\r\n   */\r\n  public logChanges(): this {\r\n    // use logger, but if not enabled, create new just for this\r\n    const l = this.log.enabled ? this.log : classLog({FieldMask});\r\n    effect(() => l.a(`Mask '${this.#mask()}' value changed to: ${this.result()}`), { injector: this.injector });\r\n    return this;\r\n  }\r\n\r\n  #updateMaskFinal() {\r\n    // bind auto-watch only if needed...\r\n    // otherwise it's just on-demand\r\n    this.#watchAllFields();\r\n    this.#onChange();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Process a mask to the get the final value\r\n   */\r\n  #process(): string {\r\n\r\n    // if no mask, exit early\r\n    if (!hasPlaceholders(this.#mask()))\r\n      return this.#mask();\r\n\r\n    let value = lowercaseInsideSquareBrackets(this.#mask());\r\n\r\n    // If we have form info (which we usually do), replace the placeholders\r\n    if (this.#formConfig != null)\r\n      value = value\r\n        .replace('[app:appid]', this.#formConfig.config.appId.toString())\r\n        .replace('[app:zoneid]', this.#formConfig.config.zoneId.toString());\r\n\r\n    // If we have field info (which we usually do), replace the placeholders\r\n    if (this.#fieldConfig != null)\r\n      value = value\r\n        .replace('[guid]', this.#fieldConfig.entityGuid)\r\n        .replace('[data:guid]', this.#fieldConfig.entityGuid)\r\n        .replace('[id]', this.#fieldConfig.entityId.toString())\r\n        .replace('[data:id]', this.#fieldConfig.entityId.toString());\r\n\r\n    const dataPlaceholders = this.#fieldsUsedInMask().data;\r\n    if (!dataPlaceholders)\r\n      return value;\r\n\r\n    dataPlaceholders.forEach((e, i) => {\r\n      const replaceValue = this.#controls?.[e]?.value ?? '';\r\n      const cleaned = this.preClean(e, replaceValue);\r\n      // New with prefix 'data:'\r\n      value = value.replace('[data:' + e.toLowerCase() + ']', cleaned);\r\n      // Old without prefix - only if allowed (for compatibility)\r\n      value = value.replace('[' + e.toLowerCase() + ']', cleaned);\r\n    });\r\n    return value;\r\n  }\r\n\r\n  /** Retrieves a list of all fields used in the mask */\r\n  #extractFieldNames(mask: string): Record<string, string[]> {\r\n    // exit early if mask very simple or not a mask\r\n    if (!mask || !hasPlaceholders(mask))\r\n      return {};\r\n\r\n    const matches = mask.match(FieldsFindNoPrefix);\r\n    \r\n    if (!matches)\r\n      return {};\r\n    \r\n    const fields: string[] = matches.map(token => token.replace(FieldUnwrap, ''));\r\n    return { data: fields };\r\n  }\r\n\r\n  /**\r\n   * Default preClean function, if no other function was specified for this\r\n   * Will be replaced if need be.\r\n   */\r\n  private preClean(key: string, value: string): string { return value; }\r\n\r\n  /** Change-event - will only fire if it really changes */\r\n  #onChange() {\r\n    const maybeNew = this.#process();\r\n    this.result.set(maybeNew);\r\n  }\r\n\r\n  /**\r\n   * Add watcher and execute onChange.\r\n   * Uses observables, since that's what angular provides on valueChanges.\r\n   */\r\n  #watchAllFields() {\r\n    const l = this.log.fnIf('watchAllFields');\r\n    const dataPlaceholders = this.#fieldsUsedInMask().data;\r\n    if (!dataPlaceholders)\r\n      return l.end('no data placeholders');\r\n\r\n    // add a watch for each field in the field-mask\r\n    const controls = dataPlaceholders\r\n      .map(f => this.#controls[f])\r\n      .filter(f => f != null);\r\n\r\n    if (controls.length == 0)\r\n      return l.end('no fields to watch');\r\n\r\n    controls.forEach(c => this.subscriptions.add(c.valueChanges.subscribe(_ => this.#onChange())));\r\n    l.end();\r\n  }\r\n}\r\n\r\n\r\nfunction hasPlaceholders(mask: string): boolean {\r\n  return (mask ?? '').includes('[');\r\n}\r\n\r\n/** used for query parameters */\r\nfunction lowercaseInsideSquareBrackets(value: string) {\r\n  return value.replace(/\\[([^\\]]+)\\]/g, (_, group) => `[${group.toLowerCase()}]`);\r\n}\r\n","import { Injectable, Signal } from '@angular/core';\r\nimport { map, Observable, shareReplay } from 'rxjs';\r\nimport { classLog } from '../../shared/logging';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { ComputedCacheHelper } from '../../shared/signals/computed-cache';\r\nimport { EntityReader } from '../shared/helpers';\r\nimport { SignalStoreObservableBase } from '../shared/store/signal-store-observable-base';\r\nimport { FormLanguage, FormLanguageComplete } from './form-languages.model';\r\n\r\nconst logSpecs = {\r\n  getReader: false,\r\n  getLanguage: false,\r\n  getReaderSignal: false,\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FormLanguageService extends SignalStoreObservableBase<number, FormLanguageInStore> {\r\n\r\n  constructor() {\r\n    super(classLog({FormLanguageService}, logSpecs));\r\n  }\r\n\r\n  protected override getId = (item: FormLanguageInStore) => item.formId;\r\n\r\n  protected override sanitizeAdd = (item: FormLanguageInStore) => ({\r\n    ...FormLanguage.empty,\r\n    initial: item.current,\r\n    ...item\r\n  });\r\n\r\n  addForm(formId: number, primary: string, current: string, hideHeader: boolean): void {\r\n    this.add({\r\n      formId,\r\n      current,\r\n      initial: current,\r\n      primary,\r\n      hideHeader,\r\n    } satisfies FormLanguageInStore);\r\n  }\r\n\r\n  setCurrent(formId: number, newLanguage: string): void {\r\n    this.update(formId, { current: newLanguage } satisfies Partial<FormLanguageInStore>);\r\n  }\r\n\r\n  /**\r\n   * Get an EntityReader for the current form.\r\n   * ATM used in fields settings service.\r\n   * \r\n   * If the form doesn't exist, the reader returned will not have the correct languages specified.\r\n   * This is to avoid errors when the form is not yet loaded or is being unloaded.\r\n   */\r\n  getEntityReader(formId: number): Signal<EntityReader> {\r\n    const l = this.log.fnIf('getReader', { formId });\r\n    // Place creation of the language signal here to avoid creating it multiple times\r\n    const sig = this.#entityReaderCache.getOrCreateWithInfo(formId, () => {\r\n      const language = this.getSignal(formId)() ?? FormLanguage.empty();\r\n      const l2 = this.log.fnIf('getReaderSignal', { language });\r\n      return new EntityReader(language);\r\n    });\r\n    return l.rSilent(sig.signal, `isNew: ${sig.isNew}`);\r\n  }\r\n  #entityReaderCache = new ComputedCacheHelper<number, EntityReader>('entityReader');\r\n\r\n  // use in form config service for language$()\r\n  getLanguage$(formId: number): Observable<FormLanguageComplete> {\r\n    return this.cache$.pipe(\r\n      map(languageInstances => languageInstances[formId]),\r\n      mapUntilChanged(m => m),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  /** Get hideHeader for the form. Fix for safari and mobile browsers */\r\n  getHideHeaderSignal(formId: number): Signal<boolean> {\r\n    return this.#signalsHideHeaderCache.getOrCreate(formId, () => this.cache()[formId]?.hideHeader ?? false);\r\n  }\r\n  #signalsHideHeaderCache = new ComputedCacheHelper<number, boolean>('hideHeader');\r\n\r\n\r\n  /** Update hideHeader for the form. Fix for safari and mobile browsers */\r\n  updateHideHeader(formId: number, hideHeader: boolean): void {\r\n    this.update(formId, { hideHeader } satisfies Partial<FormLanguageInStore>);\r\n  }\r\n}\r\n\r\nexport interface FormLanguageInStore extends FormLanguageComplete {\r\n  formId: number;\r\n  hideHeader: boolean;\r\n}\r\n","import { ItemIdentifierEditConfig } from '../../shared/models/edit-form.model';\r\nimport { FormLanguage } from '../form/form-languages.model';\r\nimport { FieldReader } from '../localization/field-reader';\r\nimport { EntityReader } from '../shared/helpers';\r\nimport { EavContentType } from '../shared/models/eav';\r\nimport { ContentTypeSettings } from './content-type-settings.model';\r\n\r\nexport class ContentTypeSettingsHelpers {\r\n\r\n  /**\r\n   * Initialize the default settings of a ContentType to ensure everything is set or empty-string etc.\r\n   * @returns \r\n   */\r\n  static getDefaultSettings(reader: EntityReader, contentType: EavContentType, itemHeader: ItemIdentifierEditConfig): ContentTypeSettings {\r\n    const metadata = reader.flatten<ContentTypeSettings>(contentType.Metadata);\r\n    const defaultSettings = { ...metadata };\r\n    defaultSettings.Description ??= '';\r\n    defaultSettings.EditInstructions ??= '';\r\n    defaultSettings.Features ??= '';\r\n    defaultSettings.Label ??= '';\r\n    defaultSettings.ListInstructions ??= '';\r\n    defaultSettings.Notes ??= '';\r\n    defaultSettings.Icon ??= '';\r\n    defaultSettings.Link ??= '';\r\n    defaultSettings._itemTitle = this.getTitle(contentType, reader);\r\n    defaultSettings._slotCanBeEmpty = itemHeader.IsEmptyAllowed ?? false;\r\n    defaultSettings._slotIsEmpty = itemHeader.IsEmpty ?? false;\r\n    return defaultSettings;\r\n  }\r\n\r\n  static getTitle(contentType: EavContentType, language: FormLanguage): string {\r\n    try {\r\n      // xx ContentType is a historic bug and should be fixed when JSONs are rechecked\r\n      const type = contentType.Metadata.find(metadata => metadata.Type.Name === 'ContentType' || metadata.Type.Name === 'xx ContentType');\r\n      let label = (type)\r\n        ? new FieldReader(type.Attributes.Label, language).currentOrDefault?.Value\r\n        : null;\r\n      label = label || contentType.Name;\r\n      return label;\r\n    } catch (error) {\r\n      return contentType.Name;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","export class FileTypeHelpers {\r\n  private static defaultIcon = 'file';\r\n  private static customExtensions: Record<string, string> = {\r\n    doc: 'file-word',\r\n    docx: 'file-word',\r\n    xls: 'file-excel',\r\n    xlsx: 'file-excel',\r\n    ppt: 'file-powerpoint',\r\n    pptx: 'file-powerpoint',\r\n    pdf: 'file-pdf',\r\n    mp3: 'file-audio',\r\n    avi: 'file-video',\r\n    mpg: 'file-video',\r\n    mpeg: 'file-video',\r\n    mov: 'file-video',\r\n    mp4: 'file-video',\r\n    zip: 'file-archive',\r\n    rar: 'file-archive',\r\n    txt: 'file-text',\r\n    html: 'file-code',\r\n    css: 'file-code',\r\n    xml: 'file-code',\r\n    xsl: 'file-code',\r\n  };\r\n  private static matExtensions: Record<string, string> = {\r\n    vcf: 'person',\r\n  };\r\n\r\n  static getExtension(filename: string) {\r\n    return filename.substring(filename.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n  }\r\n\r\n  static getIconClass(filename: string) {\r\n    const ext = this.getExtension(filename);\r\n    return this.matExtensions[ext] || this.customExtensions[ext] || this.defaultIcon;\r\n  }\r\n\r\n  static isKnownType(filename: string) {\r\n    return this.matExtensions[this.getExtension(filename)] != null;\r\n  }\r\n\r\n  static isImage(filename: string) {\r\n    return this.isImgRegex().test(filename);\r\n  }\r\n\r\n  private static isImgRegex() {\r\n    return /(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*\\.(?:jpg|jpeg|gif|png|webp))(?:\\?([^#]*))?(?:#(.*))?/i;\r\n  }\r\n}\r\n","import { Of } from '../../../../../../core';\r\nimport { FieldSettings } from '../../../../../../edit-types/src/FieldSettings';\r\nimport { FieldValue } from '../../../../../../edit-types/src/FieldValue';\r\nimport { InputTypeCatalog } from '../../../shared/fields/input-type-catalog';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { ItemIdentifierShared } from '../../../shared/models/edit-form.model';\r\n\r\n/**\r\n * Get the field initial / default value, incl. the prefilled value if available.\r\n */\r\nexport class FieldDefaults {\r\n\r\n  log = classLog({FieldDefaults});\r\n\r\n  constructor(\r\n    private name: string,\r\n    private inputType: Of<typeof InputTypeCatalog>,\r\n    private settings: FieldSettings,\r\n    private itemHeader?: Pick<ItemIdentifierShared, \"Prefill\">,\r\n  ) { }\r\n\r\n  /** Include itemHeader if you need data from prefill, and set onlyPrefill if you only need parsed prefill */\r\n  getDefaultOrPrefillValue(onlyPrefill?: boolean): FieldValue {\r\n\r\n    const inputType = this.inputType;\r\n    const name = this.name;\r\n    const settings = this.settings;\r\n    const itemHeader = this.itemHeader;\r\n    const l = this.log.fn('parseDefaultValue', { name, inputType, settings, itemHeader, onlyPrefill });\r\n\r\n    const prefillRaw = itemHeader?.Prefill?.[name];\r\n    if (onlyPrefill && prefillRaw === undefined)\r\n      return l.rNull('only prefill, but no prefill data found');\r\n\r\n    let defaultValue = prefillRaw?.toString() ?? settings.DefaultValue;\r\n\r\n    l.values({ defaultValue });\r\n\r\n    switch (inputType) {\r\n      case InputTypeCatalog.BooleanDefault:\r\n        return defaultValue?.toLowerCase() === 'true';\r\n      case InputTypeCatalog.BooleanTristate:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? defaultValue.toLowerCase() === 'true'\r\n          : null;\r\n      case InputTypeCatalog.DateTimeDefault:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? new Date(defaultValue).toJSON()\r\n          : null;\r\n      case InputTypeCatalog.NumberDefault:\r\n      case InputTypeCatalog.NumberDropdown:\r\n      case InputTypeCatalog.NumberPicker:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? !isNaN(Number(defaultValue)) ? Number(defaultValue) : null\r\n          : null;\r\n      case InputTypeCatalog.EntityDefault:\r\n      case InputTypeCatalog.EntityQuery:\r\n      case InputTypeCatalog.EntityContentBlocks:\r\n      case InputTypeCatalog.EntityPicker:\r\n        // Empty - return []\r\n        if (defaultValue == null || defaultValue === '')\r\n          return [];\r\n\r\n        // string has { } characters, we must switch them to quotes for parsing below\r\n        // 2024-06-01 2dm not sure why this is an option..., maybe some interim encoding?\r\n        if (defaultValue.includes('{'))\r\n          defaultValue = defaultValue.replace(/[\\{\\}]/g, '\\\"');\r\n\r\n        // list but no array, add brackets\r\n        if (defaultValue.includes(',') && !defaultValue.includes('[')) {\r\n          const guids = defaultValue.split(',').map(guid => guid.trim());\r\n          defaultValue = JSON.stringify(guids);\r\n        }\r\n\r\n        // Finally parse\r\n        return defaultValue.startsWith('[') // an array with guid strings\r\n          ? JSON.parse(defaultValue) // if it's a string containing an array\r\n          : [defaultValue.replace(/\"/g, '')]; // just a guid string, but might have quotes\r\n      default:\r\n        return defaultValue ?? '';\r\n    }\r\n  }\r\n}\r\n","export class SanitizeHelper {\r\n\r\n  private static removeFromStart(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static removeFromEnd(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static cleanBadPath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  static sanitizePath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  static sanitizeName(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized).replace(illegalRe, replacement);\r\n  }\r\n}\r\n","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","export class ArrayHelpers {\r\n  /**\r\n   * Toggles an item in an array. If the item is not in the array, it is added. If it is in the array, it is removed.\r\n   * @param item The item to toggle\r\n   * @param array The array to toggle the item in\r\n   */\r\n  static toggleInArray<T>(item: T, array: T[]): void {\r\n    const index = array.indexOf(item);\r\n    if (index === -1) {\r\n      array.push(item);\r\n    } else {\r\n      array.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // probably better: Array.from(new Set(merged));\r\n  // static distinct<T extends unknown>(array: T[]): T[] {\r\n  //   return array.filter(onlyUnique);\r\n  // }\r\n\r\n}\r\n\r\n\r\n// function onlyUnique<T extends unknown>(value: T, index: number, array: T[]): boolean {\r\n//   return array.indexOf(value) === index;\r\n// }","import { classLog } from '../../../shared/logging';\r\nimport { FormLanguage } from '../../form/form-languages.model';\r\nimport { FieldReader } from '../../localization/field-reader';\r\nimport { ItemValuesOfLanguage } from '../../state/item-values-of-language.model';\r\nimport { EavEntity, EavEntityAttributes, EavField } from '../models/eav';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  constructor: false,\r\n};\r\n\r\nexport class EntityReader implements FormLanguage {\r\n  \r\n  log = classLog({EntityReader}, logSpecs);\r\n\r\n  /** @inheritdoc */\r\n  public current: string;\r\n  /** @inheritdoc */\r\n  public primary: string;\r\n\r\n  constructor(formLanguage: FormLanguage);\r\n  constructor(current: string, primary: string);\r\n  constructor(current: FormLanguage | string, primary?: string) {\r\n    this.log.fnIf('constructor', { current, primary });\r\n    if (typeof current === 'string') {\r\n      this.current = current;\r\n      this.primary = primary;\r\n    } else {\r\n      this.current = current.current;\r\n      this.primary = current.primary;\r\n    }\r\n  }\r\n\r\n  // WIP - to make code clearer, this is what should be used from now on\r\n  // But we'll probably end up calling this from the EntityReader only, so it should be straight forward\r\n  getBestValue<T>(attributeValues: EavField<T>, defaultValue: T = null): T {\r\n    const fieldReader = new FieldReader<T>(attributeValues, this);\r\n    return fieldReader.currentOrDefaultOrAny?.Value ?? defaultValue;\r\n    // return LocalizationHelpers.translate<T>(this, attributeValues as EavField<T>, defaultValue);\r\n  }\r\n\r\n  public flatten<T>(metadata: EavEntity | EavEntity[]): T {\r\n    if (metadata == null)\r\n      return {} as T;\r\n\r\n    const metadataItems = Array.isArray(metadata) ? metadata : [metadata];\r\n    if (metadataItems.length === 0 || metadataItems[0] == null)\r\n      return {} as T;\r\n\r\n    const merged: Record<string, any> = {};\r\n    // copy metadata settings which are not @All\r\n    for (const item of metadataItems) {\r\n      if (item.Type.Id === '@All') continue;\r\n\r\n      for (const [name, values] of Object.entries(item.Attributes)) {\r\n        const value = this.getBestValue(values);\r\n        merged[name] = value;\r\n      }\r\n    }\r\n\r\n    // copy @All metadata settings, overwriting previous settings\r\n    for (const item of metadataItems) {\r\n      if (item.Type.Id !== '@All') continue;\r\n\r\n      for (const [name, values] of Object.entries(item.Attributes)) {\r\n        const value = this.getBestValue(values);\r\n        // do not overwrite previous settings if @All is empty\r\n        const exists = merged[name] != null;\r\n        const emptyAll = value == null || value === '';\r\n        if (exists && emptyAll) continue;\r\n\r\n        merged[name] = value;\r\n      }\r\n    }\r\n\r\n    return merged as T;\r\n  }\r\n\r\n  currentValues(itemAttributes: EavEntityAttributes): ItemValuesOfLanguage {\r\n\r\n    const formValues: ItemValuesOfLanguage = Object.entries(itemAttributes)\r\n      .reduce((acc, [name, values]) => {\r\n        acc[name] = this.getBestValue(values);\r\n        return acc;\r\n      }, {} as ItemValuesOfLanguage);\r\n\r\n    return formValues;\r\n  }\r\n\r\n}\r\n","import { Signal } from '@angular/core';\r\nimport { ComputedCacheHelper } from '../../../shared/signals/computed-cache';\r\nimport { computedObj, signalObj } from '../../../shared/signals/signal.utilities';\r\nimport { classLog, ClassLogger } from '../../../shared/logging';\r\n\r\n/**\r\n * Signal based store for any kind of data which is accessed by a key.\r\n * - The data type is generic.\r\n * - The key type can be customized.\r\n * - Standard get/add/remove methods exist, and can be augmented by the inheriting store.\r\n */\r\nexport abstract class SignalStoreBase<TKey extends string | number, TValue> {\r\n  \r\n  protected log: ClassLogger;\r\n\r\n  constructor(log: ClassLogger) {\r\n    this.log = log ?? classLog({SignalStoreBase});\r\n    this.log.a('SignalStoreBase created');\r\n    this.name = this.log.name;\r\n  }\r\n  \r\n  /** Main Cache */\r\n  #cache = signalObj<Record<TKey, TValue>>('cache', {} as Record<TKey, TValue>);\r\n\r\n  /** Cached version of the list, with the latest object-values */\r\n  #list = computedObj('list', () => Object.values(this.#cache()) as TValue[]);\r\n\r\n  /** Cache for the inheriting classes, but as read-only */\r\n  protected get cache(): Signal<Record<TKey, TValue>> { return this.#cache; }\r\n\r\n  /** List for the inheriting classes, but as read-only */\r\n  protected get list(): Signal<TValue[]> { return this.#list; }\r\n\r\n  /**\r\n   * Function to get the key / id for storing in the cache.\r\n   * Default is to get the 'id' property of the item.\r\n   * This should be overriden in the inheriting class.\r\n   */\r\n  protected getId: (item: TValue) => TKey = (item) => (item as any).id as TKey;\r\n\r\n  protected sanitizeAdd: (item: TValue) => TValue = (item) => item;\r\n\r\n  name: string;\r\n\r\n\r\n  //#region Add / Update / Remove / Clear Cache\r\n\r\n  add(item: TValue): void {\r\n    const l = this.log.fn('add', { item });\r\n    if (!item)\r\n      return l.end('item is null');\r\n\r\n    // add to signal\r\n    this.#cache.set({\r\n      ...this.#cache(),\r\n      [this.getId(item)]: this.sanitizeAdd(item)\r\n    });\r\n    l.end('added');\r\n  }\r\n\r\n  addMany(items: TValue[]): void {\r\n    var l = this.log.fn('addMany', { items });\r\n    if (!items || items.length == 0)\r\n      return l.end('items is null or empty');\r\n\r\n    // also add to signal, but in one go\r\n    const result = items.reduce((acc, item) => ({\r\n      ...acc,\r\n      [this.getId(item)]: this.sanitizeAdd(item)\r\n    }), { ...this.#cache() });\r\n    \r\n    this.#cache.set(result);\r\n    l.end('added');\r\n  }\r\n\r\n  update(id: TKey, item: Partial<TValue>): void {\r\n    const l = this.log.fn('update', { id, item });\r\n    if (!id || !item)\r\n      return l.end('id or item is null');\r\n\r\n    const before = this.get(id);\r\n    if (!before)\r\n      return l.end(`Item with id ${id} not found in store`);\r\n\r\n    // merge\r\n    const newItem = { ...before, ...item };\r\n\r\n    // add to signal\r\n    this.#cache.set({\r\n      ...this.#cache(),\r\n      [id]: newItem\r\n    });\r\n    l.end('updated');\r\n  }\r\n\r\n  remove(id: TKey): void {\r\n    const l = this.log.fn('remove', { id });\r\n    const { [id]: _, ...updatedStore } = this.#cache();\r\n    this.#cache.set(updatedStore as Record<TKey, TValue>);\r\n    l.end('removed');\r\n  }\r\n\r\n  clearCache(): void {\r\n    const l = this.log.fn('clearCache');\r\n    this.#cache.set({} as Record<TKey, TValue>);\r\n    l.end('cleared');\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Now-Getters\r\n\r\n  get(id: TKey): TValue {\r\n    const result = this.#cache()[id];\r\n    this.log.a(`get(${id}) - ` + (result == null ? 'not' : '') + 'found');\r\n    return result;\r\n  }\r\n\r\n  getAll(): TValue[] {\r\n    const result = this.#list();\r\n    this.log.a('getAll() - ' + `found ${result.length} items`);\r\n    return result;\r\n  }\r\n\r\n  getMany(ids: TKey[]): TValue[] {\r\n    const l = this.log.fn('getMany', { ids });\r\n    const result = ids\r\n      .map(id => this.#cache()[id])\r\n      .filter(item => item != null);\r\n    return l.r(result, `found ${result.length} items`);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Signal Getters\r\n\r\n  getSignal(id: TKey): Signal<TValue> {\r\n    const result = this.#itemSignalsCache.getOrCreateWithInfo(id, () => this.get(id));\r\n    this.log.a(`getSignal(${id})`, { isNew: result.isNew });\r\n    return result.signal;\r\n  }\r\n  #itemSignalsCache = new ComputedCacheHelper<TKey, TValue>('item');\r\n\r\n\r\n  getManySignal(ids: TKey[]): Signal<TValue[]> {\r\n    const sig = computedObj('getMany', () => ids.map(id => this.get(id)).filter(item => item != null));\r\n    this.log.a('getManySignal()', { ids });\r\n    return sig;\r\n  }\r\n\r\n  getAllSignal(): Signal<TValue[]> {\r\n    const list = this.#list;\r\n    this.log.a(`getAllSignal() - found ${list().length} items`);\r\n    return list;\r\n  }\r\n\r\n  //#endregion\r\n\r\n}\r\n","import { FormLanguage } from '../form/form-languages.model';\r\nimport { EavField, EavValue } from '../shared/models/eav';\r\nimport { DimensionReader } from './dimension-reader';\r\nimport { classLog } from '../../shared/logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  constructor: false,\r\n};\r\n\r\nexport class FieldReader<T = any> {\r\n  \r\n  log = classLog({FieldReader}, logSpecs);\r\n\r\n  constructor(field: EavField<T>, language: string);\r\n  constructor(field: EavField<T>, language: FormLanguage);\r\n  constructor(field: EavField<T>, language: FormLanguage | string) {\r\n    this.log.fnIf('constructor', { field, language });\r\n    this.#field = field;\r\n    this.#language = typeof language === 'string' ? { current: language, primary: language } : language;\r\n    this.#values = field?.Values ?? [];\r\n    this.#noData = !field || !field.Values || field.Values.length === 0;\r\n  }\r\n\r\n  #noData = true;\r\n\r\n  #field: EavField<T>;\r\n  /** Values - never empty for read-safety */\r\n  #values: EavValue<T>[];\r\n  #language: FormLanguage;\r\n\r\n  get current(): EavValue<T> | null {\r\n    return this.ofLanguage(this.#language); // first match if any is the one we're looking for\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Priority:\r\n   * 1. value for current language\r\n   * 2. value for all languages\r\n   * 3. value for default language\r\n   *\r\n   * @readonly\r\n   * @type {EavValue<T>}\r\n   * @memberof FieldReader\r\n   */\r\n  get currentOrDefault(): EavValue<T> {\r\n    if (this.#noData) return null;\r\n    return this.current\r\n      // note that having both languages primary will also result in checking the '*' dimension\r\n      ?? this.ofLanguage(FormLanguage.bothPrimary(this.#language));\r\n  }\r\n\r\n  /**\r\n   * Priority:\r\n   * 1. value for current language\r\n   * 2. value for all languages\r\n   * 3. value for default language\r\n   * 4. first/any value in the system\r\n   */\r\n  get currentOrDefaultOrAny(): EavValue<T> | null {\r\n    if (this.#noData) return null;\r\n    return this.currentOrDefault ?? this.#values[0] ?? null;\r\n  }\r\n\r\n\r\n  ofLanguage(language: FormLanguage): EavValue<T> | null {\r\n    if (this.#noData) return null;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, language).hasCurrent)[0] ?? null;\r\n  }\r\n\r\n  /** Check if there is a value on the specified primary language or on the '*' dimension */\r\n  get hasPrimary(): boolean {\r\n    if (this.#noData) return false;\r\n    const primary = this.#language.primary;\r\n    return this.#values.filter(val => val.Dimensions.find(d => d.Value === primary || d.Value === '*')).length > 0;\r\n  }\r\n\r\n  get hasCurrentReadonly(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, this.#language).hasCurrentReadOnly).length > 0;\r\n  }\r\n\r\n  /** A value in specified Language is editable, if assigned to current language or to '*' (but only when on default-language) */\r\n  get hasEditableValues(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#valuesEditableOf().length > 0;\r\n  }\r\n\r\n  /** Number of editable translatable fields that */\r\n  countEditable(): number {\r\n    return this.#valuesEditableOf().length;\r\n  }\r\n\r\n  /** Number of editable translatable fields that have some content (not empty/null) */\r\n  countEditableWithContents(): number {\r\n    return this.#valuesEditableOf().filter(v => v.Value != \"\" && v.Value != null)?.length;\r\n  }\r\n\r\n  /**\r\n   * Values of a field are for the current language,\r\n   * if they are assigned to the current language or to '*' (but only when the current-language is also the primary-language)\r\n   */\r\n  #valuesEditableOf(language?: FormLanguage): EavValue<T>[] {\r\n    if (this.#noData) return [];\r\n    language ??= this.#language;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, language).hasCurrentWrite);\r\n  }\r\n\r\n  /** Value of current language which is editable. `null` if not found. */\r\n  get currentEditable(): EavValue<T> {\r\n    if (this.#noData) return null;\r\n    const dimension = this.#language.current;\r\n    return this.#values.find(v => v.Dimensions.find(x => x.Value === dimension)) ?? null;\r\n  }\r\n\r\n  isEditableOrReadonlyTranslationExist(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#valuesEditableOf().length > 0;\r\n  }\r\n\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ 'Fields.Hyperlink.PagePicker.Title' | translate }}</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <div class=\"page-search-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Search</mat-label>\r\n        <input matInput [ngModel]=\"filterText()\" (ngModelChange)=\"setFilter($event)\">\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"page-tree-box\">\r\n      @if (!filterText()) {\r\n      <ul>\r\n        @for (page of tree(); track page) {\r\n        <ng-container *ngTemplateOutlet=\"pageAndChildren; context: {page: page}\"></ng-container>\r\n        }\r\n      </ul>\r\n      }\r\n      @if (filterText()) {\r\n      <ul>\r\n        @if (filteredSearch().length === 0) {\r\n        <li>\r\n          <div class=\"page-row\">\r\n            <div class=\"no-toggle\"></div>\r\n            <div>No results</div>\r\n          </div>\r\n        </li>\r\n        }\r\n        @for (page of filteredSearch(); track page) {\r\n        <li>\r\n          <div class=\"page-row\">\r\n            <div class=\"no-toggle\"></div>\r\n            <div class=\"page-label\" [ngClass]=\"page.id === selected ? 'selected' : ''\" (click)=\"select(page)\">\r\n              <div class=\"page-icon-and-text\">\r\n                <mat-icon class=\"page-icon\" svgIcon=\"file\"></mat-icon>\r\n                @if (page.path) {\r\n                <span class=\"page-path\" [tippy]=\"page.path\">{{ page.path }}&nbsp;>&nbsp;</span>\r\n                }\r\n                <span class=\"page-name\" [tippy]=\"page.name\">{{ page.name }}</span>\r\n              </div>\r\n              <div class=\"page-icons\">\r\n                @if (!page.isNavigation) {\r\n                <mat-icon class=\"page-visible-clickable-icon\">visibility_off</mat-icon>\r\n                }\r\n                @if (!page.isClickable) {\r\n                <mat-icon class=\"page-visible-clickable-icon\">cancel</mat-icon>\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </li>\r\n        }\r\n      </ul>\r\n      }\r\n    </div>\r\n    <ng-template #pageAndChildren let-page=\"page\">\r\n      <li>\r\n        <div class=\"page-row\">\r\n          @if (page.children.length === 0) {\r\n          <div class=\"no-toggle\"></div>\r\n          }\r\n          @if (page.children.length > 0) {\r\n          <mat-icon class=\"page-toggle\" (click)=\"toggle(page.id)\">\r\n            {{ toggled.includes(page.id) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n          </mat-icon>\r\n          }\r\n          <div class=\"page-label\" [ngClass]=\"page.id === selected ? 'selected' : ''\" (click)=\"select(page)\">\r\n            <div class=\"page-icon-and-text\">\r\n              <mat-icon class=\"page-icon\" svgIcon=\"file\"></mat-icon>\r\n              <span>{{ page.name }}</span>\r\n            </div>\r\n            <div class=\"page-icons\">\r\n              @if (!page.isVisible) {\r\n              <mat-icon class=\"page-visible-clickable-icon\">visibility_off</mat-icon>\r\n              }\r\n              @if (!page.isClickable) {\r\n              <mat-icon class=\"page-visible-clickable-icon\">cancel</mat-icon>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        @if (page.children.length > 0 && toggled.includes(page.id)) {\r\n        <ul>\r\n          @for (child of page.children; track child) {\r\n          <ng-container *ngTemplateOutlet=\"pageAndChildren; context: {page: child}\"></ng-container>\r\n          }\r\n        </ul>\r\n        }\r\n      </li>\r\n    </ng-template>\r\n  </div>\r\n  <mat-dialog-actions>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, computed, Inject, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core';\r\nimport { FieldValue } from '../../../../../../edit-types/src/FieldValue';\r\nimport { PagePickerResult } from '../../../../../../edit-types/src/PagePickerResult';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ArrayHelpers } from '../../../shared/helpers/array.helpers';\r\nimport { QueryService } from '../../../shared/services/query.service';\r\nimport { buildPageSearch, buildPageTree } from './page-picker.helpers';\r\nimport { PageEntity, PagePickerDialogData, PageSearchItem, PageTreeItem } from './page-picker.models';\r\n\r\n@Component({\r\n    selector: 'app-page-picker',\r\n    templateUrl: './page-picker.component.html',\r\n    styleUrls: ['./page-picker.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        FormsModule,\r\n        NgTemplateOutlet,\r\n        NgClass,\r\n        MatIconModule,\r\n        MatDialogActions,\r\n        TranslateModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class PagePickerComponent implements OnInit {\r\n  selected: number;\r\n  toggled: number[];\r\n\r\n  filterText = signal<string>('');\r\n  searchItems = signal<PageSearchItem[]>([]);\r\n  tree = signal<PageTreeItem[]>([]);\r\n\r\n  filteredSearch = computed(() => {\r\n    const filterText = this.filterText();\r\n    const searchItems = this.searchItems();\r\n    return searchItems.filter(item => item.name.toLocaleLowerCase().includes(filterText.toLocaleLowerCase()));\r\n  });\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: PagePickerDialogData,\r\n    private dialog: MatDialogRef<PagePickerComponent>,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.selected = this.parseSelectedPageId();\r\n    this.toggled = [];\r\n\r\n    this.fetchPages();\r\n  }\r\n\r\n  setFilter(filterText: string): void {\r\n    this.filterText.set(filterText);\r\n  }\r\n\r\n  select(page: PageTreeItem | PageSearchItem): void {\r\n    // filters out pages without parent (broken)\r\n    if (page.id == null) return;\r\n    if (!page.isClickable || !page.isNavigation) {\r\n      const ok = window.confirm(this.translate.instant('Fields.Hyperlink.PagePicker.HiddenOrSystemPageWarning'));\r\n      if (!ok) return;\r\n    }\r\n    this.closeDialog(page.id);\r\n  }\r\n\r\n  toggle(pageId: number): void {\r\n    ArrayHelpers.toggleInArray(pageId, this.toggled);\r\n  }\r\n\r\n  private closeDialog(pageId?: number): void {\r\n    if (pageId == null) {\r\n      this.dialog.close();\r\n      return;\r\n    }\r\n\r\n    const page = this.searchItems().find(i => i.id === pageId);\r\n    const result: PagePickerResult = {\r\n      id: page.id.toString(),\r\n      name: page.name,\r\n    };\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  private fetchPages(): void {\r\n    const stream = 'Default';\r\n    const params = 'includehidden=true';\r\n    this.queryService.getFromQuery(`System.Pages/Default`, params, null).subscribe({\r\n      next: (data) => {\r\n        if (!data) {\r\n          console.error(this.translate.instant('Fields.Picker.QueryErrorNoData'));\r\n          return;\r\n        }\r\n        if (!data[stream]) {\r\n          console.error(this.translate.instant('Fields.Picker.QueryStreamNotFound') + ' ' + stream);\r\n          return;\r\n        }\r\n        const pages = data[stream] as PageEntity[];\r\n        const searchItems = buildPageSearch(pages);\r\n        this.searchItems.set(searchItems);\r\n        const tree = buildPageTree(pages);\r\n        this.tree.set(tree);\r\n      },\r\n      error: (error) => {\r\n        console.error(error);\r\n        console.error(`${this.translate.instant('Fields.Picker.QueryError')} - ${error.data}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private parseSelectedPageId(): number {\r\n    const prefix = 'page:';\r\n    let fieldValue: FieldValue = this.dialogData.group.controls[this.dialogData.config.fieldName].value;\r\n    if (typeof fieldValue !== 'string') return;\r\n\r\n    fieldValue = fieldValue.trim().toLocaleLowerCase();\r\n    if (!fieldValue.startsWith(prefix)) return;\r\n\r\n    try {\r\n      const id = parseInt(fieldValue.split(prefix)[1], 10);\r\n      return id;\r\n    } catch {\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { PageEntity, PageSearchItem, PageTreeItem } from './page-picker.models';\r\n\r\nexport function buildPageSearch(pages: PageEntity[]): PageSearchItem[] {\r\n  if (!pages) { return []; }\r\n\r\n  const items = pages.map(page => {\r\n    let path = page.Path.trim().replace(/\\\\/g, '/').replace(/\\/\\//g, '/');\r\n    if (path.startsWith('/')) {\r\n      path = path.substring(1);\r\n    }\r\n    path = path.split('/').slice(0, -1).join(' > ');\r\n\r\n    const item: PageSearchItem = {\r\n      id: page.Id,\r\n      name: page.Name,\r\n      path,\r\n      isNavigation: page.IsNavigation,\r\n      isClickable: page.IsClickable,\r\n    };\r\n    return item;\r\n  });\r\n\r\n  return items;\r\n}\r\n\r\nexport function buildPageTree(pages: PageEntity[]): PageTreeItem[] {\r\n  if (!pages) { return []; }\r\n\r\n  const items = pages.map(page => {\r\n    const item: PageTreeItem = {\r\n      children: [],\r\n      id: page.Id,\r\n      name: page.Name,\r\n      parentId: page.ParentId,\r\n      isNavigation: page.IsNavigation,\r\n      isClickable: page.IsClickable,\r\n    };\r\n    return item;\r\n  });\r\n\r\n  const tree: PageTreeItem[] = [];\r\n  for (const item of items) {\r\n    if (item.parentId === -1) {\r\n      tree.push(item);\r\n      continue;\r\n    }\r\n\r\n    const parent = items.find(i => i.id === item.parentId);\r\n    if (!parent) {\r\n      tree.push(item);\r\n    } else {\r\n      parent.children.push(item);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { take } from 'rxjs';\r\nimport { PagePickerResult } from '../../../../../../edit-types/src/PagePickerResult';\r\nimport { FieldConfigSet } from '../field-config-set.model';\r\nimport { PagePickerComponent } from './page-picker.component';\r\nimport { PagePickerDialogData } from './page-picker.models';\r\n\r\nexport class PagePicker {\r\n  static open(\r\n    config: FieldConfigSet,\r\n    group: UntypedFormGroup,\r\n    matDialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    callback: (value: PagePickerResult) => void,\r\n  ): void {\r\n    const dialogData: PagePickerDialogData = {\r\n      config,\r\n      group,\r\n    };\r\n    const dialogRef = matDialog.open(PagePickerComponent, {\r\n      autoFocus: false,\r\n      data: dialogData,\r\n      viewContainerRef,\r\n      height: '80%',\r\n      width: '650px',\r\n    });\r\n\r\n    dialogRef.afterClosed().pipe(take(1)).subscribe((value: PagePickerResult) => {\r\n      callback(value);\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { effect, Injector, Signal } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { BasicControlSettings } from '../../../../../edit-types/src/BasicControlSettings';\r\nimport { FieldSettings } from '../../../../../edit-types/src/FieldSettings';\r\nimport { FieldValue } from '../../../../../edit-types/src/FieldValue';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { computedObj, signalObj } from '../../shared/signals/signal.utilities';\r\nimport { TranslationState } from '../localization/translate-state.model';\r\nimport { UiControl } from '../shared/controls/ui-control';\r\nimport { FieldConfigSet } from './field-config-set.model';\r\nimport { PickerData } from './picker/picker-data';\r\n\r\n/**\r\n * This is provided / injected at the fields-builder for every single field.\r\n * So any control or service within that field, which requests this service, will get one containing exactly that fields.\r\n */\r\nexport class FieldState<TValue extends FieldValue = FieldValue, TSettings extends FieldSettings = FieldSettings> {\r\n  constructor(\r\n    /** The fields technical name to access settings etc. */\r\n    public name: string,\r\n\r\n    /** Field configuration, incl. a lot of unchanging values and access to adam, dropzone etc. */\r\n    public config: FieldConfigSet,\r\n\r\n    /** The form group containing the field - rarely relevant, as you should use the control in most cases */\r\n    public group: UntypedFormGroup,\r\n\r\n    // TODO: @2pp try to find out where this is used just to create a signal for a property\r\n    /** The settings as a signal - use this for most cases */\r\n    public settings: Signal<TSettings>,\r\n\r\n    /** The basic settings - use this for most cases as it will change less than the settings signal */\r\n    public basics: Signal<BasicControlSettings>,\r\n\r\n    /**\r\n     * The UI control (actually it's the virtual UI control), since it's a reactive form control.\r\n     * Note: e just introduced uiValue below, which should be used in most cases\r\n     */\r\n    public ui: Signal<UiControl>,\r\n\r\n    /** The value of the field in the UI control as a signal */\r\n    public uiValue: Signal<TValue>,\r\n\r\n    public translationState: Signal<TranslationState>,\r\n\r\n    /** Signal if a dialog (popup) of this field is open, like a hyperlink-dialog */\r\n    public isOpen: Signal<boolean>,\r\n\r\n    pickerData: PickerData,\r\n\r\n    featuresSvc: FeaturesService,\r\n\r\n    injectorForEffects: Injector,\r\n  ) {\r\n    this.#pickerData = pickerData;\r\n\r\n    // Required Features Transfer\r\n    effect(() => {\r\n      const reqFeaturesFromSettings = this.requiredFeatures();\r\n      if (reqFeaturesFromSettings.length == 0)\r\n        return;\r\n      for (const feature of reqFeaturesFromSettings)\r\n        featuresSvc.requireFeature(feature, `Used in field ${this.name}`);\r\n    }, { injector: injectorForEffects });\r\n\r\n  }\r\n\r\n  /**\r\n   * Picker Data - will throw an error if accessed on a field which doesn't have PickerData\r\n   * @readonly\r\n   * @type {PickerData}\r\n   */\r\n  get pickerData(): PickerData {\r\n    if (this.#pickerData)\r\n      return this.#pickerData;\r\n    throw new Error(`PickerData was not initialized for the field: ${this.name}`);\r\n  }\r\n  #pickerData: PickerData;\r\n\r\n  /**\r\n   * Cool helper to just get a single value-signal from the settings.\r\n   * It will automatically\r\n   * - ensure that you only use valid keys\r\n   * - return a signal with that name\r\n   * - the signal will be correctly typed as the setting value is typed\r\n   * @param name property name of a FieldSettings\r\n   * @returns the signal for that property, with isEqual change detection and name\r\n   */\r\n  setting<K extends keyof FieldSettings>(name: K): Signal<FieldSettings[K]> {\r\n    return computedObj(name as string, () => this.settings()[name]);\r\n  }\r\n\r\n  settingExt<K extends keyof TSettings>(name: K): Signal<TSettings[K]> {\r\n    return computedObj(name as string, () => this.settings()[name]);\r\n  }\r\n\r\n  // settingExt<TSet extends FieldSettings, K extends keyof TSet>(name: K): Signal<TSet[K]> {\r\n  //   return computedObj(name as string, () => (this.settings() as unknown as TSet)[name]);\r\n  // }\r\n\r\n  //#region Required Features\r\n\r\n  #reqFeaturesMy = signalObj<Of<typeof FeatureNames>[]>('requiredFeatures', []);\r\n  #reqFeaturesFromSettings = this.setting('requiredFeatures');\r\n\r\n  requiredFeatures = computedObj('requiredFeatures', () => {\r\n    const merged = [\r\n      ...this.#reqFeaturesMy(),\r\n      ...this.#reqFeaturesFromSettings() ?? [],\r\n    ];\r\n    // make distinct\r\n    return Array.from(new Set(merged));\r\n  });\r\n\r\n  requireFeature(feature: Of<typeof FeatureNames>) {\r\n    const current = this.#reqFeaturesMy();\r\n    if (!current.includes(feature))\r\n      this.#reqFeaturesMy.set([...current, feature]);\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import { Injectable, Signal, inject, signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogContext } from '../../app-administration/models';\r\nimport { keyPartOfPage, keyPublishing, partOfPageDefault } from '../../shared/constants/session.constants';\r\nimport { classLog } from '../../shared/logging';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EditSettings } from '../dialog/main/edit-dialog-main.models';\r\nimport { FormConfiguration, VersioningOptions } from './form-configuration.model';\r\nimport { FormLanguageService } from './form-language.service';\r\nimport { FormLanguageComplete, FormLanguagesConfig } from './form-languages.model';\r\n\r\n/**\r\n * Service which tell us about a single edit-form configuration.\r\n * It contains multiple entities.\r\n *\r\n * Things such as language, IDs shown on it, edit-settings etc.\r\n */\r\n@Injectable()\r\nexport class FormConfigService {\r\n  \r\n  log = classLog({FormConfigService});\r\n  \r\n  /** no constructor */\r\n  constructor() { }\r\n\r\n  /**\r\n   * Important! These are constants that form was loaded with.\r\n   * They are initialized in the main edit-form.\r\n   * They do not change while form is running\r\n   */\r\n  config: FormConfiguration;\r\n\r\n  // WIP, null at first\r\n  configSignal = signal<FormConfiguration>(null);\r\n\r\n  /**\r\n   * Current form language information\r\n   */\r\n  language: Signal<FormLanguageComplete>;\r\n\r\n  /**\r\n   * Current edit settings\r\n   * Note: Clean use - only used by classes that inject this themselves\r\n   */\r\n  settings: EditSettings;\r\n\r\n  /**\r\n   * Form language configuration, not meant to change during runtime...\r\n   */\r\n  languages: FormLanguagesConfig;\r\n\r\n  /** Used to fetch form data and fill up eavConfig. Do not use anywhere else */\r\n  private context = inject(Context);\r\n  private languageService = inject(FormLanguageService);\r\n\r\n  /** Create EavConfiguration from sessionStorage */\r\n  initFormConfig(\r\n    dialogContext: DialogContext,\r\n    formId: number,\r\n    isParentDialog: boolean,\r\n    itemGuids: string[],\r\n    createMode: boolean,\r\n    isCopy: boolean,\r\n    enableHistory: boolean,\r\n    settings: EditSettings\r\n  ) {\r\n    this.settings = settings;\r\n    this.languages = {\r\n      initial: dialogContext.Language.Current,\r\n      primary: dialogContext.Language.Primary,\r\n      list: dialogContext.Language.List,\r\n    };\r\n    this.config = {\r\n      zoneId: this.context.zoneId,\r\n      appId: this.context.appId,\r\n      appRoot: dialogContext.App.Url,\r\n      appSharedRoot: dialogContext.App.SharedUrl,\r\n      moduleId: this.context.moduleId?.toString(),\r\n      partOfPage: sessionStorage.getItem(keyPartOfPage) ?? partOfPageDefault,\r\n      portalRoot: dialogContext.Site.Url,\r\n      tabId: this.context.tabId?.toString(),\r\n      systemRoot: window.location.pathname.split('/dist/')[0] + '/',\r\n      versioningOptions: this.getVersioningOptions(\r\n        sessionStorage.getItem(keyPartOfPage) === 'true',\r\n        sessionStorage.getItem(keyPublishing)\r\n      ),\r\n      formId,\r\n      isParentDialog,\r\n      itemGuids,\r\n      createMode,\r\n      isCopy,\r\n      enableHistory,\r\n      enableFormulaSave: dialogContext.Enable.FormulaSave ?? false,\r\n      removeEditRestrictions: dialogContext.Enable.OverrideEditRestrictions ?? false,\r\n      dialogContext,\r\n      settings,\r\n    };\r\n    this.configSignal.set(this.config);\r\n    this.language = this.languageService.getSignal(this.config.formId);\r\n  }\r\n\r\n  private getVersioningOptions(\r\n    partOfPage: boolean,\r\n    publishing: string\r\n  ): VersioningOptions {\r\n\r\n    const allowAll: VersioningOptions = { show: true, hide: true, branch: true };\r\n\r\n    if (!partOfPage)\r\n      return allowAll;\r\n\r\n    const publish = publishing || '';\r\n    switch (publish) {\r\n      case '':\r\n      case 'DraftOptional':\r\n        return allowAll;\r\n      case 'DraftRequired':\r\n        // Note: the key 'show' should not be added, as the code later picks the first property to set the default\r\n        // Branch should also be first, as it's the preferred option\r\n        return { branch: true, hide: true };\r\n      case 'DraftForbidden':\r\n        return { show: true };\r\n      default: {\r\n        console.error(`Invalid versioning requirements: ${publish}`);\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the language observable for the form - it will keep track of the current language as it changes.\r\n   * TODO: try to use the signal as much as possible\r\n    // TODO:: @2dg Question Languages as Signal\r\n   */\r\n  get language$(): Observable<FormLanguageComplete> {\r\n    return this._language$ ??= this.languageService.getLanguage$(this.config.formId);\r\n  }\r\n  private _language$: Observable<FormLanguageComplete>;\r\n\r\n}\r\n","import { FormLanguage } from '../form/form-languages.model';\r\nimport { EavDimension } from '../shared/models/eav';\r\n\r\n\r\nexport class DimensionReader {\r\n  constructor(private dimensions: EavDimension[], private language: FormLanguage) { }\r\n\r\n  get hasCurrentWrite(): boolean {\r\n    const match = this.dimensions.find(d => d.Value === this.language.current\r\n      || (this.language.current === this.language.primary && d.Value === '*'));\r\n    return !!match;\r\n  }\r\n\r\n  get hasCurrentReadOnly(): boolean {\r\n    const currentRO = `~${this.language.current}`;\r\n    return this.dimensions.find(d => d.Value === currentRO) !== undefined;\r\n  }\r\n\r\n  get hasCurrent(): boolean {\r\n    const match = this.dimensions.find(d => d.Value === this.language.current\r\n      || d.Value === `~${this.language.current}`\r\n      || (this.language.current === this.language.primary && d.Value === '*'));\r\n    return !!match;\r\n  }\r\n}\r\n","import { Language } from '../../shared/models/language.model';\r\n\r\nexport { Language } from '../../shared/models/language.model';\r\n\r\nexport class FormLanguage\r\n{\r\n  /** The current language of the system / UI. */\r\n  current: string;\r\n\r\n  /** The primary language of the system.\r\n   * Important, because the primary language must be filled in before all other languages.\r\n   */\r\n  primary: string;\r\n\r\n  /**\r\n   * In some cases we want both to be primary, but it's not clear why.\r\n   * I think it's just because we want certain tests to only use one value, but the test is meant for 2 values.\r\n   */\r\n  static bothPrimary(original: FormLanguage): FormLanguage {\r\n    return {\r\n      current: original.primary,\r\n      primary: original.primary\r\n    };\r\n  }\r\n\r\n  static diffCurrent(original: FormLanguage, current: string): FormLanguage {\r\n    return {\r\n      current: current,\r\n      primary: original.primary\r\n    };\r\n  }\r\n\r\n  static empty(): FormLanguageComplete {\r\n    return {\r\n      current: '',\r\n      primary: '',\r\n      initial: '',\r\n    };\r\n  }\r\n}\r\n\r\nexport class FormLanguageComplete extends FormLanguage {\r\n  /** initial language of the UI */\r\n  initial: string;\r\n}\r\n\r\nexport interface FormLanguagesConfig\r\n{\r\n  initial: string;\r\n  primary: string;\r\n  list: Language[];\r\n}\r\n\r\n","import { toObservable } from '@angular/core/rxjs-interop';\r\nimport { SignalStoreBase } from './signal-store-base';\r\nimport { Observable } from 'rxjs';\r\nimport { mapUntilChanged } from '../../../shared/rxJs/mapUntilChanged';\r\n\r\nexport abstract class SignalStoreObservableBase<TKey extends string | number, TValue> extends SignalStoreBase<TKey, TValue> {\r\n\r\n  /** Old / existing functionality with observables */\r\n  #cache$ = toObservable(this.cache);\r\n\r\n  #list$ = toObservable(this.list);\r\n\r\n  // publish only as a read-only signal\r\n  protected get cache$(): Observable<Record<TKey, TValue>> {\r\n    return this.#cache$;\r\n  }\r\n\r\n  protected get list$(): Observable<TValue[]> {\r\n    return this.#list$;\r\n  }\r\n\r\n  getList$(): Observable<TValue[]> {\r\n    return this.list$;\r\n  }\r\n\r\n  getMany$(ids?: TKey[]): Observable<TValue[]> {\r\n    return this.cache$.pipe(\r\n      mapUntilChanged(obj => ids.map(id => obj[id]).filter(m => m != null)),\r\n    );\r\n  }\r\n\r\n}"],"x_google_ignoreList":[]}