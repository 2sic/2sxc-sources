{"version":3,"file":"projects_eav-ui_src_app_manage-content-list_manage-content-list_module_ts.93e9d94e898f99aa.js","mappings":"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","names":["AppDialogConfigService","ServiceBase","constructor","http","context","globalConfigService","featuresService","super","EavLogger","this","dialogSettings$","log","add","svcId","loadFromService","ngOnDestroy","destroy","getCurrent$","appId","getShared$","getSitePrimaryApp$","pipe","map","dc","Context","Site","PrimaryApp","getGlobalPrimaryApp$","System","getDialogSettings","shareReplay","refCount","reqBy","get","params","toString","dlgSettings","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","static","t","i0","i1","i2","i3","i4","_angular_core__WEBPACK_IMPORTED_MODULE_8__","wxM","factory","ɵfac","webApiTypeRoot","webApiTypeScopes","ContentTypesService","dnnContext","apiUrl","name","$2sxc","retrieveContentType","staticName","contentTypeId","retrieveContentTypes","scope","getScopes","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ExportAppPartsService","getContentInfo","webApiAppPartsRoot","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","withFiles","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","_angular_core__WEBPACK_IMPORTED_MODULE_6__","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","manageContentListDialog","initContext","panelSize","panelClass","getComponent","_asyncToGenerator","ManageContentListComponent","Promise","all","__webpack_require__","e","then","bind","routes","path","component","DialogEntryComponent","data","dialog","children","matcher","edit","loadChildren","m","EditModule","refreshEdit","RefreshEditModule","ReplaceContentModule","ManageContentListRoutingModule","core","a4G","s3X","RouterModule","forChild","ManageContentListModule","ContentGroupService","EavService","imports","CommonModule","SharedComponentsModule","MatDialogModule","MatButtonModule","MatIconModule","DragDropModule","MatSnackBarModule","TranslateModule","buildTranslateConfiguration","translateLoaderFactory","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","Error","consoleLogDev","_dialogAnimatingOpen","_lastDialogRef","afterOpened","subscribe","openDialogComponent","dialogRef","close","init","autoFocus","backdropClass","closeOnNavigation","showScrollbar","position","top","afterClosed","navRes","navigateUrl","pathFromRoot","length","parent","totalPopup","navigate","relativeTo","markForCheck","In1","selectors","features","decls","vars","template","rf","ctx","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","sxcVersion","prefix","suffix","getTranslation","lang","catchError","console","warn"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/manage-content-list/manage-content-list-dialog.config.ts","./projects/eav-ui/src/app/manage-content-list/manage-content-list-routing.module.ts","./projects/eav-ui/src/app/manage-content-list/manage-content-list.module.ts","./projects/eav-ui/src/app/shared/components/dialog-entry/dialog-entry.component.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { ServiceBase } from '../../shared/services/service-base';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { DialogContextSiteApp } from '../../shared/models/dialog-context.models';\r\n\r\nconst logThis = false;\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService extends ServiceBase implements OnDestroy {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    // private dnnContext: DnnContext,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    super(new EavLogger('AppDialogConfigService', logThis));\r\n    this.log.add('using context #', this.context.log.svcId);\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.destroy();\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions in dialogSettings$ are killed\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getCurrent$(): Observable<DialogSettings> {\r\n    const appId = this.context.appId;\r\n    this.log.add('getCurrent$', 'appId', appId);\r\n    return this.getShared$(appId);\r\n  }\r\n\r\n    // new 2dg\r\n    getSitePrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.Site.PrimaryApp));\r\n    }\r\n  \r\n    getGlobalPrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.System.PrimaryApp));\r\n    }\r\n  \r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.add('getShared$', 'appId', appId);\r\n    // if (!this.dialogSettings$[appIdToUse])\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$').pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.add('getDialogSettings', 'appId', appId, 'reqBy', reqBy);\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { webApiEntityList } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const manageContentListDialog: DialogConfig = {\r\n  name: 'MANAGE_CONTENT_LIST_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ManageContentListComponent } = await import('./manage-content-list.component');\r\n    return ManageContentListComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../edit/edit.matcher';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { manageContentListDialog } from './manage-content-list-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: manageContentListDialog }, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n      {\r\n        path: ':guid/:part/:index/replace',\r\n        loadChildren: () => import('../replace-content/replace-content.module').then(m => m.ReplaceContentModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ManageContentListRoutingModule { }\r\n","import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ManageContentListRoutingModule } from './manage-content-list-routing.module';\r\nimport { ManageContentListComponent } from './manage-content-list.component';\r\nimport { ContentGroupService } from './services/content-group.service';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { EavService } from '../edit/shared/services';\r\nimport { AppDialogConfigService } from '../app-administration/services';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ManageContentListComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ManageContentListRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    DragDropModule,\r\n    MatSnackBarModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentGroupService,\r\n    EavService,\r\n    AppDialogConfigService\r\n  ]\r\n})\r\nexport class ManageContentListModule { }\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, Type, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Data, Route, Router } from '@angular/router';\r\nimport { NavigateFormResult } from '../../../edit/shared/models';\r\nimport { consoleLogDev } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\nimport { ServiceBase } from '../../services/service-base';\r\nimport { EavLogger } from '../../logging/eav-logger';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nconst logThis = false;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n})\r\nexport class DialogEntryComponent extends ServiceBase implements OnInit, OnDestroy {\r\n  private dialogData: Record<string, any>;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super(new EavLogger('DialogEntryComponent', logThis));\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  // 2dm experimental - may improve readability where this is used\r\n  // static routeFor(dialog: DialogConfig, data?: Data): Partial<Route> {\r\n  //   return { component: DialogEntryComponent, data: { ...data, dialog: dialog } };\r\n  // }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogDev('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      // spm Workaround for \"feature\" where you can't open new dialog while last one is still opening\r\n      // https://github.com/angular/components/commit/728cf1c8ebd49e089f4bae945511bb0918972c26\r\n      if ((this.dialog as any)._dialogAnimatingOpen && (this.dialog as any)._lastDialogRef) {\r\n        ((this.dialog as any)._lastDialogRef as MatDialogRef<any>).afterOpened().subscribe(() => {\r\n          this.openDialogComponent(dialogConfig, component);\r\n        });\r\n      } else {\r\n        this.openDialogComponent(dialogConfig, component);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private openDialogComponent(dialogConfig: DialogConfig, component: Type<any>) {\r\n    this.log.add(`Open dialog(initContext: ${dialogConfig.initContext})`, dialogConfig.name, 'Context id:', this.context.log.svcId, 'Context:', this.context);\r\n    if (dialogConfig.initContext) {\r\n      this.context.init(this.route);\r\n    }\r\n\r\n    this.dialogRef = this.dialog.open(component, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: this.dialogData,\r\n      panelClass: [\r\n        'dialog-panel',\r\n        `dialog-panel-${dialogConfig.panelSize}`,\r\n        dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n        ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n      ],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n\r\n    this.dialogRef.afterClosed().subscribe((data: any) => {\r\n      consoleLogDev('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n      const navRes = data as NavigateFormResult;\r\n      if (navRes?.navigateUrl != null) {\r\n        this.router.navigate([navRes.navigateUrl]);\r\n        return;\r\n      }\r\n\r\n      if (this.route.pathFromRoot.length <= 3) {\r\n        try {\r\n          window.parent.$2sxc.totalPopup.close();\r\n        } catch (error) { }\r\n        return;\r\n      }\r\n\r\n      if (this.route.snapshot.url.length > 0) {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n      } else {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n      }\r\n    });\r\n\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}