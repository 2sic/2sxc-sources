{"version":3,"file":"projects_eav-ui_src_app_app-administration_app-configuration_app-configuration_component_ts.ff4c1566d44ac182.js","mappings":"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","names":["AppInternalsService","HttpServiceBase","getAppInternals","internals","this","getSignal","params","appid","appId","__ngFactoryType__","factory","ɵfac","AnalyzeParts","Settings","Resources","i0","_r1","ctx_r1","clipboard","copyToClipboard","contentItem","DisplayName","Folder","Version","RequiredVersion","RequiredDnnVersion","RequiredOqtaneVersion","formatValue","tmp_2_0","tmp_4_0","tmp_6_0","tmp_8_0","tmp_10_0","tmp_12_0","appConfigurationUrl","appConfigAvailable","tmp_16_0","appSettingsInternal","EntityLists","ToSxcContentApp","length","urlToOpenMetadata","tmp_18_0","MetadataList","Items","AppConfigurationCardComponent","#appInternalsSvc","#contentItemsSvc","#dialogRouter","constructor","context","snackBar","dialogSettings","input","required","transient","ContentItemsService","DialogRoutingService","signal","getAllSig","eavConstants","contentTypes","appConfiguration","#refresh","computed","undefined","ClipboardService","urlToEdit","ngOnInit","doOnDialogClosed","update","value","ngOnDestroy","dismiss","#urlTo","url","urlSubRoute","getAll","subscribe","contentItems","set","convertFormToUrl","items","EditPrep","editId","Id","GoToMetadata","getUrlApp","Context","App","Name","i1","i2","selectors","inputs","decls","vars","consts","template","rf","ctx","AppConfigurationCardComponent_Conditional_0_Template","MatCardModule","i3","MatIconModule","i4","MatButtonModule","i5","MatBadgeModule","i6","TippyDirective","DocsLinkHelperComponent","styles","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_1_Template","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_2_Template","isGlobal","isSite","AppConfigurationComponent_Conditional_0_Conditional_36_ng_container_0_Template","goToGlobal_r3","AppConfigurationComponent_Conditional_0_Conditional_37_ng_container_0_Template","AppConfigurationComponent_Conditional_0_Conditional_37_ng_container_1_Template","goToSite_r4","AppConfigurationComponent_Conditional_0_Conditional_80_ng_container_0_Template","AppConfigurationComponent_Conditional_0_Conditional_81_ng_container_0_Template","AppConfigurationComponent_Conditional_0_Conditional_81_ng_container_1_Template","_r5","openGlobalSettings","_r6","openSiteSettings","AppConfigurationComponent_Conditional_0_Conditional_144_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_144_Conditional_1_Template","isApp","AppConfigurationComponent_Conditional_0_Conditional_0_Template","$event","fixContentTypeIfNecessary","buttons","customSettings","customSettingsType","AppConfigurationComponent_Conditional_0_Conditional_36_Template","AppConfigurationComponent_Conditional_0_Conditional_37_Template","customResources","customResourcesType","AppConfigurationComponent_Conditional_0_Conditional_80_Template","AppConfigurationComponent_Conditional_0_Conditional_81_Template","AppConfigurationComponent_Conditional_0_ng_template_90_Template","AppConfigurationComponent_Conditional_0_ng_template_92_Template","AppConfigurationComponent_Conditional_0_Conditional_144_Template","topRowLabel","systemSettings","tooltip","count","customSettingsFields","urlToAnalyze","systemResources","customResourcesFields","lightSpeedEnabled","lightspeed","urlToOpenPermissions","Enable","AppPermissions","Permissions","Count","urlToOpenLanguagePermissions","langPermsEnabled","AppConfigurationComponent","#featuresSvc","#dialogSvc","#contentTypesSvc","#appInternalsService","#contentItemsService","#dialogConfigSvc","inject","FeaturesService","DialogService","ContentTypesService","DialogConfigAppService","SystemSettingsScopes","AppScopes","toSignal","getCurrent$","#currentScope","SettingsScope","cs","Global","Site","appSystemSettingsUrl","#appSystemSettingsUrlSource","urlToEditSystem","appSystemResourcesUrl","#appSystemResourcesUrlSource","appCustomSettingsUrl","#appCustomSettingsUrlSource","settings","appCustomResourcesUrl","#appCustomResourcesUrlSource","resources","appSettingsInternal$","Subject","appStateAdvanced","isEnabled","FeatureNames","LightSpeed","cspEnabled","ContentSecurityPolicy","PermissionsByLanguage","#appSpecsLazy","#dataStatistics","appSpecs","props","lsTypeName","appMetadata","ContentTypeName","appLightSpeedCount","filter","i","_Type","systemSettingsCount","SettingsSystem","SettingsEntityScope","customSettingsCount","AppSettings","customSettingsFieldsCount","FieldAll","systemResourcesCount","ResourcesSystem","customResourcesCount","AppResources","customResourcesFieldsCount","#customTypesExist","nothing","scopeName","viewModel","typeNames","typesExist","urlToConfig","urlToGetLightSpeedLink","v","queryParams","errComponent","newUrl","URLSearchParams","toString","staticName","systemSettingsScope","systemSettingsEntities","error","systemSettingsEntity","newFromType","urlToEditCustom","customSettingsEntity","urlToEditDefault","AppAdminHelpers","getLightSpeedEditParams","siteApp","PrimaryApp","openAppAdministration","ZoneId","AppId","globalApp","System","GoToPermissions","enabled","part","typeName","event","preventDefault","stopPropagation","retrieveContentTypes","scopes","configuration","some","ct","window","open","save","StaticName","Description","Scope","ChangeNameId","NewNameId","success","alert","AppConfigurationComponent_Conditional_0_Template","NgTemplateOutlet","FeatureTextInfoComponent","RouterOutlet","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","static","type","encapsulation","changeDetection","MatBadge","_ngZone","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationMode","ANIMATION_MODULE_TYPE","optional","_idGenerator","_IdGenerator","color","_color","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","booleanAttribute","features","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-internals.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.models.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Injectable, Signal } from '@angular/core';\r\nimport { AppInternals } from '../../app-administration/models/app-internals.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiRoot = 'admin/appinternals/get';\r\n\r\n@Injectable()\r\nexport class AppInternalsService extends HttpServiceBase {\r\n\r\n  /**\r\n   * Fetches AppInternals for given key\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n\r\n  getAppInternals(internals: AppInternals): Signal<AppInternals> {\r\n    return this.getSignal<AppInternals>(webApiRoot, {\r\n      params: { appid: this.appId }\r\n    }, internals);\r\n  }\r\n\r\n}\r\n","\r\nexport const AnalyzeParts = {\r\n  Settings: 'Settings',\r\n  Resources: 'Resources',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport interface SettingsStackItem {\r\n  Path: string;\r\n  Priority: number;\r\n  Source: string;\r\n  TotalResults: number;\r\n  Type: string;\r\n  Value: string;\r\n  _value: string;\r\n}\r\n","<!-- App Config -->\r\n@if (contentItem()) {\r\n  <mat-card class=\"eav-card\">\r\n    <mat-card-header class=\"eav-card-header\">\r\n      <mat-card-title>Configuration</mat-card-title>\r\n      <mat-icon>redeem</mat-icon>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Name:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].DisplayName)\">{{\r\n            formatValue(contentItem()[0]?.DisplayName)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Folder:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Folder)\">{{\r\n            formatValue(contentItem()[0]?.Folder)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Version:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Version)\">{{\r\n            formatValue(contentItem()[0]?.Version)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">For</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <b>2sxc: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredVersion) }}\r\n          </span>\r\n          <b> DNN: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredDnnVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredDnnVersion) }}\r\n          </span>\r\n          <b> Oqt: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredOqtaneVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredOqtaneVersion) }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <!-- </p> -->\r\n    </mat-card-content>\r\n    <div class=\"eav-card-space-div\"></div>\r\n    <mat-card-actions align=\"start\">\r\n      <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/configuration.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n      <a\r\n        [href]=\"appConfigurationUrl()\"\r\n        mat-button\r\n        [disabled]=\"!appConfigAvailable()\"\r\n        class=\"eav-button__with-icon\"\r\n        tippy=\"Edit app system resources\"\r\n      >\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()()?.EntityLists?.ToSxcContentApp.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >edit</mat-icon\r\n        >\r\n        <span>Edit</span>\r\n      </a>\r\n      <a [href]=\"urlToOpenMetadata()\" mat-button class=\"eav-button__with-icon\">\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()()?.MetadataList.Items.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >local_offer</mat-icon\r\n        >\r\n        <span>Metadata</span>\r\n      </a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, computed, input, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../../content-items/services/content-items.service';\r\nimport { GoToMetadata } from '../../../metadata';\r\nimport { eavConstants } from '../../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../../shared/helpers/url-prep.helper';\r\nimport { DialogSettings } from '../../../shared/models/dialog-settings.model';\r\nimport { EditPrep } from '../../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../../shared/routing/dialog-routing.service';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { Context } from '../../../shared/services/context';\r\nimport { AppInternalsService } from '../../services/app-internals.service';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration-card',\r\n  templateUrl: './app-configuration-card.component.html',\r\n  styleUrls: ['./app-configuration-card.component.scss'],\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ]\r\n})\r\nexport class AppConfigurationCardComponent implements OnInit, OnDestroy {\r\n  dialogSettings = input.required<DialogSettings>();\r\n\r\n  #appInternalsSvc = transient(AppInternalsService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  appConfigurationUrl = signal('');\r\n  appConfigAvailable = signal(false);\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.appConfigurationUrl = (this.urlToEdit());\r\n\r\n    // debug\r\n    // effect(() => {\r\n    //   const ci = this.contentItem();\r\n    //   console.log(\"CI\", ci);\r\n    // });\r\n  }\r\n\r\n  // TODO: @2pp - you recently changed this to customSettings which is wrong, unclear why you did it\r\n  // contentItem = this.#contentItemsSvc.getAllSig(eavConstants.contentTypes.customSettings, /* initial: */ null);\r\n  contentItem = this.#contentItemsSvc.getAllSig(eavConstants.contentTypes.appConfiguration, /* initial: */ null);\r\n\r\n  #refresh = signal(0);\r\n\r\n  appSettingsInternal = computed(() => {\r\n    const _ = this.#refresh();\r\n    return this.#appInternalsSvc.getAppInternals(undefined);\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.#refresh.update(value => value + 1);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  urlToEdit() {\r\n    let url = signal('');\r\n    this.#contentItemsSvc.getAll(\r\n      eavConstants.contentTypes.appConfiguration\r\n    ).subscribe(contentItems => {\r\n\r\n      if (contentItems.length !== 1)\r\n        return ''\r\n\r\n      this.appConfigAvailable.set(true);\r\n      url.set(this.#urlTo(\r\n        `edit/${convertFormToUrl({\r\n          items: [EditPrep.editId(contentItems[0].Id)],\r\n        })}`\r\n      ));\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  urlToOpenMetadata() {\r\n    return this.#urlTo(\r\n      GoToMetadata.getUrlApp(\r\n        this.context.appId,\r\n        `Metadata for App: ${this.dialogSettings().Context.App.Name} (${this.context.appId})`,\r\n      )\r\n    );\r\n  }\r\n\r\n  formatValue(value?: string): string {\r\n    return value === \"\" ? \"-\" : value ?? \"-\";\r\n  }\r\n}\r\n","<!-- one of the three triggers must be true -->\r\n@if (isGlobal() || isSite() || isApp()) {\r\n  @if (isGlobal() || isSite()) {\r\n    <div class=\"alert alert-info scope-info\">\r\n      @if (isGlobal()) {\r\n        This is the Global App. Anything configured here will affect all Sites and Apps in this installation.\r\n      }\r\n      @if (isSite()) {\r\n        This is the Primary App of this Site. You can also configure site wide settings and resources here.\r\n      }\r\n      See <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n    </div>\r\n  }\r\n  <div class=\"eav-cards-box\">\r\n    <!-- Settings -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Settings</mat-card-title>\r\n        <mat-icon>settings</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <!-- DEBUG ⚠️ types: {{ customTypesExist() | json }} -->\r\n        <p>\r\n          Settings are things like SQL-connection strings, default \"items-to-show\" numbers and similar. If necessary, settings like a link\r\n          to an RSS-Feed could be different in each language.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Settings</th>\r\n              <th>Custom Settings</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <!-- TODO: @2pp - this is how I deduplicated code for settings -->\r\n              <!-- first row label changes with level we are at -->\r\n              <th>{{ buttons().topRowLabel }}</th>\r\n              <td>\r\n                <a [href]=\"buttons().systemSettings.url\" mat-icon-button [tippy]=\"buttons().systemSettings.tooltip\">\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().systemSettings.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >edit</mat-icon\r\n                  >\r\n                </a>\r\n              </td>\r\n              <td>\r\n                <a\r\n                  [href]=\"buttons().customSettings.url\"\r\n                  (click)=\"fixContentTypeIfNecessary(buttons().customSettings.url, buttons().customSettingsType, $event)\"\r\n                  mat-icon-button\r\n                  [tippy]=\"buttons().customSettings.tooltip\"\r\n                >\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().customSettings.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >edit</mat-icon\r\n                  >\r\n                </a>\r\n                <a\r\n                  [href]=\"buttons().customSettingsFields.url\"\r\n                  (click)=\"fixContentTypeIfNecessary(buttons().customSettings.url, buttons().customSettingsType, $event)\"\r\n                  mat-icon-button\r\n                  [tippy]=\"buttons().customSettingsFields.tooltip\"\r\n                >\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().customSettingsFields.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >dns</mat-icon\r\n                  >\r\n                </a>\r\n              </td>\r\n            </tr>\r\n            <!-- More Buttons -->\r\n            @if (isSite()) {\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            @else if (isApp()) {\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- TODO: @2pp - this is how I deduplicated code for settings -->\r\n            <!-- Settings for Primary App -->\r\n            <!-- @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <a [href]=\"buttons().systemSettings.url\" mat-icon-button [tippy]=\"buttons().systemSettings.tooltip\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().systemSettings.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a\r\n                    [href]=\"buttons().customSettings.url\"\r\n                    mat-icon-button\r\n                    [tippy]=\"buttons().customSettings.tooltip\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().customSettings.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.customSettings)\"\r\n                    mat-icon-button\r\n                    [tippy]=\"buttons().customSettingsFields.tooltip\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().customSettingsFields.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } -->\r\n            <!-- Settings for App and Content -->\r\n            <!-- @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <a [href]=\"buttons().systemSettings.url\" mat-icon-button [tippy]=\"buttons().systemSettings.tooltip\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().systemSettings.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"buttons().customSettings.url\" mat-icon-button [tippy]=\"buttons().customSettings.tooltip\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().customSettings.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.settings)\"\r\n                    mat-icon-button\r\n                    [tippy]=\"buttons().customSettingsFields.tooltip\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().customSettingsFields.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } -->\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToAnalyze(AnalyzeParts.Settings)\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          tippy=\"See the result of combining all settings\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Settings</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Resources -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Language Resources (i18n)</mat-card-title>\r\n        <mat-icon>translate</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Resources are used for labels and things like that in the App. They are usually needed to create multi-lingual views and such, and\r\n          should not be used for App-Settings.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Resources</th>\r\n              <th>Custom Resources</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- TODO: @2pp - deduplicate resources like I deduplicated the settings \r\n              but be very careful to test & verify every scenario\r\n            -->\r\n            <!-- Resources for Global App -->\r\n            <tr>\r\n              <th>{{ buttons().topRowLabel }}</th>\r\n              <td>\r\n                <a [href]=\"buttons().systemResources.url\" mat-icon-button [tippy]=\"buttons().systemResources.tooltip\">\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().systemResources.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >edit</mat-icon\r\n                  >\r\n                </a>\r\n              </td>\r\n              <td>\r\n                <a\r\n                  [href]=\"buttons().customResources.url\"\r\n                  (click)=\"fixContentTypeIfNecessary(buttons().customResources.url, buttons().customResourcesType, $event)\"\r\n                  mat-icon-button\r\n                  [tippy]=\"buttons().customResources.tooltip\"\r\n                >\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().customResources.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >edit</mat-icon\r\n                  >\r\n                </a>\r\n                <a\r\n                  [href]=\"buttons().customResourcesFields.url\"\r\n                  (click)=\"fixContentTypeIfNecessary(buttons().customResources.url, buttons().customResourcesType, $event)\"\r\n                  mat-icon-button\r\n                  [tippy]=\"buttons().customResourcesFields.tooltip\"\r\n                >\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().customResourcesFields.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >dns</mat-icon\r\n                  >\r\n                </a>\r\n              </td>\r\n            </tr>\r\n            @if (isSite()) {\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            @else if (isApp()) {\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Resources for Primary App -->\r\n            <!-- @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <a [href]=\"appSiteSystemResourcesUrl()\" mat-icon-button tippy=\"Edit site system resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a\r\n                    [href]=\"appSiteCustomResourcesUrl()\"\r\n                    mat-icon-button\r\n                    tippy=\"Edit custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.customResources)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } -->\r\n            <!-- Resources for App and Content -->\r\n            <!-- @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <a [href]=\"appContentSystemResourcesUrl()\" mat-icon-button tippy=\"Edit app system resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"appContentCustomResourcesUrl()\" mat-icon-button tippy=\"Edit custom app resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.resources)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom app resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } -->\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToAnalyze(AnalyzeParts.Resources)\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          tippy=\"See the result of combining all resources\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Resources</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Templates which are re-used in the table above -->\r\n    <ng-template #goToGlobal>\r\n      <tr>\r\n        <th>Global</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openGlobalSettings()\" tippy=\"Go to global\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template #goToSite>\r\n      <tr>\r\n        <th>Site</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openSiteSettings()\" tippy=\"Go to site\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </div>\r\n  <div class=\"eav-cards-box\">\r\n    <app-app-configuration-card [dialogSettings]=\"dialogSettings()\"> </app-app-configuration-card>\r\n    <!-- LightSpeed -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Performance</mat-card-title>\r\n        <mat-icon>bolt</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>LightSpeed Output Cache to speed up page by 50-90%</p>\r\n        <app-feature-text-info [featureNameId]=\"'LightSpeedOutputCache'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/lightspeed'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          class=\"default-link\"\r\n          [href]=\"buttons().lightspeed.url\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          disabled=\"{{ !lightSpeedEnabled() }}\"\r\n        >\r\n          <mat-icon\r\n            matBadgeColor=\"accent\"\r\n            matBadgeSize=\"small\"\r\n            [matBadge]=\"buttons().lightspeed.count\"\r\n            matBadgePosition=\"below after\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n            >bolt</mat-icon\r\n          >\r\n          <span>Edit LightSpeed</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Security / CSP -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Security</mat-card-title>\r\n        <mat-icon>local_police</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>ContentSecurityPolicy (CSP) features in this App - for maximum control.</p>\r\n        <app-feature-text-info [featureNameId]=\"'ContentSecurityPolicy'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/csp'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Permissions -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Permissions</mat-card-title>\r\n        <mat-icon>person</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>Give access to the entire app (all data). Use with care.</p>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/permissions.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToOpenPermissions()\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          [disabled]=\"!dialogSettings().Context.Enable.AppPermissions\"\r\n        >\r\n          <mat-icon\r\n            matBadgeColor=\"accent\"\r\n            matBadgeSize=\"small\"\r\n            matBadgePosition=\"below after\"\r\n            [matBadge]=\"dialogSettings().Context.App.Permissions.Count || null\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n            >person</mat-icon\r\n          >\r\n          <span>\r\n            Edit Permissions\r\n            @if (!dialogSettings().Context.Enable.AppPermissions) {\r\n              @if (isGlobal()) {\r\n                (not on Global App)\r\n              }\r\n              @if (isApp()) {\r\n                (not on Content)\r\n              }\r\n            }\r\n          </span>\r\n        </a>\r\n        <app-docs-link-helper\r\n          [link]=\"'https://patrons.2sxc.org/features/feat/PermissionsByLanguage'\"\r\n          [label]=\"\"\r\n          [icon]=\"\"\r\n        ></app-docs-link-helper>\r\n        <a [href]=\"urlToOpenLanguagePermissions(langPermsEnabled())\" mat-button class=\"eav-button__with-icon\">\r\n          <mat-icon\r\n            [matBadgeHidden]=\"langPermsEnabled()\"\r\n            matBadgeSize=\"small\"\r\n            matBadge=\"💎\"\r\n            matBadgePosition=\"below after\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n          >\r\n            person\r\n          </mat-icon>\r\n          <span>Language Permissions</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n}\r\n<router-outlet></router-outlet>\r\n","import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component, OnInit, Signal, computed, inject, signal } from '@angular/core';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../content-items/services/content-items.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { SystemSettingsScopes, eavConstants } from '../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { AppScopes } from '../../shared/models/dialog-context.models';\r\nimport { EditPrep } from '../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { AppAdminHelpers } from '../app-admin-helpers';\r\nimport { AppInternals } from '../models/app-internals.model';\r\nimport { ContentTypeEdit } from '../models/content-type.model';\r\nimport { AppInternalsService } from '../services/app-internals.service';\r\nimport { ContentTypesService } from '../services/content-types.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { AnalyzeParts } from '../sub-dialogs/analyze-settings/analyze-settings.models';\r\nimport { AppConfigurationCardComponent } from './app-configuration-card/app-configuration-card.component';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration',\r\n  templateUrl: './app-configuration.component.html',\r\n  styleUrls: ['./app-configuration.component.scss'],\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    NgTemplateOutlet,\r\n    AppConfigurationCardComponent,\r\n    FeatureTextInfoComponent,\r\n    RouterOutlet,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ]\r\n})\r\nexport class AppConfigurationComponent implements OnInit {\r\n\r\n  #featuresSvc = inject(FeaturesService);\r\n\r\n  #dialogSvc = transient(DialogService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #appInternalsService = transient(AppInternalsService);\r\n  #contentItemsService = transient(ContentItemsService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private context: Context,\r\n  ) { }\r\n\r\n  eavConstants = eavConstants;\r\n  AnalyzeParts = AnalyzeParts;\r\n  SystemSettingsScopes = SystemSettingsScopes;\r\n  AppScopes = AppScopes;\r\n\r\n  // Settings for the current dialog\r\n  dialogSettings = toSignal(this.#dialogConfigSvc.getCurrent$());\r\n  #currentScope = computed(() => this.dialogSettings()?.Context.App.SettingsScope);\r\n\r\n  // Booleans containing the current scope state\r\n  isGlobal = computed(() => { const cs = this.#currentScope(); return cs == null ? null : cs === AppScopes.Global; });\r\n  isSite = computed(() => { const cs = this.#currentScope(); return cs == null ? null : cs === AppScopes.Site; });\r\n  isApp = computed(() => { const cs = this.#currentScope(); return cs == null ? null : cs === AppScopes.App });\r\n\r\n  /*=== URL SIGNALS FOR EDIT ROUTES ===*/\r\n\r\n  //============== System Settings ==============\r\n\r\n  // Assign System Settings Url\r\n  #appSystemSettingsUrlSource: Signal<string>;\r\n  appSystemSettingsUrl = computed(() => {\r\n    const isGlobal = this.isGlobal();\r\n    const isSite = this.isSite();\r\n    if (isGlobal == null || isSite == null) return null;\r\n    // Ensure that the source is only created once when global/site are ready.\r\n    this.#appSystemSettingsUrlSource ??= this.urlToEditSystem(\r\n      eavConstants.contentTypes.systemSettings,\r\n      isGlobal ? SystemSettingsScopes.App : isSite ? SystemSettingsScopes.Site : SystemSettingsScopes.App\r\n    );\r\n    // return value unwrapped\r\n    return this.#appSystemSettingsUrlSource();\r\n  })\r\n\r\n  //============== System Resources ==============\r\n\r\n  // Assign System Resources Url\r\n  #appSystemResourcesUrlSource: Signal<string>;\r\n  appSystemResourcesUrl = computed(() => {\r\n    const isGlobal = this.isGlobal();\r\n    const isSite = this.isSite();\r\n    if (isGlobal == null || isSite == null) return null;\r\n    // Ensure that the source is only created once when global/site are ready.\r\n    this.#appSystemResourcesUrlSource ??= this.urlToEditSystem(\r\n      eavConstants.contentTypes.systemResources,\r\n      isGlobal ? SystemSettingsScopes.App : isSite ? SystemSettingsScopes.Site : SystemSettingsScopes.App\r\n    );\r\n    // return value unwrapped\r\n    return this.#appSystemResourcesUrlSource();\r\n  })\r\n\r\n  //============== Custm Settings ==============\r\n\r\n  // Assign Custom Settings Url\r\n  #appCustomSettingsUrlSource: Signal<string>;\r\n  appCustomSettingsUrl = computed(() => {\r\n    const isGlobal = this.isGlobal();\r\n    const isSite = this.isSite();\r\n    if (isGlobal == null || isSite == null) return null;\r\n    // Ensure that the source is only created once when global/site are ready.\r\n    this.#appCustomSettingsUrlSource ??= this.urlToEditSystem(\r\n      isGlobal ? eavConstants.contentTypes.customSettings : isSite ? eavConstants.contentTypes.customSettings : eavConstants.contentTypes.settings,\r\n      isGlobal ? SystemSettingsScopes.App : isSite ? SystemSettingsScopes.Site : SystemSettingsScopes.App\r\n    );\r\n    // return value unwrapped\r\n    return this.#appCustomSettingsUrlSource();\r\n  })\r\n\r\n  //============== Custom Resources ==============\r\n\r\n  // Assign Custom Resources Url\r\n  #appCustomResourcesUrlSource: Signal<string>;\r\n  appCustomResourcesUrl = computed(() => {\r\n    const isGlobal = this.isGlobal();\r\n    const isSite = this.isSite();\r\n    if (isGlobal == null || isSite == null) return null;\r\n    // Ensure that the source is only created once when global/site are ready.\r\n    this.#appCustomResourcesUrlSource ??= this.urlToEditSystem(\r\n      isGlobal ? eavConstants.contentTypes.customResources : isSite ? eavConstants.contentTypes.customResources : eavConstants.contentTypes.resources,\r\n      isGlobal ? SystemSettingsScopes.App : isSite ? SystemSettingsScopes.Site : SystemSettingsScopes.App\r\n    );\r\n    // return value unwrapped\r\n    return this.#appCustomResourcesUrlSource();\r\n  })\r\n\r\n  //============== END ==============\r\n\r\n  // More proper ViewModel\r\n  appSettingsInternal$ = new Subject<AppInternals>();\r\n\r\n  public appStateAdvanced = false;\r\n\r\n  protected lightSpeedEnabled = this.#featuresSvc.isEnabled[FeatureNames.LightSpeed];\r\n  protected cspEnabled = this.#featuresSvc.isEnabled[FeatureNames.ContentSecurityPolicy];\r\n  protected langPermsEnabled = this.#featuresSvc.isEnabled[FeatureNames.PermissionsByLanguage];\r\n\r\n  #refresh = signal(0);\r\n\r\n  #appSpecsLazy = computed(() => {\r\n    const _ = this.#refresh();\r\n    return this.#appInternalsService.getAppInternals(/* initial: */ null)\r\n  });\r\n\r\n  /** Statistics for the content-types and fields for later */\r\n  #dataStatistics = computed(() => {\r\n    const appSpecs = this.#appSpecsLazy()();\r\n\r\n    if (!appSpecs)\r\n      return null;\r\n\r\n    const props = appSpecs?.EntityLists;\r\n    const lsTypeName = eavConstants.appMetadata.LightSpeed.ContentTypeName;\r\n\r\n    const isSite = this.isSite();\r\n    const result: TempDataStatistics = {\r\n      appLightSpeedCount: appSpecs.MetadataList.Items.filter(i => i._Type.Name === lsTypeName).length,\r\n      systemSettingsCount: isSite\r\n        ? props.SettingsSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.SettingsSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customSettingsCount: props.AppSettings?.length,\r\n      customSettingsFieldsCount: appSpecs.FieldAll.AppSettings?.length,\r\n      systemResourcesCount: isSite\r\n        ? props.ResourcesSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.ResourcesSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customResourcesCount: props.AppResources?.length,\r\n      customResourcesFieldsCount: appSpecs?.FieldAll.AppResources?.length,\r\n    };\r\n\r\n    return result;\r\n  });\r\n\r\n  /** Test if current types for settings/resources exist, otherwise they must be created before opening dialogs */\r\n  #customTypesExist = computed(() => {\r\n    const appSpecs = this.#appSpecsLazy()();\r\n    return (!appSpecs)\r\n      ? { settings: false, resources: false }\r\n      : {\r\n          settings: appSpecs.FieldAll.AppSettings != null,\r\n          resources: appSpecs.FieldAll.AppResources != null,\r\n        }\r\n  });\r\n\r\n  ngOnInit() {\r\n    // Update dialog router when child a dialog was closesd\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#refresh.update(v => v++));\r\n  }\r\n\r\n  buttons = computed<Buttons>(() => {\r\n    // if not ready, return a full object with empty values\r\n    const ready = this.dialogSettings() != null;\r\n    if (!ready) {\r\n      const nothing: ButtonSpecs = { tooltip: '', url: '', count: null };\r\n      return {\r\n        topRowLabel: 'loading...',\r\n        customSettingsType: '',\r\n        customResourcesType: '',\r\n        systemSettings: nothing,\r\n        customSettings: nothing,\r\n        customSettingsFields: nothing,\r\n        systemResources: nothing,\r\n        customResources: nothing,\r\n        customResourcesFields: nothing,\r\n        lightspeed: nothing,\r\n      }\r\n    }\r\n\r\n    // From the current settings computed booleans containing the scope state\r\n    const isGlobal = !!this.isGlobal();\r\n    const isSite = !!this.isSite();\r\n    const isApp = !!this.isApp();\r\n\r\n    // The name of the top row, to use in the row label and tooltips\r\n    const scopeName = this.dialogSettings().Context.App.SettingsScope;\r\n\r\n    // The statistics of the entities - should later be simplified once code is improved @2pp\r\n    const viewModel = this.#dataStatistics();\r\n\r\n    const typeNames = eavConstants.contentTypes;\r\n    const customSettingsType = isApp\r\n      ? typeNames.settings\r\n      : typeNames.customSettings;\r\n    const customResourcesType = isApp\r\n      ? typeNames.resources\r\n      : typeNames.customResources;\r\n\r\n    // Detect if the custom types exist\r\n    const typesExist = this.#customTypesExist();\r\n\r\n    return {\r\n      topRowLabel: scopeName,\r\n      customSettingsType: customSettingsType,\r\n      customResourcesType: customResourcesType,\r\n      systemSettings: {\r\n        tooltip: `Edit ${scopeName} system settings`,\r\n        url: this.appSystemSettingsUrl(),\r\n        count: viewModel?.systemSettingsCount || null,\r\n      },\r\n      customSettings: {\r\n        tooltip: `Edit ${scopeName} custom settings`,\r\n        url: typesExist.settings\r\n          ? this.appCustomSettingsUrl()\r\n          : null,\r\n        count: viewModel?.customSettingsCount || null,\r\n      },\r\n      customSettingsFields: {\r\n        tooltip: `Configure fields of the custom ${scopeName} settings`,\r\n        url: typesExist.settings\r\n          ? this.urlToConfig(customSettingsType)\r\n          : null,\r\n        count: viewModel?.customSettingsFieldsCount || null,\r\n      },\r\n      systemResources: {\r\n        tooltip: `Edit ${scopeName} system resources`,\r\n        url: this.appSystemResourcesUrl(),\r\n        count: viewModel?.systemResourcesCount || null,\r\n      },\r\n      customResources: {\r\n        tooltip: `Edit ${scopeName} custom resources`,\r\n        url: typesExist.resources\r\n          ? this.appCustomResourcesUrl()\r\n          : null,\r\n        count: viewModel?.customResourcesCount || null,\r\n      },\r\n      customResourcesFields: {\r\n        tooltip: `Edit ${scopeName} custom resources fields`,\r\n        url: this.urlToConfig(customResourcesType),\r\n        count: viewModel?.customResourcesFieldsCount || null,\r\n      },\r\n      lightspeed: {\r\n        tooltip: `Edit ${scopeName} LightSpeed`,\r\n        url: this.urlToGetLightSpeedLink(),\r\n        count: viewModel?.appLightSpeedCount || null,\r\n      },\r\n    } satisfies Buttons;\r\n  });\r\n\r\n  #urlTo(url: string, queryParams?: { [key: string]: string }, errComponent?: string) {\r\n    let newUrl = '#' + this.#dialogRouter.urlSubRoute(url);\r\n\r\n    if (queryParams)\r\n      newUrl += `?${new URLSearchParams(queryParams).toString()}`;\r\n    if (errComponent)\r\n      newUrl += `&errComponent=${errComponent}`;\r\n\r\n    return newUrl;\r\n  }\r\n\r\n  // case eavConstants.contentTypes.systemSettings:\r\n  // case eavConstants.contentTypes.systemResources:\r\n  urlToEditSystem(staticName: string, systemSettingsScope?: Of<typeof SystemSettingsScopes>) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      const systemSettingsEntities = contentItems.filter(i =>\r\n        systemSettingsScope === SystemSettingsScopes.App\r\n          ? !i.SettingsEntityScope\r\n          : i.SettingsEntityScope === SystemSettingsScopes.Site\r\n      );\r\n      if (systemSettingsEntities.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        const systemSettingsEntity = systemSettingsEntities[0];\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [\r\n              systemSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName, {\r\n                  ...(systemSettingsScope === SystemSettingsScopes.Site && {\r\n                    SettingsEntityScope: SystemSettingsScopes.Site,\r\n                  }),\r\n                })\r\n                : EditPrep.editId(systemSettingsEntity.Id),\r\n            ],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  // case eavConstants.contentTypes.customSettings:\r\n  // case eavConstants.contentTypes.customResources:\r\n  urlToEditCustom(staticName: string) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      if (contentItems.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        const customSettingsEntity = contentItems[0];\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [\r\n              customSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName)\r\n                : EditPrep.editId(customSettingsEntity.Id),\r\n            ],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  // case default:\r\n  urlToEditDefault(staticName: string) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      if (contentItems.length < 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorNoAppSettings' }, staticName));\r\n      } else if (contentItems.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [EditPrep.editId(contentItems[0].Id)],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  urlToGetLightSpeedLink(): string {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl(\r\n        AppAdminHelpers.getLightSpeedEditParams(this.context.appId)\r\n      )}`\r\n    );\r\n  }\r\n\r\n  openSiteSettings() {\r\n    const siteApp = this.dialogSettings().Context.Site.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(siteApp.ZoneId, siteApp.AppId, 'app');\r\n  }\r\n\r\n  openGlobalSettings() {\r\n    const globalApp = this.dialogSettings().Context.System.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(globalApp.ZoneId, globalApp.AppId, 'app');\r\n  }\r\n\r\n  urlToConfig(staticName: string) {\r\n    return this.#urlTo(`fields/${staticName}`);\r\n  }\r\n\r\n  urlToOpenPermissions() {\r\n    return this.#urlTo(GoToPermissions.getUrlApp(this.context.appId));\r\n  }\r\n\r\n  urlToOpenLanguagePermissions(enabled: boolean) {\r\n    if (enabled)\r\n      return this.#urlTo('language-permissions')\r\n    else\r\n      return this.#urlTo('edit-language-permissions')\r\n  }\r\n\r\n  urlToAnalyze(part: Of<typeof AnalyzeParts>) {\r\n    return this.#urlTo(`analyze/${part}`);\r\n  }\r\n\r\n  fixContentTypeIfNecessary(url: string, typeName: string, event: MouseEvent) {\r\n    // If we have a url, everything is fine so we can just return and let the click happen\r\n    if (url) return;\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    // Check server if the content-type exists\r\n    this.#contentTypesSvc.retrieveContentTypes(eavConstants.scopes.configuration.value).subscribe(contentTypes => {\r\n      const contentTypeExists = contentTypes.some(ct => ct.Name === typeName);\r\n      if (contentTypeExists) {\r\n        // Open Edit dialog\r\n        const url = (this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [EditPrep.newFromType(typeName)],\r\n          })}`\r\n        ));\r\n        if(url) {\r\n          window.open(url, \"_self\");\r\n          return\r\n        }\r\n        else\r\n          return\r\n      } else {\r\n        const newContentType = {\r\n          StaticName: '',\r\n          // NameId: '',\r\n          Name: typeName,\r\n          Description: '',\r\n          Scope: eavConstants.scopes.configuration.value,\r\n          // ChangeStaticName: false,\r\n          ChangeNameId: false,\r\n          // NewStaticName: '',\r\n          NewNameId: '',\r\n        } as ContentTypeEdit;\r\n\r\n        this.#contentTypesSvc.save(newContentType).subscribe(success => {\r\n          if (!success) return;\r\n          // trigger refresh\r\n          this.#refresh.update(v => v + 1);\r\n\r\n          // Inform user\r\n          alert('Created a new Content Type. Please try again 👍🏼.');\r\n        });\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // 2025-01-21 2dm had to restore this functionality, keep this code till 2025-Q2 just in case\r\n  // fixContentType(staticName: string, action: 'edit' | 'config') {\r\n  //   this.#contentTypesSvc.retrieveContentTypes(eavConstants.scopes.configuration.value).subscribe(contentTypes => {\r\n  //     const contentTypeExists = contentTypes.some(ct => ct.Name === staticName);\r\n  //     if (contentTypeExists) {\r\n  //       if (action === 'edit') {\r\n  //         this.edit(staticName);\r\n  //       } else if (action === 'config') {\r\n  //         this.config(staticName);\r\n  //       }\r\n  //     } else {\r\n  //       const newContentType = {\r\n  //         StaticName: '',\r\n  //         // NameId: '',\r\n  //         Name: staticName,\r\n  //         Description: '',\r\n  //         Scope: eavConstants.scopes.configuration.value,\r\n  //         // ChangeStaticName: false,\r\n  //         ChangeNameId: false,\r\n  //         // NewStaticName: '',\r\n  //         NewNameId: '',\r\n  //       } as ContentTypeEdit;\r\n  //       this.#contentTypesSvc.save(newContentType).subscribe(success => {\r\n  //         if (!success) return;\r\n\r\n  //         if (action === 'edit') {\r\n  //           this.edit(staticName);\r\n  //         } else if (action === 'config') {\r\n  //           this.config(staticName);\r\n  //         }\r\n  //       });\r\n  //     }\r\n  //   });\r\n  // }\r\n}\r\n\r\nclass TempDataStatistics {\r\n  // Lightspeed\r\n  appLightSpeedCount: number;\r\n\r\n  systemSettingsCount: number;\r\n  customSettingsCount: number;\r\n  customSettingsFieldsCount: number;\r\n  systemResourcesCount: number;\r\n  customResourcesCount: number;\r\n  customResourcesFieldsCount: number;\r\n}\r\n\r\ninterface ButtonSpecs {\r\n  /** Tooltip on the button */\r\n  tooltip: string,\r\n  /** url to open a dialog, or null if the content-type doesn't exist and requires pre-work */\r\n  url: string,\r\n  /** count of fields or entities */\r\n  count: number,\r\n}\r\n\r\ninterface Buttons {\r\n  topRowLabel: string,\r\n  customSettingsType: string,\r\n  customResourcesType: string,\r\n  systemSettings: ButtonSpecs,\r\n  customSettings: ButtonSpecs,\r\n  customSettingsFields: ButtonSpecs,\r\n  systemResources: ButtonSpecs,\r\n  customResources: ButtonSpecs,\r\n  customResourcesFields: ButtonSpecs,\r\n  lightspeed: ButtonSpecs,\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_MatBadgeStyleLoader);\n        inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[6]}