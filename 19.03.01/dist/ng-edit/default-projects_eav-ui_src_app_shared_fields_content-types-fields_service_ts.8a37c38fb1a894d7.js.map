{"version":3,"file":"default-projects_eav-ui_src_app_shared_fields_content-types-fields_service_ts.8a37c38fb1a894d7.js","mappings":"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","names":["webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","nameId","this","getHttpApiUrl","params","appId","contentTypeId","retrieveContentTypeSig","initial","getSignal","retrieveContentTypes","scope","retrieveContentTypesSig","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2","save","contentType","http","post","apiUrl","appid","delete","staticName","NameId","import","files","formData","FormData","file","append","zoneId","createGhost","sourceNameId","__ngFactoryType__","factory","ɵfac","ExportAppPartsService","getContentInfo","exportParts","contentTypeIds","entityIds","templateIds","url","webApiAppPartsRoot","join","window","open","ExportAppService","getAppInfo","exportAppUrl","webApiAppRoot","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","getAllSig","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","ViewsService","export","getPolymorphism","getUsage","guid","calculateTypeIcon","typeName","DataTypeCatalog","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","calculateTypeLabel","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","dataTypeLabels","label","description","webApiFieldsAll","webApiReservedNames","webApiSetTitle","webApiFieldsGetShared","ContentTypesFieldsService","paramsAppId","more","dataTypes","raw","calculateDataTypes","rawDataTypes","rawDataType","push","icon","getInputTypes","inputConfigs","config","dataType","Type","substring","indexOf","inputType","Label","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","sort","a","b","localeCompare","getReservedNames","reservedNames","getFields","contentTypeStaticName","fields","fld","Metadata","md","merged","All","InputType","getFieldsSig","getShareableFields","getShareableFieldsFor","attributeId","#getShareinfo","getAncestors","getDescendants","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","JSON","stringify","setTitle","item","rename","fieldId","newName","IsTitle","Error","add","newField","ContentTypeId","StaticName","Index","SortOrder","updateInputType","field","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","logSpecs","all","getEntities","getAvailableEntities","webApiEntityRoot","EntityService","constructor","log","classLog","queryService","transient","QueryService","getEntities$","fnIf","filter","p","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","data","Default","entityId","force","parentId","parentField","parent","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","Guids","i0","i1","i2"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypesSig(scope: string, initial: undefined): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string, initial: ContentInfo) {\r\n    return this.getSignal<ContentInfo>(webApiAppPartsGet, {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n const webApiAppRootStatistics = 'admin/app/Statistics';\r\n const webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo(initial: AppInfo) {\r\n    return this.getSignal<AppInfo>(webApiAppRootStatistics, {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }, initial);\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    // return this.get<boolean>(webApiAppRoot + 'SaveData', {\r\n    return this.getHttpApiUrl<boolean>(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  getAllSig(contentType: string, initial?: Query[]) {\r\n    return this.getSignal<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }, initial);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.getHttpApiUrl<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.getSignal<View[]>(webApiViews, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.getHttpApiUrl<boolean>(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.getSignal<Polymorphism>(webApiViewPolymorph, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.getSignal<ViewUsage[]>(webApiViewUsage, {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n\r\n}\r\n","import { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  const typeIconMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'toggle_on',\r\n    [DataTypeCatalog.Custom]: 'extension',\r\n    [DataTypeCatalog.DateTime]: 'today',\r\n    [DataTypeCatalog.Empty]: 'crop_free',\r\n    [DataTypeCatalog.Entity]: 'share',\r\n    [DataTypeCatalog.Hyperlink]: 'link',\r\n    [DataTypeCatalog.Number]: 'dialpad',\r\n    [DataTypeCatalog.String]: 'text_fields',\r\n  };\r\n  return typeIconMap[typeName] ?? 'device_unknown';\r\n}\r\n\r\nexport function calculateTypeLabel(typeName: string): string {\r\n  const typeLabelMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'Boolean (yes/no)',\r\n    [DataTypeCatalog.Custom]: 'Custom - ui-tools or custom types',\r\n    [DataTypeCatalog.DateTime]: 'Date and/or time',\r\n    [DataTypeCatalog.Empty]: 'Empty - for form-titles etc.',\r\n    [DataTypeCatalog.Entity]: 'Entity (other content-items)',\r\n    [DataTypeCatalog.Hyperlink]: 'Link / file reference',\r\n    [DataTypeCatalog.Number]: 'Number',\r\n    [DataTypeCatalog.String]: 'Text / string',\r\n  };\r\n  return typeLabelMap[typeName] ?? 'device_unknown';\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: calculateTypeLabel(DataTypeCatalog.Boolean), description: 'Yes/no or true/false values' },\r\n  Custom: { label: calculateTypeLabel(DataTypeCatalog.Custom), description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: calculateTypeLabel(DataTypeCatalog.DateTime), description: 'For date, time or combined values' },\r\n  Empty: { label: calculateTypeLabel(DataTypeCatalog.Empty), description: 'Use to structure your form' },\r\n  Entity: { label: calculateTypeLabel(DataTypeCatalog.Entity), description: 'One or more other content-items' },\r\n  Hyperlink: { label: calculateTypeLabel(DataTypeCatalog.Hyperlink), description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: calculateTypeLabel(DataTypeCatalog.Number), description: 'Any kind of number' },\r\n  String: { label: calculateTypeLabel(DataTypeCatalog.String), description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { calculateDataTypes, DataType } from '../../content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  /** Get list of data types available in the system, such as 'string', 'number' etc. */\r\n  dataTypes() {\r\n    return this.getSignal<DataType[], string[]>(webApiDataTypes, this.paramsAppId(), [], raw => calculateDataTypes(raw));\r\n  }\r\n\r\n  getInputTypes() {\r\n    return this.getSignal<FieldInputTypeOption[], InputTypeMetadata[]>(\r\n      webApiInputTypes,\r\n      this.paramsAppId(),\r\n      [],\r\n      inputConfigs => inputConfigs\r\n        .map(config => ({\r\n          dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n          inputType: config.Type,\r\n          label: config.Label,\r\n          description: config.Description,\r\n          isDefault: config.IsDefault,\r\n          isObsolete: config.IsObsolete,\r\n          isRecommended: config.IsRecommended,\r\n          obsoleteMessage: config.ObsoleteMessage,\r\n          icon: config.IsDefault ? 'stars' : config.IsRecommended ? 'star' : null,\r\n          sort: (config.IsObsolete ? 'z' : config.IsDefault ? 'a' : config.IsRecommended ? 'b' : 'c') + config.Label,\r\n        } satisfies FieldInputTypeOption & { sort: string}))\r\n      .sort((a, b) => a.sort.localeCompare(b.sort)),\r\n    );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.getHttpApiUrl<Record<string, string>>(webApiReservedNames);\r\n  }\r\n\r\n  reservedNames() {\r\n    return this.getSignal<Record<string, string>>(webApiReservedNames, null, {});\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsAll, this.paramsAppId({ staticName: contentTypeStaticName }))\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getFieldsSig(contentTypeStaticName: string) {\r\n    return this.getSignal<Field[]>(webApiFieldsAll, this.paramsAppId({ staticName: contentTypeStaticName }), [], fields => {\r\n      if (fields) {\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) continue;\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n      }\r\n      return fields;\r\n    });\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsGetShared, this.paramsAppId());\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfo(webApiFieldsGetShared, attributeId);\r\n    // return this.getHttp<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfo(endpoint: string, attributeId: number) {\r\n    return this.getHttpApiUrl<Field[]>(endpoint, this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}