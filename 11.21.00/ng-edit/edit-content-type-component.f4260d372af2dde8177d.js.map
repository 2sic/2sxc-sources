{"version":3,"sources":["./src/app/app-administration/constants/content-type.patterns.ts","./src/app/app-administration/models/content-type.model.ts","./src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type.component.html","./src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type.component.ts"],"names":["contentTypeNamePattern","dialogRef","route","contentTypesService","snackBar","hostClass","contentTypeStaticName","this","snapshot","paramMap","get","contentTypeNameError","contentType$","BehaviorSubject","lockScope$","scopeOptions$","disableAnimation$","loading$","templateVars$","combineLatest","pipe","map","contentType","lockScope","scopeOptions","disableAnimation","loading","scope","ngOnInit","retrieveContentType","ChangeStaticName","NewStaticName","StaticName","of","Name","Description","Scope","scopes$","getScopes","subscribe","scopes","next","ngOnDestroy","complete","ngAfterViewInit","setTimeout","closeDialog","close","changeContentTypeName","newName","value","changeScope","newScope","prompt","find","option","newScopeOption","name","default","unlockScope","save","open","result","duration","document","activeElement","HTMLElement","blur","EditContentTypeComponent"],"mappings":"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","file":"edit-content-type-component.f4260d372af2dde8177d.js","sourcesContent":["/**\r\n * The pattern determines what content-type names are allowed.\r\n * Basically it's A-Z and numbers after the first digit.\r\n * But there are two exceptions:\r\n *  - types describing an input-type begin with an `@` and can also contain `-` chars\r\n *  - types beginning with an `|` are very old type names for data-sources, they can contain anything!\r\n */\r\nexport const contentTypeNamePattern = /(^[A-Za-z][A-Za-z0-9]+$)|(^@[A-Za-z][A-Za-z0-9-]*$)/;\r\nexport const contentTypeNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n\r\n// 2020-04-29 2dm - temporarily used this pattern while renaming unique named types containing '|' chars\r\n// export const contentTypeNamePattern = /(^[A-Za-z][A-Za-z0-9]+$)|(^@[A-Za-z][A-Za-z0-9-]*$)|(^\\|.*$)/;\r\n","import { PermissionsCount } from './permissions-count.model';\r\n\r\nexport class ContentType {\r\n  Description: string;\r\n  Fields: number;\r\n  Id: number;\r\n  Items: number;\r\n  Label: string;\r\n  Metadata: ContentTypeMetadata;\r\n  Name: string;\r\n  Permissions: PermissionsCount;\r\n  Scope: string;\r\n  SharedDefId: number;\r\n  StaticName: string;\r\n  UsesSharedDef: boolean;\r\n}\r\n\r\nexport class ContentTypeMetadata {\r\n  Description: string;\r\n  EditInstructions: string;\r\n  Icon: string;\r\n  Id: number;\r\n  Label: string;\r\n  Link: string;\r\n  ListInstructions: any;\r\n  Notes: string;\r\n  Title: string;\r\n}\r\n\r\nexport class ContentTypeEdit extends ContentType {\r\n  ChangeStaticName: boolean;\r\n  NewStaticName: string;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">{{ contentTypeStaticName ? 'Edit Content Type' : 'New Content Type' }}</div>\r\n</div>\r\n\r\n<ng-container *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <form class=\"dialog-form\" *ngIf=\"data.contentType\" #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Name</mat-label>\r\n          <input matInput type=\"text\" required [pattern]=\"contentTypeNamePattern\" [ngModel]=\"data.contentType.Name\"\r\n            (ngModelChange)=\"changeContentTypeName($event)\" name=\"Name\" #name=\"ngModel\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"name.touched && name.errors\">\r\n          <app-field-hint *ngIf=\"name.errors.required\" [isError]=\"true\">This field is required</app-field-hint>\r\n          <app-field-hint *ngIf=\"name.errors.pattern\" [isError]=\"true\">{{ contentTypeNameError }}</app-field-hint>\r\n        </ng-container>\r\n      </div>\r\n      <mat-accordion>\r\n        <mat-expansion-panel>\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>Advanced</mat-panel-title>\r\n            <mat-panel-description></mat-panel-description>\r\n          </mat-expansion-panel-header>\r\n\r\n          <div class=\"edit-input\">\r\n            <mat-form-field appearance=\"standard\" color=\"accent\">\r\n              <mat-label>Scope</mat-label>\r\n              <mat-select [ngModel]=\"data.contentType.Scope\" name=\"Scope\" (ngModelChange)=\"changeScope($event)\"\r\n                [disabled]=\"data.lockScope\">\r\n                <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n                <mat-option value=\"Other\">Other...</mat-option>\r\n              </mat-select>\r\n              <button mat-icon-button type=\"button\" matSuffix [matTooltip]=\"data.lockScope ? 'Unlock' : 'Lock'\">\r\n                <mat-icon appClickStopPropagation (click)=\"unlockScope()\">\r\n                  {{ data.lockScope ? 'lock' : 'lock_open' }}\r\n                </mat-icon>\r\n              </button>\r\n            </mat-form-field>\r\n            <app-field-hint>\r\n              The scope should almost never be changed -\r\n              <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n            </app-field-hint>\r\n          </div>\r\n\r\n          <div class=\"edit-input\">\r\n            <mat-form-field appearance=\"standard\" color=\"accent\">\r\n              <mat-label>Static Name</mat-label>\r\n              <input matInput type=\"text\" [ngModel]=\"data.contentType.StaticName\" name=\"StaticName\" disabled>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div *ngIf=\"data.contentType.SharedDefId\" class=\"edit-input\">\r\n            <h3>Shared Content Type (Ghost)</h3>\r\n            <p>Note: this can't be edited in the UI, for now if you really know what you're doing, do it in the DB</p>\r\n            <p>Uses Type Definition of: {{ data.contentType.SharedDefId }}</p>\r\n          </div>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || data.loading\">\r\n        Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { AfterViewInit, ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { eavConstants, EavScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { contentTypeNameError, contentTypeNamePattern } from '../../constants/content-type.patterns';\r\nimport { ContentTypeEdit } from '../../models/content-type.model';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type',\r\n  templateUrl: './edit-content-type.component.html',\r\n  styleUrls: ['./edit-content-type.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EditContentTypeComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  contentTypeNamePattern = contentTypeNamePattern;\r\n  contentTypeNameError = contentTypeNameError;\r\n\r\n  private contentType$ = new BehaviorSubject<ContentTypeEdit>(null);\r\n  private lockScope$ = new BehaviorSubject(true);\r\n  private scopeOptions$ = new BehaviorSubject<EavScopeOption[]>(null);\r\n  private disableAnimation$ = new BehaviorSubject(true);\r\n  private loading$ = new BehaviorSubject(false);\r\n  templateVars$ = combineLatest([this.contentType$, this.lockScope$, this.scopeOptions$, this.disableAnimation$, this.loading$]).pipe(\r\n    map(([contentType, lockScope, scopeOptions, disableAnimation, loading]) =>\r\n      ({ contentType, lockScope, scopeOptions, disableAnimation, loading })),\r\n  );\r\n  private scope = this.route.snapshot.paramMap.get('scope');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const contentType$ = this.contentTypeStaticName\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n        .pipe(\r\n          map(contentType => {\r\n            const contentTypeEdit: ContentTypeEdit = {\r\n              ...contentType,\r\n              ChangeStaticName: false,\r\n              NewStaticName: contentType.StaticName,\r\n            };\r\n            return contentTypeEdit;\r\n          }),\r\n        )\r\n      : of({\r\n        ...(new ContentTypeEdit()),\r\n        StaticName: '',\r\n        Name: '',\r\n        Description: '',\r\n        Scope: this.scope,\r\n        ChangeStaticName: false,\r\n        NewStaticName: '',\r\n      });\r\n    const scopes$ = this.contentTypesService.getScopes();\r\n    combineLatest([contentType$, scopes$]).subscribe(([contentType, scopes]) => {\r\n      this.contentType$.next(contentType);\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.lockScope$.complete();\r\n    this.scopeOptions$.complete();\r\n    this.disableAnimation$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  // workaround for angular component issue #13870\r\n  ngAfterViewInit() {\r\n    // timeout required to avoid the dreaded 'ExpressionChangedAfterItHasBeenCheckedError'\r\n    setTimeout(() => this.disableAnimation$.next(false));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeContentTypeName(newName: string) {\r\n    this.contentType$.next({ ...this.contentType$.value, Name: newName });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === 'Other') {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.');\r\n      if (!newScope) {\r\n        newScope = eavConstants.scopes.default.value;\r\n      } else if (!this.scopeOptions$.value.find(option => option.value === newScope)) {\r\n        const newScopeOption: EavScopeOption = {\r\n          name: newScope,\r\n          value: newScope,\r\n        };\r\n        this.scopeOptions$.next([...this.scopeOptions$.value, newScopeOption]);\r\n      }\r\n    }\r\n    this.contentType$.next({ ...this.contentType$.value, Scope: newScope });\r\n  }\r\n\r\n  unlockScope() {\r\n    this.lockScope$.next(!this.lockScope$.value);\r\n    if (this.lockScope$.value) {\r\n      this.contentType$.next({ ...this.contentType$.value, Scope: this.scope });\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.loading$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    this.contentTypesService.save(this.contentType$.value).subscribe(result => {\r\n      this.loading$.next(false);\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}