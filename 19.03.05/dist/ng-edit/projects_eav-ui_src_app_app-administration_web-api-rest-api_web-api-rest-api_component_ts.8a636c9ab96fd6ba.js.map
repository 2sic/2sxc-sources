{"version":3,"file":"projects_eav-ui_src_app_app-administration_web-api-rest-api_web-api-rest-api_component_ts.8a636c9ab96fd6ba.js","mappings":"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","names":["i0","endpoint_r1","path","name","WebApiRestApiComponent_Conditional_5_For_1_Template","ctx_r1","webApisTypes","sort","logSpecs","all","syncUrl","WebApiRestApiComponent","#sourceSvc","#dialogRouter","#formBuilder","constructor","this","log","classLog","transient","SourceService","DialogRoutingService","inject","FormBuilder","#getAllWebApis","getWebApisSig","computed","webApiTypeForm","group","webApiType","effect","l","fnIf","webApis","length","end","urlPath","urlSegments","at","encodedUrlPath","replace","webApi","find","w","a","get","setValue","openRestApi","apiRoute","navRelative","encodeURIComponent","selectors","decls","vars","consts","template","rf","ctx","$event","WebApiRestApiComponent_Conditional_5_Template","MatSelectModule","i1","i2","i3","MatButtonModule","MatCardModule","MatIconModule","ReactiveFormsModule","i4","RouterOutlet","SxcGridModule","encapsulation","appFilesAsset","apiExplorerAppApiFiles","HttpServiceBase","viewKey","global","urlItems","getHttpApiUrl","params","appId","templateIdOrPath","pipe","map","view","Type","toLocaleLowerCase","Extension","save","http","post","apiUrl","getAll","mask","Files","forEach","file","Shared","getWebApis","files","isShared","isCompiled","splitIndex","lastIndexOf","fileExtIndex","folder","substring","endpointPath","edition","apiFilesSignal","getSignal","getWebApiDetails","apiPath","zoneId","getPredefinedTemplates","purpose","type","getPreview","templateKey","create","test","i","EntityId","toString","IsShared","Path","templateId","__ngFactoryType__","factory","Éµfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/web-api-rest-api/web-api-rest-api.component.html","./projects/eav-ui/src/app/app-administration/web-api-rest-api/web-api-rest-api.component.ts","./projects/eav-ui/src/app/code-editor/services/source.service.ts"],"sourcesContent":["<form [formGroup]=\"webApiTypeForm\">\r\n  <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n    <mat-label>Endpoint</mat-label>\r\n    <mat-select formControlName=\"webApiType\" (valueChange)=\"openRestApi($event)\">\r\n      @if (webApisTypes()) {\r\n        @for (endpoint of webApisTypes().sort(); track endpoint) {\r\n          <mat-option [value]=\"endpoint.path\">\r\n            {{ endpoint.name }}\r\n          </mat-option>\r\n        }\r\n      }\r\n    </mat-select>\r\n  </mat-form-field>\r\n</form>\r\n\r\n<router-outlet></router-outlet>\r\n","import { Component, computed, effect, inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../../core';\r\nimport { SourceService } from '../../code-editor/services/source.service';\r\nimport { classLog } from '../../shared/logging';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  webApisTypes: true,\r\n  syncUrl: true,\r\n};\r\n\r\n@Component({\r\n    selector: 'app-web-api-rest-api',\r\n    imports: [\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        MatCardModule,\r\n        MatIconModule,\r\n        ReactiveFormsModule,\r\n        RouterOutlet,\r\n        SxcGridModule,\r\n    ],\r\n    templateUrl: './web-api-rest-api.component.html'\r\n})\r\nexport class WebApiRestApiComponent {\r\n  log = classLog({ WebApiRestApiComponent }, logSpecs);\r\n  #sourceSvc = transient(SourceService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  #formBuilder = inject(FormBuilder);\r\n\r\n  constructor() {\r\n    // Update form if the url changes and the item is found\r\n    effect(() => {\r\n      const l = this.log.fnIf('syncUrl');\r\n      const webApis = this.webApisTypes();\r\n      if (webApis.length === 0)\r\n        return l.end();\r\n      const urlPath = this.#dialogRouter.urlSegments.at(-1);\r\n\r\n      var encodedUrlPath = urlPath.replace(/%252F/g, \"/\");\r\n\r\n      const webApi = webApis.find(w => w.path === encodedUrlPath);\r\n      l.a('status:', { webApis, webApi, urlPath, encodedUrlPath });\r\n      if (webApi)\r\n        this.webApiTypeForm.get('webApiType').setValue(webApi.path);\r\n      l.end();\r\n    });\r\n  }\r\n\r\n  #getAllWebApis = this.#sourceSvc.getWebApisSig();\r\n\r\n  webApisTypes = computed(() => {\r\n    const webApis = this.#getAllWebApis();\r\n    return webApis;\r\n  });\r\n\r\n  webApiTypeForm: FormGroup = this.#formBuilder.group({\r\n    webApiType: ['']\r\n  });\r\n\r\n  openRestApi(apiRoute: string): void {\r\n    if (!apiRoute) return;\r\n    this.#dialogRouter.navRelative([encodeURIComponent(apiRoute)]);\r\n  }\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { WebApi, WebApiDetails } from '../../app-administration/models';\r\nimport { ViewOrFileIdentifier } from '../../shared/models/edit-form.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { FileAsset } from '../models/file-asset.model';\r\nimport { PredefinedTemplatesResponse } from '../models/predefined-template.model';\r\nimport { Preview } from '../models/preview.models';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\nconst appFilesAll = 'admin/AppFiles/AppFiles';\r\nconst appFilesAsset = 'admin/AppFiles/asset';\r\nconst appFilesCreate = 'admin/AppFiles/create';\r\nconst apiExplorerInspect = 'admin/ApiExplorer/inspect';\r\nconst apiExplorerAppApiFiles = 'admin/ApiExplorer/AppApiFiles';\r\nconst appFilesPredefinedTemplates = 'admin/AppFiles/GetTemplates';\r\nconst appFilesPreview = 'admin/AppFiles/preview';\r\n\r\n@Injectable()\r\nexport class SourceService extends HttpServiceBase {\r\n\r\n  /** ViewKey is templateId or path */\r\n  get(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[]): Observable<SourceView> {\r\n    return this.getHttpApiUrl<SourceView>(appFilesAsset, {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        ...this.templateIdOrPath(viewKey, global, urlItems),\r\n      },\r\n    }).pipe(\r\n      map(view => {\r\n        if (view.Type.toLocaleLowerCase() === 'auto') {\r\n          switch (view.Extension.toLocaleLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    );\r\n  }\r\n\r\n  // TODO: For Code Editor,\r\n  // getSig(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[], initial: undefined): Signal<SourceView> {\r\n  //   // Signal fÃ¼r die SourceView erstellen\r\n  //   const temp = this.getSignal<SourceView>(appFilesAsset, {\r\n  //     params: {\r\n  //       appId: this.appId,\r\n  //       global,\r\n  //       ...this.templateIdOrPath(viewKey, global, urlItems),\r\n  //     },\r\n  //   }, initial);\r\n  //   return computed(() => {\r\n  //     const result = temp();\r\n\r\n  //     if (result && result.Type.toLocaleLowerCase() === 'auto') {\r\n  //       switch (result.Extension.toLocaleLowerCase()) {\r\n  //         case '.cs':\r\n  //         case '.cshtml':\r\n  //           result.Type = 'Razor';\r\n  //           break;\r\n  //         case '.html':\r\n  //         case '.css':\r\n  //         case '.js':\r\n  //           result.Type = 'Token';\r\n  //           break;\r\n  //       }\r\n  //     }\r\n\r\n  //     return result;\r\n  //   });\r\n  // }\r\n\r\n\r\n  /** ViewKey is templateId or path */\r\n  save(viewKey: string, global: boolean, view: SourceView, urlItems: ViewOrFileIdentifier[]): Observable<boolean> {\r\n    return this.http.post<boolean>(this.apiUrl(appFilesAsset), view, {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        ...this.templateIdOrPath(viewKey, global, urlItems),\r\n      },\r\n    });\r\n  }\r\n\r\n  getAll(mask?: string): Observable<FileAsset[]> {\r\n    return this.getHttpApiUrl<{ Files: FileAsset[] }>(appFilesAll, {\r\n      params: {\r\n        appId: this.appId,\r\n        ...(mask && { mask }),\r\n      },\r\n    }).pipe(\r\n      map(({ Files }) => {\r\n        Files.forEach(file => {\r\n          file.Shared ??= false;\r\n        });\r\n        return Files;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getWebApis(): Observable<WebApi[]> {\r\n    return this.getHttpApiUrl<{ files: WebApi[] }>(apiExplorerAppApiFiles, {\r\n      params: {\r\n        appId: this.appId,\r\n      },\r\n    }).pipe(\r\n      map(({ files }) => {\r\n        files.forEach(file => {\r\n          file.isShared ??= false;\r\n          file.isCompiled ??= false;\r\n        });\r\n        return files;\r\n      }),\r\n    ).pipe(\r\n      map(files => {\r\n        const webApis: WebApi[] = files.map(file => {\r\n          const splitIndex = file.path.lastIndexOf('/');\r\n          const fileExtIndex = file.path.lastIndexOf('.');\r\n          const folder = file.path.substring(0, splitIndex);\r\n          const name = file.path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path: file.path, folder, name, isShared: file.isShared, endpointPath: file.endpointPath, isCompiled: file.isCompiled, edition: file.edition };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getWebApisSig(): Signal<WebApi[]> {\r\n    // Get the signal that retrieves the API files\r\n    const apiFilesSignal = this.getSignal<{ files: WebApi[] }>(apiExplorerAppApiFiles, {\r\n      params: {\r\n        appId: this.appId,\r\n      },\r\n    });\r\n\r\n    // Use a computed signal to transform the data\r\n    const webApisSignal = computed(() => {\r\n      const files = apiFilesSignal()?.files;\r\n\r\n      if(!files)\r\n        return [];\r\n\r\n      // Ensure the default values for `isShared` and `isCompiled`\r\n      files.forEach(file => {\r\n        file.isShared ??= false;\r\n        file.isCompiled ??= false;\r\n      });\r\n\r\n      // Map the files to the desired WebApi format\r\n      return files.map(file => {\r\n        const splitIndex = file.path.lastIndexOf('/');\r\n        const fileExtIndex = file.path.lastIndexOf('.');\r\n        const folder = file.path.substring(0, splitIndex);\r\n        const name = file.path.substring(splitIndex + 1, fileExtIndex);\r\n\r\n        return {\r\n          path: file.path,\r\n          folder,\r\n          name,\r\n          isShared: file.isShared,\r\n          endpointPath: file.endpointPath,\r\n          isCompiled: file.isCompiled,\r\n          edition: file.edition,\r\n        } as WebApi;\r\n      });\r\n    });\r\n\r\n    return webApisSignal;\r\n  }\r\n\r\n\r\n  getWebApiDetails(apiPath: string): Observable<WebApiDetails> {\r\n    return this.getHttpApiUrl<WebApiDetails>(apiExplorerInspect, {\r\n      params: { appId: this.appId, zoneId: this.zoneId, path: apiPath },\r\n    });\r\n  }\r\n\r\n  getPredefinedTemplates(purpose?: 'Template' | 'Search' | 'Api', type?: 'Token' | 'Razor'): Observable<PredefinedTemplatesResponse> {\r\n    return this.getHttpApiUrl<PredefinedTemplatesResponse>(appFilesPredefinedTemplates, {\r\n      params: {\r\n        ...(purpose && { purpose }),\r\n        ...(type && { type }),\r\n      },\r\n    });\r\n  }\r\n\r\n  getPreview(path: string, global: boolean, templateKey: string): Observable<Preview> {\r\n    return this.getHttpApiUrl<Preview>(appFilesPreview, {\r\n      params: {\r\n        appId: this.appId,\r\n        path,\r\n        templateKey,\r\n        global,\r\n      },\r\n    });\r\n  }\r\n\r\n  create(path: string, global: boolean, templateKey: string): Observable<boolean> {\r\n    return this.http.post<boolean>(this.apiUrl(appFilesCreate), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        global,\r\n        purpose: 'auto',\r\n        path,\r\n        templateKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  private templateIdOrPath(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[]) {\r\n    if (/^[0-9]*$/g.test(viewKey)) {\r\n      const path = urlItems.find(i => i.EntityId?.toString() === viewKey && i.IsShared === global)?.Path;\r\n      return {\r\n        templateId: viewKey,\r\n        ...(path != null && { path }),\r\n      };\r\n    } else {\r\n      return { path: viewKey };\r\n    }\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}