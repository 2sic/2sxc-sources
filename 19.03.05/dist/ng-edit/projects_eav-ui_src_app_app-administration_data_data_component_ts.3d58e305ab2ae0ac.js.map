{"version":3,"file":"projects_eav-ui_src_app_app-administration_data_data_component_ts.3d58e305ab2ae0ac.js","mappings":"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","names":["BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","static","__ngFactoryType__","i0","type","selectors","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","MatBadge","_ngZone","inject","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationMode","ANIMATION_MODULE_TYPE","optional","_idGenerator","_IdGenerator","color","this","_color","value","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","constructor","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","MatBadgeModule","imports","A11yModule","MatCommonModule","ctx_r0","params","urlTo","contentType","Metadata","length","Permissions","Count","_r2","do","EditInfo","DisableRename","DisableDelete","DataActionsComponent","AgActionsAlwaysRefresh","agInit","data","enablePermissions","enablePermissionsGetter","guidRegex","test","NameId","features","consts","DataActionsComponent_Conditional_1_Template","DataActionsComponent_Conditional_2_Template","DataActionsComponent_Conditional_3_Template","DataActionsComponent_Conditional_4_Template","DataActionsComponent_Conditional_5_Template","DataActionsComponent_Conditional_6_Template","DataActionsComponent_ng_template_12_Template","DisableEdit","Properties","DisableMetadata","menu_r3","MatRippleModule","i1","MatIconModule","i2","i3","MatMenuModule","i4","TippyDirective","DataFieldsComponent","tooltip","ReadOnly","ReadOnlyMessage","SharedDefId","icon","refresh","fieldsUrl","DataItemsComponent","itemsUrl","addItemUrl","scopeOption_r1","name","label","ctx_r2","createGhost","DataComponent","BaseComponent","#snackBar","#contentTypeSvc","#contentExportSvc","#dialogConfigSvc","#dialogRouter","super","isDebug","GlobalConfigService","MatSnackBar","transient","ContentTypesService","ContentExportService","DialogConfigAppService","DialogRoutingService","contentTypes","signal","scope","scopeOptions","scopeSelected","computed","find","s","gridOptions","#buildGridOptions","dropdownInsertValue","#fetchScopes","#refreshScopeOnRouteChange","doOnDialogClosed","#fetchContentTypes","getCurrent$","subscribe","Context","Enable","AppPermissions","filesDropped","files","importFile","substring","lastIndexOf","toLocaleLowerCase","toString","pipe","take","fileString","contentTypeName","split","ct","Name","#openDataImport","open","duration","importType","navRelative","state","urlToImportType","#urlTo","editContentType","retrieveContentTypes","_compareLabel","Label","replace","RegExp","set","eavConstants","scopes","default","getScopesV2","scopeList","manual","filter","sOld","sNew","withNiceLabel","map","countInfo","typesInherited","typesTotal","sourceName","window","prompt","_","changeScope","newScope","subscriptions","router","events","event","NavigationEnd","getParam","startWith","mapUntilChanged","m","option","includes","newScopeOption","typesOfApp","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","cellRendererParams","idFieldParamsTooltipGetter","TextWidePrimary","headerName","field","sort","comparator","valueA","valueB","nodeA","nodeB","isInverted","localeCompare","cellRenderer","p","AgGridHelper","cellLink","Items","#routeAddItem","Fields","TextWideMin100","cellClass","valueGetter","onCellClicked","TextWideFlex3","Description","ActionsPinnedRight4","verb","#routeCreateOrEditMetadata","GoToPermissions","getUrlContentType","GoToMetadata","Id","GoToDevRest","getUrlData","#exportType","#deleteContentType","url","urlSubRoute","convertFormToUrl","items","EditPrep","newFromType","urlToNewContentType","form","editId","newMetadata","metadata","Prefill","exportJson","confirm","delete","$event","DataComponent_For_10_Template","DataComponent_Conditional_19_Template","tmp_4_0","MatDialogActions","MatFormFieldModule","MatSelectModule","FormsModule","MatOptionModule","MatButtonModule","i5","i6","RouterOutlet","SxcGridModule","i7","DragAndDropDirective","fn","distinctUntilChanged","mapUntilObjChanged","isEqual"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/badge.mjs","./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.html","./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.html","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.ts","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts"],"sourcesContent":["import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { MatCommonModule } from '@angular/material/core';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n","<div class=\"actions-component\">\r\n  @if (!contentType.EditInfo.DisableEdit || contentType.Properties) {\r\n    <a [href]=\"params.urlTo('createUpdateMetaData', contentType)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Description and more\">\r\n      <mat-icon>edit</mat-icon>\r\n    </a>\r\n  } @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>edit</mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableMetadata) {\r\n    <a [href]=\"params.urlTo('openMetadata', contentType)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Metadata\">\r\n      <mat-icon\r\n        [matBadge]=\"contentType.Metadata.length\"\r\n        matBadgePosition=\"below after\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!contentType.Metadata.length\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        local_offer\r\n      </mat-icon>\r\n    </a>\r\n  } @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"contentType.Metadata.length\"\r\n        matBadgePosition=\"below after\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!contentType.Metadata.length\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableEdit && enablePermissions) {\r\n    <a [href]=\"params.urlTo('openPermissions', contentType)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Permissions\">\r\n      <mat-icon\r\n        [matBadge]=\"contentType.Permissions.Count\"\r\n        matBadgePosition=\"below after\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!contentType.Permissions.Count\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        person</mat-icon\r\n      >\r\n    </a>\r\n  } @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"contentType.Permissions.Count\"\r\n        matBadgePosition=\"below after\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!contentType.Permissions.Count\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <a [href]=\"params.urlTo('editContentType', contentType)\" mat-menu-item [disabled]=\"contentType.EditInfo.DisableRename\">\r\n      <mat-icon>settings</mat-icon>\r\n      <span>Rename</span>\r\n    </a>\r\n    <a mat-menu-item [href]=\"params.urlTo('openRestApi', contentType)\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </a>\r\n    <button mat-menu-item (click)=\"params.do('typeExport', contentType)\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export content type</span>\r\n    </button>\r\n    <a mat-menu-item [href]=\"params.urlTo('dataExport', contentType)\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export data</span>\r\n    </a>\r\n    <a mat-menu-item [href]=\"params.urlTo('dataImport', contentType)\">\r\n      <mat-icon>cloud_upload</mat-icon>\r\n      <span>Import data</span>\r\n    </a>\r\n    <button mat-menu-item [disabled]=\"contentType.EditInfo.DisableDelete\" (click)=\"params.do('deleteContentType', contentType)\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { guidRegex } from '../../../shared/constants/guid.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models/content-type.model';\r\nimport { AgActionsAlwaysRefresh } from '../../queries/ag-actions/ag-actions-component';\r\n\r\n\r\n@Component({\r\n    selector: 'app-data-actions',\r\n    templateUrl: './data-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class DataActionsComponent extends AgActionsAlwaysRefresh {\r\n  contentType: ContentType;\r\n  enablePermissions: boolean;\r\n\r\n  public params: {\r\n    enablePermissionsGetter(): boolean;\r\n\r\n    do(verb: 'typeExport' | 'deleteContentType', contentType: ContentType): void;\r\n    urlTo(verb: 'createUpdateMetaData'\r\n      | 'openPermissions'\r\n      | 'editContentType'\r\n      | 'openMetadata'\r\n      | 'openRestApi'\r\n      | 'dataExport'\r\n      | 'dataImport', contentType: ContentType): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & DataActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    const enablePermissions = this.params.enablePermissionsGetter();\r\n    this.enablePermissions = enablePermissions && guidRegex().test(this.contentType.NameId);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models/content-type.model';\r\n\r\n@Component({\r\n    selector: 'app-data-fields',\r\n    templateUrl: './data-fields.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class DataFieldsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  tooltip: string;\r\n  icon: string;\r\n\r\n  // TODO: @2pp - change all cases where Ag-Grid has separate interfaces to use this params mechanism\r\n  // 2dm will brief you\r\n  // 1. put type directly on the params (and make public)\r\n  // 2. make type checks (like in agInit) use this, as well as the type checks in the grid-definitions\r\n  // 3. where simple, call it directly from the HTML, don't create more methods which just call this again\r\n  public params: {\r\n    fieldsUrl(contentType: ContentType): string;\r\n  };\r\n  protected contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataFieldsComponent[\"params\"]): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n    this.tooltip = !this.contentType.EditInfo.ReadOnly\r\n      ? 'Edit fields'\r\n      : `${this.contentType.EditInfo.ReadOnlyMessage ? `${this.contentType.EditInfo.ReadOnlyMessage}\\n\\n` : ''}This ContentType shares the definition of #${this.contentType.SharedDefId} so you can't edit it here. Read 2sxc.org/help?tag=shared-types`;\r\n    this.icon = !this.contentType.EditInfo.ReadOnly ? 'dns' : 'share';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple [tippy]=\"tooltip\" [href]=\"params.fieldsUrl(contentType)\">\r\n    <mat-icon [matBadge]=\"value\" matBadgePosition=\"below after\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!value\" aria-hidden=\"false\">\r\n      {{icon}}\r\n    </mat-icon>\r\n  </a>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models';\r\n\r\n@Component({\r\n    selector: 'app-data-items',\r\n    templateUrl: './data-items.component.html',\r\n    styleUrls: ['./data-items.component.scss'],\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class DataItemsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  \r\n  /** Params, directly typed here and anywhere it's used should use this type definition */\r\n  public params: {\r\n    addItemUrl(contentType: ContentType): string;\r\n    itemsUrl(contentType: ContentType): string;\r\n  };\r\n\r\n  protected contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataItemsComponent[\"params\"]): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"{{ value }} items\" [href]=\"params.itemsUrl(contentType)\">\r\n    <div class=\"text-icon\">{{ value }}</div>\r\n  </a>\r\n\r\n  <!-- TODO: fix color again -->\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Add item\" [href]=\"params.addItemUrl(contentType)\">\r\n    <mat-icon>add</mat-icon>\r\n  </a>\r\n</div>","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <!-- This is the table, you see in the Data Tab. The fields are defined inside the TS file -->\r\n  <ag-grid-angular\r\n    class=\"ag-theme-material\"\r\n    [rowData]=\"contentTypes()\"\r\n    [gridOptions]=\"gridOptions\"\r\n    appDragAndDrop\r\n    [allowedFileTypes]=\"'xml,json'\"\r\n    (filesDropped)=\"filesDropped($event)\"\r\n  >\r\n  </ag-grid-angular>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field eav-scope-dropdown\">\r\n        <mat-select\r\n          [ngModel]=\"scope()\"\r\n          name=\"Scope\"\r\n          (ngModelChange)=\"changeScope($event)\"\r\n          panelWidth=\"\"\r\n        >\r\n          <mat-select-trigger>\r\n            <span>Scope: {{ scopeSelected()?.label }}</span>\r\n          </mat-select-trigger>\r\n          @for (scopeOption of scopeOptions(); track scopeOption) {\r\n            <mat-option [value]=\"scopeOption.name\">\r\n              {{ scopeOption.label }}\r\n            </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Scope: Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <a [href]=\"urlToImportType()\">\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Import content type\" tippyPlacement=\"top\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Content Type</span>\r\n        </button>\r\n      </a>\r\n      @if (isDebug()) {\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          color=\"accent\"\r\n          tippy=\"Create a ghost content type\"\r\n          tippyPlacement=\"top\"\r\n          (click)=\"createGhost()\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">share</mat-icon>\r\n          <span>Ghost</span>\r\n        </button>\r\n      }\r\n    </div>\r\n    <a [href]=\"urlToNewContentType()\">\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new content type\" tippyPlacement=\"top\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </a>\r\n  </mat-dialog-actions>\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, computed, inject, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { NavigationEnd, RouterOutlet } from '@angular/router';\r\nimport { filter, from, map, startWith, take } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../../content-import/content-import-dialog.config';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { AgGridHelper } from '../../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { toString } from '../../shared/helpers/file-to-base64.helper';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\nimport { ContentType } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { ContentTypesService } from '../services/content-types.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { DataActionsComponent } from './data-actions/data-actions.component';\r\nimport { DataFieldsComponent } from './data-fields/data-fields.component';\r\nimport { DataItemsComponent } from './data-items/data-items.component';\r\n\r\n@Component({\r\n    selector: 'app-data',\r\n    templateUrl: './data.component.html',\r\n    styleUrls: ['./data.component.scss'],\r\n    imports: [\r\n        MatDialogActions,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        FormsModule,\r\n        MatOptionModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        RouterOutlet,\r\n        SxcGridModule,\r\n        DragAndDropDirective,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class DataComponent extends BaseComponent implements OnInit, OnDestroy {\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n  #snackBar = inject(MatSnackBar);\r\n\r\n  #contentTypeSvc = transient(ContentTypesService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor() { super(); }\r\n\r\n  contentTypes = signal<ContentType[]>(undefined);\r\n  scope = signal<string>(undefined);\r\n  scopeOptions = signal<ScopeDetailsDto[]>([]);\r\n  scopeSelected = computed(() => this.scopeOptions().find(s => s.name === this.scope()));\r\n\r\n  /** Possible scopes - the ones from the backend + manually entered scopes by the current user */\r\n  gridOptions = this.#buildGridOptions();\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  enablePermissions!: boolean;\r\n\r\n  ngOnInit() {\r\n    this.#fetchScopes();\r\n    this.#refreshScopeOnRouteChange();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#fetchContentTypes());\r\n\r\n    this.#dialogConfigSvc.getCurrent$().subscribe(data => {\r\n      this.enablePermissions = data.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        from(toString(files[0])).pipe(take(1)).subscribe(fileString => {\r\n          const contentTypeName = fileString.split('<Entity Type=\"')[1]?.split('\"')[0];\r\n          const contentType = this.contentTypes().find(ct => ct.Name === contentTypeName);\r\n          if (contentType == null) {\r\n            const message = `Cannot find Content Type named '${contentTypeName}'. Please open Content Type Import dialog manually.`;\r\n            this.#snackBar.open(message, null, { duration: 5000 });\r\n            return;\r\n          }\r\n          this.#openDataImport(contentType, files);\r\n        });\r\n        break;\r\n      case 'json':\r\n        this.importType(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importType(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  urlToImportType() {\r\n    return this.#urlTo('import');\r\n  }\r\n\r\n  editContentType(contentType: ContentType) {\r\n    if (!contentType) {\r\n      this.#dialogRouter.navRelative(['add']);\r\n    } else {\r\n      if (contentType.EditInfo.ReadOnly) return;\r\n      this.#dialogRouter.navRelative([`${contentType.NameId}/edit`]);\r\n    }\r\n  }\r\n\r\n  #fetchContentTypes() {\r\n    this.#contentTypeSvc.retrieveContentTypes(this.scope()).subscribe(contentTypes => {\r\n      for (const contentType of contentTypes) {\r\n        contentType._compareLabel = contentType.Label.replace(/\\p{Emoji}/gu, 'ž');\r\n      }\r\n      this.contentTypes.set(contentTypes);\r\n      if (this.scope() !== eavConstants.scopes.default.value) {\r\n        const message = 'Warning! You are in a special scope. Changing things here could easily break functionality';\r\n        this.#snackBar.open(message, null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  #fetchScopes() {\r\n    this.#contentTypeSvc.getScopesV2().subscribe(scopeList => {\r\n      // Merge the new scopes with the existing ones - in case there were manual scopes added\r\n      // If old scope list had a manual scope which the server didn't send, re-add it here\r\n      const manual = this.scopeOptions()\r\n        .filter(sOld => scopeList.find(sNew => sNew.name === sOld.name) == null);\r\n\r\n      // Add a nice label to each scope containing count-information of types\r\n      const withNiceLabel = scopeList.map(s => {\r\n        let countInfo = !s.typesInherited\r\n          ? `${s.typesTotal} types`               // only not-inherited\r\n          : (s.typesInherited == s.typesTotal)\r\n            ? s.typesInherited + ' sys types'     // only inherited\r\n            : `${s.typesTotal} types / ${s.typesInherited} system`;\r\n        return ({ ...s, label: s.name + ` - ${countInfo}` });\r\n      });\r\n\r\n      this.scopeOptions.set([...withNiceLabel, ...manual]);\r\n    });\r\n  }\r\n\r\n  createGhost() {\r\n    const sourceName = window.prompt('To create a ghost content-type enter source static name / id - this is a very advanced operation - read more about it on 2sxc.org/help?tag=ghost');\r\n    if (!sourceName) return;\r\n    this.#snackBar.open('Saving...');\r\n    this.#contentTypeSvc.createGhost(sourceName).subscribe(_ => {\r\n      this.#snackBar.open('Saved', null, { duration: 2000 });\r\n      this.#fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n    }\r\n    this.#dialogRouter.navRelative(['..', newScope]);\r\n  }\r\n\r\n  /**\r\n   * Refreshes the scope when the route changes.\r\n   * ...also adds a scope name if the route scope is not found in the list of possible scopes.\r\n   * This is to allow an admin to enter a custom scope.\r\n   * Note 2024-03-04 2dm - not sure if this auto-add feature is still needed though...\r\n   */\r\n  #refreshScopeOnRouteChange() {\r\n    this.subscriptions.add(\r\n      this.#dialogRouter.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        map(() => this.#dialogRouter.getParam('scope')),\r\n        startWith(this.#dialogRouter.getParam('scope')),\r\n        filter(scope => !!scope),\r\n        mapUntilChanged(m => m),\r\n      ).subscribe(scope => {\r\n        this.scope.set(scope);\r\n\r\n        // If we can't find the scope in the list of options, add it as it was entered manually\r\n        if (!this.scopeOptions().map(option => option.name).includes(scope)) {\r\n          const newScopeOption: ScopeDetailsDto = {\r\n            name: scope,\r\n            label: scope,\r\n            typesTotal: 0,\r\n            typesInherited: 0,\r\n            typesOfApp: 0,\r\n          };\r\n          this.scopeOptions.set([...this.scopeOptions(), newScopeOption]);\r\n        }\r\n        this.#fetchContentTypes();\r\n      })\r\n    );\r\n  }\r\n\r\n  //#region Grid\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentType>('StaticName'),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'ContentType',\r\n          field: 'Label',\r\n          sort: 'asc',\r\n          comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {\r\n            const contentTypeA: ContentType = nodeA.data;\r\n            const contentTypeB: ContentType = nodeB.data;\r\n            return contentTypeA._compareLabel.localeCompare(contentTypeB._compareLabel);\r\n          },\r\n          cellRenderer: (p: { data: ContentType }) => AgGridHelper.cellLink(this.#urlTo(`items/${p.data.NameId}`), p.data.Label),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Items,\r\n          field: 'Items',\r\n          cellRenderer: DataItemsComponent,\r\n          cellRendererParams: ({\r\n            addItemUrl: (ct) => this.#urlTo(`edit/${this.#routeAddItem(ct)}`),\r\n            itemsUrl: (ct) => this.#urlTo(`items/${ct.NameId}`),\r\n          } satisfies DataItemsComponent[\"params\"]),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Fields,\r\n          field: 'Fields',\r\n          cellRenderer: DataFieldsComponent,\r\n          cellRendererParams: ({\r\n            fieldsUrl: (contentType) => this.#urlTo(`fields/${contentType.NameId}`),\r\n          } satisfies DataFieldsComponent[\"params\"]),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideMin100,\r\n          field: 'Name',\r\n          cellClass: (p) => `${p.data.EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' '),\r\n          valueGetter: (p: { data: ContentType }) => p.data?.Name,\r\n          onCellClicked: (p) => this.editContentType(p.data),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n          valueGetter: (p: { data: ContentType }) => p.data?.Properties?.Description,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: DataActionsComponent,\r\n          cellRendererParams: ({\r\n            enablePermissionsGetter: () => this.enablePermissions,\r\n            urlTo: (verb, ct) => {\r\n              switch (verb) {\r\n                case 'createUpdateMetaData': return this.#urlTo(`edit/${this.#routeCreateOrEditMetadata(ct)}`);\r\n                case 'openPermissions': return this.#urlTo(GoToPermissions.getUrlContentType(ct.NameId));\r\n                case 'editContentType': return this.#urlTo(ct.EditInfo.ReadOnly ? '' : `${ct.NameId}/edit`);\r\n                case 'openMetadata': return this.#urlTo(GoToMetadata.getUrlContentType(ct.NameId, `Metadata for Content Type: ${ct.Name} (${ct.Id})`));\r\n                case 'openRestApi': return this.#urlTo(GoToDevRest.getUrlData(ct));\r\n                case 'dataExport': return this.#urlTo(`export/${ct.NameId}`);\r\n                case 'dataImport': return this.#urlTo(`${ct.NameId}/import`);\r\n              }\r\n            },\r\n            do: (verb, ct) => {\r\n              switch (verb) {\r\n                case 'typeExport': this.#exportType(ct); break;\r\n                case 'deleteContentType': this.#deleteContentType(ct); break;\r\n              }\r\n            }\r\n          } satisfies DataActionsComponent['params']),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Actions in the grid\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #routeAddItem(contentType: ContentType): string {\r\n    return convertFormToUrl({\r\n      items: [EditPrep.newFromType(contentType.NameId)],\r\n    } satisfies EditForm);\r\n  }\r\n\r\n  urlToNewContentType(): string {\r\n    return this.#urlTo('add');\r\n  }\r\n\r\n  #routeCreateOrEditMetadata(contentType: ContentType): string {\r\n    const form: EditForm = {\r\n      items: [\r\n        !contentType.Properties\r\n          ? {\r\n            ...EditPrep.newMetadata(contentType.NameId, eavConstants.contentTypes.contentType, eavConstants.metadata.contentType),\r\n            Prefill: {\r\n              Label: contentType.Name,\r\n              Description: contentType.Description\r\n            },\r\n          }\r\n          : EditPrep.editId(contentType.Properties.Id),\r\n      ],\r\n    };\r\n    return convertFormToUrl(form);\r\n  }\r\n\r\n  // 2pp | not in use?\r\n  // #createOrEditMetadata(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([`edit/${this.#routeCreateOrEditMetadata(contentType)}`]);\r\n  // }\r\n\r\n  // #openPermissions(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([GoToPermissions.getUrlContentType(contentType.NameId)]);\r\n  // }\r\n\r\n  // #routeMetadata(ct: ContentType) {\r\n  //   return GoToMetadata.getUrlContentType(ct.NameId, `Metadata for Content Type: ${ct.Name} (${ct.Id})`);\r\n  // }\r\n\r\n  // #openMetadata(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([this.#routeMetadata(contentType)]);\r\n  // }\r\n\r\n  // #openRestApi(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([GoToDevRest.getUrlData(contentType)]);\r\n  // }\r\n\r\n  #exportType(contentType: ContentType) {\r\n    this.#contentExportSvc.exportJson(contentType.NameId);\r\n  }\r\n\r\n\r\n  #openDataImport(contentType: ContentType, files?: File[]) {\r\n    this.#dialogRouter.navRelative([`${contentType.NameId}/import`], { state: { files } satisfies ContentImportDialogData });\r\n  }\r\n\r\n  #deleteContentType(contentType: ContentType) {\r\n    if (!confirm(`Are you sure you want to delete '${contentType.Name}' (${contentType.Id})?`)) return;\r\n    this.#snackBar.open('Deleting...');\r\n    this.#contentTypeSvc.delete(contentType).subscribe(_ => {\r\n      this.#snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n"],"x_google_ignoreList":[0]}