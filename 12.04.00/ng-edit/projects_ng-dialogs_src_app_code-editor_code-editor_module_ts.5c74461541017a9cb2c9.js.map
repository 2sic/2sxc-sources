{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/content-types.service.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.module.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.ts","./projects/ng-dialogs/src/app/code-editor/ace-editor/ace-options.ts","./projects/ng-dialogs/src/app/code-editor/ace-editor/ace-editor.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.models.ts","./projects/ng-dialogs/src/app/shared/services/snack-bar-stack.service.ts","./projects/ng-dialogs/src/app/code-editor/services/source.service.ts","./projects/ng-dialogs/src/app/code-editor/services/snippets.service.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/order-items.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/depth-padding.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.component.html","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.component.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.helpers.ts","./projects/ng-dialogs/src/app/code-editor/code-snippets/object-to-array.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-snippets/code-snippets.component.html","./projects/ng-dialogs/src/app/code-editor/code-snippets/code-snippets.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.component.html","./projects/ng-dialogs/src/app/code-editor/code-editor.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor-routing.module.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.module.ts","./projects/ng-dialogs/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/ng-dialogs/src/app/shared/constants/file-names.constants.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts","./projects/ng-dialogs/src/app/shared/services/dialog.service.ts","./projects/ng-dialogs/src/app/shared/translation/translate-configuration.ts","./projects/ng-dialogs/src/app/shared/translation/translate-loader-with-error-handling.ts"],"names":["webApiTypeRoot","http","context","dnnContext","apiUrl","name","this","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","MonacoEditorModule","propagateChange","propagateTouched","ngOnInit","subscription","Subscription","add","fromEvent","window","subscribe","resize","ngAfterViewInit","require","config","paths","vs","monaco","monacoLoaded","insertSnippet","snippet","snippetController","editor","getContribution","insert","focus","ngOnDestroy","unsubscribe","completionItemProvider","dispose","editorModel","writeValue","getModel","setValue","registerOnChange","fn","registerOnTouched","create","editorRef","nativeElement","createModel","undefined","Uri","file","filename","setModel","languages","registerCompletionItemProvider","getModeId","provideCompletionItems","model","position","word","getWordUntilPosition","suggestions","createDependencyProposals","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","onDidChangeContent","getValue","setTimeout","layout","range","snippets","label","kind","documentation","title","help","links","insertText","content","insertTextRules","MonacoEditorComponent","provide","useExisting","multi","aceOptions","mode","wrap","useSoftTabs","theme","fontSize","fontFamily","showGutter","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","zone","ace","aceLoaded","ngOnChanges","changes","currentValue","updateValues","runOutsideAngular","snippetManager","p","getCursorPosition","moveCursorToPosition","destroy","container","remove","edit","$blockScrolling","Infinity","session","on","onEditorValueChange","bind","onEditorBlurred","run","getModeForPath","setMode","register","AceEditorComponent","Explorers","Templates","Snippets","Editors","Ace","Monaco","snackBar","defaultDuration","processingMessage","messageQueue","message","action","duration","triggered$","Subject","push","showSnackBar","asObservable","nextMsg","shift","snackBarRef","open","afterDismissed","complete","onAction","next","SnackBarStackService","isShared","sessionStorage","getItem","global","templateIdOrPath","view","Type","toLocaleLowerCase","Extension","getTemplates","withSubfolders","createTemplate","purpose","path","templateId","SourceService","translate","getSnippets","res","relevant","filterAwayNotNeededSnippetsList","standardAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","keyPrefixes","keyPrefixIndex","v","indexOf","newList","itm","setHasPrefix","set","substr","inputTypeArray","catalogInputTypeSnippets","inputTypeList","subset","templateConfiguration","makeTree","Content","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","snip","linksList","getHelpKey","result","instant","addition","linksString","llist","split","pair","length","link","trim","url","target","type","prefix","getFields","AppId","fields","field","fieldname","valuePlaceholder","Metadata","merged","Notes","toLowerCase","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","replace","filter","fld","md","typeMd","inputMd","All","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","SnippetsService","transform","items","sort","item1","item2","isFolder","SortItemsPipe","sanitizer","depth","bypassSecurityTrustStyle","DepthPaddingPipe","dialogService","toggledItems","templates","last","pathFromRoot","existing","find","item","children","calculateTree","showFileInTree","FileName","openTemplate","openCodeFile","toggleItem","addFile","folder","emit","includes","CodeTemplatesComponent","Array","isArray","values","ObjectToArrayPipe","toggledSections","toggledFolders","toggledInfos","toggledMores","addSnippet","toggleSection","toggleFolder","toggleInfo","info","toggleMore","CodeSnippetsComponent","routes","component","route","snackBarStack","sourceService","snippetsService","titleService","globalConfigService","activeExplorer","activeEditor","init","view$","BehaviorSubject","templates$","explorerSnipps$","editorSnipps$","calculateViewKey","attachListeners","viewKey","share","snippets$","mergeMap","forkJoin","savedCode","Code","setTitle","showCodeAndEditionWarnings","debugEnabled$","getDebugEnabled$","templateVars$","combineLatest","debugEnabled","explorerSnipps","editorSnipps","toggleExplorer","explorer","toggleEditor","question","suggestion","startsWith","prompt","aceEditorRef","monacoEditorRef","codeChanged","code","codeToSave","error","itemsRaw","JSON","parse","EntityId","Path","pathAndName","pathSeparator","lastIndexOf","pathWithSlash","substring","fullName","nameCode","codeFile","otherEditions","endsWith","event","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","CodeEditorComponent","CodeEditorRoutingModule","translateLoaderFactoryCode","sxcVersion","CodeEditorModule","webApiFieldsAll","webApiFieldsRoot","typeListRetrieve","getInputTypesList","inputConfigs","dataType","Label","description","Description","getReservedNames","reOrder","idArray","Id","order","stringify","attributeId","rename","fieldId","newName","IsTitle","Error","newField","ContentTypeId","Index","SortOrder","updateInputType","id","ContentTypesFieldsService","defaultControllerName","defaultTemplateName","defaultTokenName","onClick","stopPropagation","ClickStopPropagationDirective","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ToggleDebugDirective","html","bypassSecurityTrustHtml","SafeHtmlPipe","form","hashParams","buildHashParam","buildFullUrl","openQueryDesigner","queryId","openAppAdministration","tab","extras","buildSharedHashParams","tabId","moduleId","contentBlockId","rawKey","valueTemp","rawValue","encodeURIComponent","oldHref","oldUrl","URL","newHref","origin","pathname","search","allHashParams","entries","reduce","acc","DialogService","buildTranslateConfiguration","factory","loader","useFactory","deps","defaultLanguage","isolate","suffix","getTranslation","lang","console","warn","of"],"mappings":"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","file":"projects_ng-dialogs_src_app_code-editor_code-editor_module_ts.5c74461541017a9cb2c9.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  declarations: [MonacoEditorComponent],\r\n  exports: [MonacoEditorComponent],\r\n})\r\nexport class MonacoEditorModule { }\r\n","import { AfterViewInit, Component, ElementRef, forwardRef, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  template: `<div style=\"width: 100%; height: 100%; overflow: hidden;\" #editor></div>`,\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => MonacoEditorComponent),\r\n    multi: true,\r\n  }],\r\n})\r\nexport class MonacoEditorComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() snippets: Snippet[];\r\n\r\n  private value = '';\r\n  private monaco?: any;\r\n  private editorModel?: any;\r\n  private editor?: any;\r\n  /**\r\n   * TODO: Remove completionItemProvider when changing language or destroying editor.\r\n   * Also don't register completionItemProvider multiple times.\r\n   * https://github.com/react-monaco-editor/react-monaco-editor/issues/88\r\n   */\r\n  private completionItemProvider?: any;\r\n  private subscription: Subscription;\r\n\r\n  propagateChange: (_: any) => void = () => { };\r\n  propagateTouched: (_: any) => void = () => { };\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n\r\n    this.subscription.add(\r\n      fromEvent(window, 'resize').subscribe(() => {\r\n        this.resize();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.25.2/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: any) => {\r\n      this.monaco = monaco;\r\n      this.monacoLoaded();\r\n    });\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editor?.getContribution('snippetController2');\r\n    snippetController?.insert(snippet);\r\n    this.editor?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n    this.completionItemProvider?.dispose();\r\n    this.editorModel?.dispose();\r\n    this.editor?.dispose();\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    this.value = value || '';\r\n    this.editor?.getModel().setValue(this.value);\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: (_: any) => void): void {\r\n    this.propagateTouched = fn;\r\n  }\r\n\r\n  monacoLoaded(): void {\r\n    this.editor = this.monaco.editor.create(this.editorRef.nativeElement);\r\n    this.editorModel = this.monaco.editor.createModel(this.value, undefined, this.monaco.Uri.file(this.filename));\r\n    this.editor.setModel(this.editorModel);\r\n\r\n    this.completionItemProvider = this.monaco.languages.registerCompletionItemProvider(this.editor.getModel().getModeId(), {\r\n      provideCompletionItems: (model: any, position: any) => {\r\n        const word = model.getWordUntilPosition(position);\r\n        const range = {\r\n          startLineNumber: position.lineNumber,\r\n          endLineNumber: position.lineNumber,\r\n          startColumn: word.startColumn,\r\n          endColumn: word.endColumn\r\n        };\r\n        return { suggestions: this.createDependencyProposals(range) };\r\n      }\r\n    });\r\n\r\n    this.editor.getModel().onDidChangeContent(() => {\r\n      this.propagateChange(this.editor.getModel().getValue());\r\n    });\r\n\r\n    this.editor.focus();\r\n    this.resize();\r\n  }\r\n\r\n  private resize(): void {\r\n    // wait for Angular to update DOM to be able to get proper size of the container\r\n    setTimeout(() => { this.editor?.layout(); }, 50);\r\n  }\r\n\r\n  private createDependencyProposals(range: any) {\r\n    // kind and rule copied from:\r\n    // https://microsoft.github.io/monaco-editor/playground.html#extending-language-services-completion-provider-example\r\n    const kind = 27;\r\n    const insertTextRules = 4;\r\n    const monacoSnippets = this.snippets.map(snippet => ({\r\n      label: snippet.name,\r\n      kind,\r\n      documentation: `${snippet.title}\\n${snippet.help}\\n${snippet.links}`,\r\n      insertText: snippet.content,\r\n      insertTextRules,\r\n      range,\r\n    }));\r\n    return monacoSnippets;\r\n  }\r\n}\r\n","import { EditorOptions } from './ace.model';\r\n\r\nexport const aceOptions: Partial<EditorOptions> & EditorPluginsOptions = {\r\n  mode: 'ace/mode/razor',\r\n  wrap: true,\r\n  useSoftTabs: true,\r\n  theme: 'ace/theme/sqlserver',\r\n  fontSize: 14,\r\n  fontFamily: 'Consolas, Courier New, monospace',\r\n  showGutter: true,\r\n  enableBasicAutocompletion: true,\r\n  enableLiveAutocompletion: true,\r\n  enableSnippets: true,\r\n};\r\n\r\ninterface EditorPluginsOptions {\r\n  enableBasicAutocompletion: boolean;\r\n  enableLiveAutocompletion: boolean;\r\n  enableSnippets: boolean;\r\n}\r\n","import { AfterViewInit, Component, ElementRef, forwardRef, Input, NgZone, OnChanges, OnDestroy, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { Snippet } from '../models/snippet.model';\r\nimport { aceOptions } from './ace-options';\r\nimport { Ace, Editor } from './ace.model';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-ace-editor',\r\n  template: `<div style=\"width: 100%; height: 100%;\" #editor></div>`,\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AceEditorComponent),\r\n    multi: true,\r\n  }],\r\n})\r\nexport class AceEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() snippets: Snippet[];\r\n\r\n  private value = '';\r\n  private editor: Editor & { $blockScrolling?: number; };\r\n  private ace: Ace;\r\n\r\n  propagateChange: (_: any) => void = () => { };\r\n  propagateTouched: (_: any) => void = () => { };\r\n\r\n  constructor(private zone: NgZone) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        ace: ['https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11'],\r\n      },\r\n    });\r\n\r\n    window.require(['ace/ace'], (ace: Ace) => {\r\n      this.ace = ace;\r\n\r\n      window.require(['ace/ext-modelist'], () => {\r\n        window.require(['ace/ext-language_tools'], () => {\r\n          window.require(['ace/snippets'], () => {\r\n            this.aceLoaded();\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const filename = changes.filename?.currentValue != null ? this.filename : undefined;\r\n    const snippets = changes.snippets?.currentValue != null ? this.snippets : undefined;\r\n    this.updateValues(filename, snippets);\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      const snippetManager = this.ace.require('ace/snippets').snippetManager;\r\n      snippetManager.insertSnippet(this.editor, snippet);\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    this.value = value || '';\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      const p = this.editor.getCursorPosition();\r\n      this.editor.setValue(this.value, -1);\r\n      this.editor.moveCursorToPosition(p);\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void) {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: (_: any) => void) {\r\n    this.propagateTouched = fn;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor.destroy();\r\n      this.editor.container.remove();\r\n      this.editor = null;\r\n    });\r\n  }\r\n\r\n  private aceLoaded(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor = this.ace.edit(this.editorRef.nativeElement, aceOptions);\r\n      this.editor.$blockScrolling = Infinity;\r\n      this.editor.session.setValue(this.value); // set value and reset undo history\r\n      this.updateValues(this.filename, this.snippets);\r\n      this.editor.on('change', this.onEditorValueChange.bind(this));\r\n      this.editor.on('blur', this.onEditorBlurred.bind(this));\r\n      this.editor.focus();\r\n      // wait for Angular to update DOM to be able to get proper size of the container\r\n      setTimeout(() => { this.editor.resize(); }, 50);\r\n    });\r\n  }\r\n\r\n  private onEditorValueChange(): void {\r\n    this.zone.run(() => {\r\n      this.propagateChange(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private onEditorBlurred(): void {\r\n    this.zone.run(() => {\r\n      this.propagateTouched(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private updateValues(filename: string, snippets: Snippet[]): void {\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      if (filename) {\r\n        const modelist = this.ace.require('ace/ext/modelist');\r\n        const mode = modelist.getModeForPath(filename).mode;\r\n        this.editor.session.setMode(mode);\r\n      }\r\n      if (snippets) {\r\n        const snippetManager = this.ace.require('ace/snippets').snippetManager;\r\n        snippetManager.register(this.snippets);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Snippet, SnippetsSets } from './models/snippet.model';\r\nimport { SourceView } from './models/source-view.model';\r\n\r\nexport interface CodeEditorTemplateVars {\r\n  debugEnabled: boolean;\r\n  view: SourceView;\r\n  templates: string[];\r\n  explorerSnipps: SnippetsSets;\r\n  editorSnipps: Snippet[];\r\n}\r\n\r\nexport const Explorers = {\r\n  Templates: 'Templates',\r\n  Snippets: 'Snippets',\r\n} as const;\r\n\r\nexport type ExplorerOption = typeof Explorers[keyof typeof Explorers];\r\n\r\nexport const Editors = {\r\n  Ace: 'Ace',\r\n  Monaco: 'Monaco',\r\n} as const;\r\n\r\nexport type EditorOption = typeof Editors[keyof typeof Editors];\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\nimport { Subject } from 'rxjs';\r\n\r\n/** This service ensures that multiple SnackBars are shown one after another. */\r\n@Injectable({ providedIn: 'root' })\r\nexport class SnackBarStackService implements OnDestroy {\r\n  private defaultDuration = 3000;\r\n  private processingMessage = false;\r\n  private messageQueue: SnackBarData[] = [];\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  /**\r\n   * Add a message to the stack queue.\r\n   * @returns observable that fires if the action is triggered.\r\n   * Service will complete the observable\r\n   */\r\n  add(message: string, action?: string, config: MatSnackBarConfig = { duration: this.defaultDuration }) {\r\n    const triggered$ = new Subject<void>();\r\n    this.messageQueue.push({ message, action, config, triggered$ });\r\n    if (!this.processingMessage) {\r\n      this.showSnackBar();\r\n    }\r\n    return triggered$.asObservable();\r\n  }\r\n\r\n  private showSnackBar() {\r\n    const nextMsg = this.messageQueue.shift();\r\n\r\n    if (nextMsg == null) {\r\n      this.processingMessage = false;\r\n      return;\r\n    }\r\n\r\n    this.processingMessage = true;\r\n\r\n    const snackBarRef = this.snackBar.open(nextMsg.message, nextMsg.action, nextMsg.config);\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      nextMsg.triggered$.complete();\r\n      this.showSnackBar();\r\n    });\r\n    snackBarRef.onAction().subscribe(() => {\r\n      nextMsg.triggered$.next();\r\n    });\r\n  }\r\n\r\n  // spm TODO: ngOnDestroy only fires in services provided in component\r\n  ngOnDestroy() {\r\n    for (const message of this.messageQueue) {\r\n      message.triggered$.complete();\r\n    }\r\n    this.messageQueue = null;\r\n  }\r\n}\r\n\r\nclass SnackBarData {\r\n  message: string;\r\n  action: string;\r\n  config: MatSnackBarConfig;\r\n  triggered$: Subject<void>;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFile, webApiAppFileCreate, webApiAppFilesAll } from '../../../../../edit/shared/services';\r\nimport { keyIsShared } from '../../shared/constants/session.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n  private isShared = sessionStorage.getItem(keyIsShared) ?? false.toString();\r\n\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** Key is templateId or path */\r\n  get(key: number | string): Observable<SourceView> {\r\n    return this.http.get<SourceView>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, ...this.templateIdOrPath(key) }\r\n    }).pipe(\r\n      map(view => {\r\n        if (view.Type.toLocaleLowerCase() === 'auto') {\r\n          switch (view.Extension.toLocaleLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** Key is templateId or path */\r\n  save(key: number | string, view: SourceView): Observable<boolean> {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), view, {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, ...this.templateIdOrPath(key) },\r\n    });\r\n  }\r\n\r\n  getTemplates(): Observable<string[]> {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, withSubfolders: 'true' },\r\n    });\r\n  }\r\n\r\n  createTemplate(name: string): Observable<boolean> {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, purpose: 'auto', path: name },\r\n    });\r\n  }\r\n\r\n  private templateIdOrPath(key: number | string) {\r\n    if (typeof key === typeof 0) {\r\n      return { templateId: key.toString() };\r\n    } else {\r\n      return { path: key as string };\r\n    }\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DataTypeConstants } from '../../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { MoreSnippet, SetSnippet, SetSnippetLink, Snippet, SnippetsSets, SnippetsSubSubSets } from '../models/snippet.model';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext, private translate: TranslateService) { }\r\n\r\n  getSnippets(view: SourceView): Observable<{ list: Snippet[]; sets: SnippetsSets; }> {\r\n    return this.http.get<{ snippets: Snippet[] }>('../ng-assets/snippets.json.js').pipe(\r\n      map(res => {\r\n        const relevant = this.filterAwayNotNeededSnippetsList(res.snippets, view);\r\n        const standardAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n        const sets = this.initSnippetsWithConfig(standardAndInputSnips.standardArray, view, standardAndInputSnips.inputTypeSnippets);\r\n        const sorted: { list: Snippet[]; sets: SnippetsSets; } = {\r\n          list: standardAndInputSnips.standardArray,\r\n          sets\r\n        };\r\n        return sorted;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** Scan the list for sets starting with @ or [ and filter if not needed right now */\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView): Snippet[] {\r\n    const keyPrefixes = ['@', '['];\r\n    const keyPrefixIndex = (v: SourceView) => (v.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n    const newList: Snippet[] = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substr(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]): { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substr(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    const extracted: { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } = {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n    return extracted;\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]): Record<string, Snippet[]> {\r\n    const inputTypeList: Record<string, Snippet[]> = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(\r\n    standardArray: Snippet[],\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): SnippetsSets {\r\n    const sets = this.makeTree(standardArray);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(\r\n        sets.Content.Fields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContent,\r\n        'Content',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(\r\n          sets.List.Fields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeList,\r\n          'Header',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeListPresentation,\r\n          'Header.Presentation',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  /** Convert the list into a tree with set/subset/item */\r\n  private makeTree(list: Snippet[]): SnippetsSets {\r\n    const tree: SnippetsSets = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted: SetSnippet = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      (tree[o.set][o.subset] as SetSnippet[]).push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: string, subset: string, snip: string, addition: string): string {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: string): SetSnippetLink[] {\r\n    if (!linksString) { return null; }\r\n\r\n    const links: SetSnippetLink[] = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        const link: SetSnippetLink = {\r\n          name: pair[0].trim(),\r\n          url: pair[1].trim() + ':' + pair[2].trim(),\r\n        };\r\n        links.push(link);\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  /** spm TODO: this happens after snippets are calculated for the first time. Needs to be fixed */\r\n  private loadContentType(\r\n    target: SnippetsSubSubSets,\r\n    type: string,\r\n    prefix: string,\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    this.getFields(templateConfiguration.AppId, type).subscribe(fields => {\r\n      // first add common items if the content-type actually exists\r\n      for (const field of fields) {\r\n        const fieldname = field.StaticName;\r\n        target[fieldname] = {\r\n          key: fieldname,\r\n          label: fieldname,\r\n          snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n          help: field.Metadata.merged.Notes || ' (' + field.Type.toLowerCase() + ') '\r\n        };\r\n        // try to add generic snippets specific to this input-type\r\n        const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n        this.attachSnippets(target, prefix, fieldname, field.InputType, snipDefaults, inputTypeSnippets);\r\n      }\r\n\r\n      if (fields.length) {\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < std.length; i++) {\r\n          target[std[i]] = {\r\n            key: std[i],\r\n            label: std[i],\r\n            snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n            help: this.translate.instant('SourceEditorSnippets.StandardFields.' + std[i] + '.Help'),\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private valuePlaceholder(obj: string, val: string, templateConfiguration: SourceView): string {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string): Observable<Field[]> {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appid: appId.toString(), staticName },\r\n    }).pipe(\r\n      map(fields => {\r\n        fields = fields.filter(field => field.Type !== DataTypeConstants.Empty);\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) { continue; }\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n        return fields;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private attachSnippets(\r\n    target: SnippetsSubSubSets,\r\n    prefix: string,\r\n    fieldname: string,\r\n    inputType: string,\r\n    snipDefaults: SetSnippet,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) { // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substr(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) { return; }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = {};\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true,\r\n        } as MoreSnippet);\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: string, objName: string, fieldName: string): string {\r\n    snip = snip\r\n      .replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n/** Sorts folders before files */\r\n@Pipe({ name: 'sortItems' })\r\nexport class SortItemsPipe implements PipeTransform {\r\n\r\n  transform(items: TreeItem[]) {\r\n    if (items == null) { return items; }\r\n\r\n    items.sort((item1, item2) => {\r\n      if (item1.isFolder < item2.isFolder) {\r\n        return 1;\r\n      } else if (item1.isFolder > item2.isFolder) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return items;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'depthPadding' })\r\nexport class DepthPaddingPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(depth: number, isFolder: boolean): SafeStyle {\r\n    let padding: number;\r\n    if (isFolder) {\r\n      padding = depth * 8;\r\n    } else {\r\n      padding = (depth === 0) ? 8 : (depth * 8 + 16);\r\n    }\r\n    return this.sanitizer.bypassSecurityTrustStyle(`padding-left: ${padding}px;`);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of (tree | sortItems)\">\r\n      <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #fileOrFolder let-item=\"item\">\r\n\r\n      <div class=\"file\" *ngIf=\"!item.isFolder\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n        [ngClass]=\"{'active': toggledItems.includes(item.pathFromRoot) }\" [tippy]=\"item.name\" tippyShowDelay=\"750\"\r\n        (click)=\"openTemplate(item.pathFromRoot)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div *ngIf=\"item.isFolder\">\r\n        <div class=\"folder-name-wrapper\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n          (click)=\"toggleItem(item.pathFromRoot)\">\r\n          <div class=\"folder-name\" [tippy]=\"item.name\" tippyShowDelay=\"750\">\r\n            <mat-icon>\r\n              {{ toggledItems.includes(item.pathFromRoot) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n            </mat-icon>\r\n            <span>{{ item.name }}</span>\r\n          </div>\r\n          <div class=\"add-item\" tippy=\"Create file in this folder\" tippyShowDelay=\"750\" appClickStopPropagation\r\n            (click)=\"addFile(item.pathFromRoot)\">\r\n            <mat-icon>add</mat-icon>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledItems.includes(item.pathFromRoot)\">\r\n          <ng-container *ngFor=\"let item1 of (item.children | sortItems)\">\r\n            <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item1}\"></ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button tippy=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { calculateTree } from './code-templates.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n})\r\nexport class CodeTemplatesComponent implements OnChanges {\r\n  @Input() view: SourceView;\r\n  @Input() templates: string[];\r\n  @Output() createTemplate: EventEmitter<string> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItems: string[] = [];\r\n\r\n  constructor(private dialogService: DialogService) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.templates?.currentValue) {\r\n      this.tree = calculateTree(this.templates);\r\n    }\r\n    if (changes.view?.currentValue) {\r\n      this.showFileInTree(this.view.FileName);\r\n    }\r\n  }\r\n\r\n  openTemplate(path: string): void {\r\n    this.dialogService.openCodeFile(path);\r\n  }\r\n\r\n  toggleItem(path: string): void {\r\n    GeneralHelpers.toggleInArray(path, this.toggledItems);\r\n  }\r\n\r\n  addFile(folder?: string): void {\r\n    this.createTemplate.emit(folder);\r\n  }\r\n\r\n  private showFileInTree(file: string): void {\r\n    if (file == null) { return; }\r\n    if (this.toggledItems.includes(file)) { return; }\r\n\r\n    const paths = file.split('/');\r\n    let pathFromRoot = '';\r\n    for (const path of paths) {\r\n      pathFromRoot = !pathFromRoot ? path : `${pathFromRoot}/${path}`;\r\n      if (this.toggledItems.includes(pathFromRoot)) { continue; }\r\n      this.toggleItem(pathFromRoot);\r\n    }\r\n  }\r\n}\r\n","import { TreeItem } from '../models/tree-item.model';\r\n\r\nexport function calculateTree(templates: string[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.split('/');\r\n    const last = paths[paths.length - 1];\r\n    let pathFromRoot = '';\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const path = paths[i];\r\n      pathFromRoot += i ? `/${path}` : path;\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          depth: i,\r\n          name: path,\r\n          pathFromRoot,\r\n          isFolder: path !== last,\r\n          ...(path !== last && { children: [] }),\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'objectToArray' })\r\nexport class ObjectToArrayPipe implements PipeTransform {\r\n  transform(obj: Record<string, any> | Record<string, any>[]): Record<string, any>[] {\r\n    if (obj == null) { return; }\r\n\r\n    if (Array.isArray(obj)) { return obj; }\r\n\r\n    return Object.values(obj);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" [tippy]=\"'SourceEditorSnippets.' + section.key + '.Help' | translate\"\r\n      tippyShowDelay=\"750\" (click)=\"toggleSection(section)\">\r\n      <mat-icon>{{ toggledSections.includes(section) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ 'SourceEditorSnippets.' + section.key + '.Title' | translate }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\"\r\n          [tippy]=\"'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Help' | translate\" tippyShowDelay=\"750\"\r\n          (click)=\"toggleFolder(folder)\">\r\n          <mat-icon>{{ toggledFolders.includes(folder) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n          <span>{{ 'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Title' | translate }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | objectToArray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [tippy]=\"snippet.snip\" tippyShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon *ngIf=\"snippet.more\" tippy=\"Show More\" tippyShowDelay=\"750\" (click)=\"toggleMore(snippet)\">\r\n                {{ toggledMores.includes(snippet) ? 'more_vert' : 'more_horiz' }}\r\n              </mat-icon>\r\n              <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation (click)=\"toggleInfo(snippet)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet)\">\r\n              <div class=\"text\" [innerHTML]=\"snippet.help | safeHtml\"></div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"toggledMores.includes(snippet)\">\r\n              <div *ngFor=\"let more of (snippet.more | objectToArray)\">\r\n\r\n                <div class=\"snippet-label\">\r\n                  <div matRipple class=\"text text-more\" [tippy]=\"more.snip\" tippyShowDelay=\"750\"\r\n                    (click)=\"addSnippet(more.snip)\">\r\n                    {{ more.label }}\r\n                  </div>\r\n                  <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation (click)=\"toggleInfo(more)\">\r\n                    info\r\n                  </mat-icon>\r\n                </div>\r\n\r\n                <div class=\"snippet-help snippet-help-more\" *ngIf=\"toggledInfos.includes(more)\">\r\n                  <div class=\"text\" [innerHTML]=\"more.help | safeHtml\"></div>\r\n                  <div *ngFor=\"let link of more.links\">\r\n                    <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { SnippetsSets } from '../models/snippet.model';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n})\r\nexport class CodeSnippetsComponent {\r\n  @Input() snippets: SnippetsSets;\r\n  @Output() insertSnippet: EventEmitter<string> = new EventEmitter();\r\n  toggledSections: any[] = [];\r\n  toggledFolders: any[] = [];\r\n  toggledInfos: any[] = [];\r\n  toggledMores: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  addSnippet(snippet: string): void {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(set: any): void {\r\n    GeneralHelpers.toggleInArray(set, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(item: any): void {\r\n    GeneralHelpers.toggleInArray(item, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(info: any): void {\r\n    GeneralHelpers.toggleInArray(info, this.toggledInfos);\r\n  }\r\n\r\n  toggleMore(more: any): void {\r\n    GeneralHelpers.toggleInArray(more, this.toggledMores);\r\n  }\r\n}\r\n","<div class=\"editor-root\" appToggleDebug *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Templates }\" tippy=\"Templates\"\r\n      (click)=\"toggleExplorer(Explorers.Templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Snippets }\" tippy=\"Snippets\"\r\n      (click)=\"toggleExplorer(Explorers.Snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n    <div class=\"button\" *ngIf=\"data.debugEnabled\" [ngClass]=\"{ 'active': activeEditor === Editors.Monaco }\"\r\n      tippy=\"Toggle Monaco\" (click)=\"toggleEditor()\">\r\n      <mat-icon>highlight</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== Explorers.Templates\" [view]=\"data.view\" [templates]=\"data.templates\"\r\n    (createTemplate)=\"createTemplate($event)\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== Explorers.Snippets\" [snippets]=\"data.explorerSnipps\"\r\n    (insertSnippet)=\"insertSnippet($event)\">\r\n  </app-code-snippets>\r\n\r\n  <app-ace-editor *ngIf=\"data.view && activeEditor === Editors.Ace\" [filename]=\"data.view.FileName\"\r\n    [ngModel]=\"data.view.Code\" (ngModelChange)=\"codeChanged($event)\" [snippets]=\"data.editorSnipps\">\r\n  </app-ace-editor>\r\n\r\n  <app-monaco-editor *ngIf=\"data.view && activeEditor === Editors.Monaco\" [filename]=\"data.view.FileName\"\r\n    [ngModel]=\"data.view.Code\" (ngModelChange)=\"codeChanged($event)\" [snippets]=\"data.editorSnipps\">\r\n  </app-monaco-editor>\r\n\r\n  <button mat-fab mat-elevation-z24 tippy=\"Click to save or CTRL + S\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { Component, NgZone, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, fromEvent, Observable, Subscription } from 'rxjs';\r\nimport { map, mergeMap, share } from 'rxjs/operators';\r\nimport { SanitizeHelper } from '../../../../edit/shared/helpers';\r\nimport { GlobalConfigService } from '../../../../edit/shared/store/ngrx-data';\r\nimport { MonacoEditorComponent } from '../monaco-editor';\r\nimport { defaultControllerName, defaultTemplateName } from '../shared/constants/file-names.constants';\r\nimport { keyItems } from '../shared/constants/session.constants';\r\nimport { EditItem, SourceItem, } from '../shared/models/edit-form.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SnackBarStackService } from '../shared/services/snack-bar-stack.service';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { CodeEditorTemplateVars, EditorOption, Editors, ExplorerOption, Explorers } from './code-editor.models';\r\nimport { Snippet, SnippetsSets } from './models/snippet.model';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss'],\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  @ViewChild(AceEditorComponent) private aceEditorRef: AceEditorComponent;\r\n  @ViewChild(MonacoEditorComponent) private monacoEditorRef: MonacoEditorComponent;\r\n\r\n  Explorers = Explorers;\r\n  activeExplorer: ExplorerOption = Explorers.Templates;\r\n  Editors = Editors;\r\n  activeEditor: EditorOption = Editors.Ace;\r\n  templateVars$: Observable<CodeEditorTemplateVars>;\r\n\r\n  private view$: BehaviorSubject<SourceView>;\r\n  private templates$: BehaviorSubject<string[]>;\r\n  private explorerSnipps$: BehaviorSubject<SnippetsSets>;\r\n  private editorSnipps$: BehaviorSubject<Snippet[]>;\r\n  private viewKey: number | string; // templateId or path\r\n  private savedCode: string;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private snackBarStack: SnackBarStackService,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n    private dialogService: DialogService,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.view$ = new BehaviorSubject(null);\r\n    this.templates$ = new BehaviorSubject(null);\r\n    this.explorerSnipps$ = new BehaviorSubject(null);\r\n    this.editorSnipps$ = new BehaviorSubject(null);\r\n\r\n    this.calculateViewKey();\r\n    this.attachListeners();\r\n\r\n    const view$ = this.sourceService.get(this.viewKey).pipe(share());\r\n    const templates$ = this.sourceService.getTemplates();\r\n    const snippets$ = view$.pipe(mergeMap(view => this.snippetsService.getSnippets(view)));\r\n    forkJoin([view$, templates$, snippets$]).subscribe(([view, templates, snippets]) => {\r\n      this.view$.next(view);\r\n      this.templates$.next(templates);\r\n      this.explorerSnipps$.next(snippets.sets);\r\n      this.editorSnipps$.next(snippets.list);\r\n\r\n      this.savedCode = this.view$.value.Code;\r\n      this.titleService.setTitle(`${this.view$.value.FileName} - Code Editor`);\r\n      this.showCodeAndEditionWarnings(view, templates);\r\n    });\r\n    const debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n    this.templateVars$ = combineLatest([this.view$, this.templates$, this.explorerSnipps$, this.editorSnipps$, debugEnabled$]).pipe(\r\n      map(([view, templates, explorerSnipps, editorSnipps, debugEnabled]) => {\r\n        const templateVars: CodeEditorTemplateVars = {\r\n          debugEnabled,\r\n          view,\r\n          templates,\r\n          explorerSnipps,\r\n          editorSnipps,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.view$.complete();\r\n    this.templates$.complete();\r\n    this.explorerSnipps$.complete();\r\n    this.editorSnipps$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  toggleExplorer(explorer: ExplorerOption): void {\r\n    this.activeExplorer = (this.activeExplorer !== explorer) ? explorer : null;\r\n  }\r\n\r\n  toggleEditor(): void {\r\n    switch (this.activeEditor) {\r\n      case Editors.Ace:\r\n        this.activeEditor = Editors.Monaco;\r\n        break;\r\n      case Editors.Monaco:\r\n        this.activeEditor = Editors.Ace;\r\n        break;\r\n      default:\r\n        this.activeEditor = Editors.Ace;\r\n    }\r\n  }\r\n\r\n  createTemplate(folder?: string): void {\r\n    let question = 'File name:';\r\n    let suggestion = defaultTemplateName;\r\n    if (folder === 'api' || folder?.startsWith('api/')) {\r\n      question = 'Controller name:';\r\n      suggestion = defaultControllerName;\r\n    }\r\n    let name = prompt(question, suggestion);\r\n    if (name === null || name.length === 0) { return; }\r\n\r\n    name = SanitizeHelper.sanitizePath(name);\r\n    if (folder != null) {\r\n      name = `${folder}/${name}`;\r\n    }\r\n    this.sourceService.createTemplate(name).subscribe(res => {\r\n      this.sourceService.getTemplates().subscribe(files => {\r\n        this.templates$.next(files);\r\n      });\r\n    });\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    if (this.aceEditorRef != null) {\r\n      this.aceEditorRef.insertSnippet(snippet);\r\n    } else if (this.monacoEditorRef != null) {\r\n      this.monacoEditorRef.insertSnippet(snippet);\r\n    }\r\n  }\r\n\r\n  codeChanged(code: string): void {\r\n    this.view$.next({ ...this.view$.value, Code: code });\r\n  }\r\n\r\n  save(): void {\r\n    this.snackBar.open('Saving...');\r\n    let codeToSave = this.view$.value.Code;\r\n    this.sourceService.save(this.viewKey, this.view$.value).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n        this.savedCode = codeToSave;\r\n        codeToSave = null;\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private calculateViewKey(): void {\r\n    // spm TODO: Move items for code-editor to the url?\r\n    const itemsRaw = sessionStorage.getItem(keyItems);\r\n    const editItems: EditItem[] | SourceItem[] = JSON.parse(itemsRaw);\r\n    const item = editItems[0];\r\n    this.viewKey = (item as EditItem).EntityId || (item as SourceItem).Path;\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(view: SourceView, files: string[]): void {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file === pathWithSlash + nameCode);\r\n    const otherEditions = files.filter(file => file.endsWith(fullName)).length - 1;\r\n\r\n    if (codeFile) {\r\n      this.snackBarStack\r\n        .add(`This template also has a code-behind file '${codeFile}'.`, 'Open')\r\n        .subscribe(() => {\r\n          this.dialogService.openCodeFile(codeFile);\r\n        });\r\n    }\r\n    if (otherEditions) {\r\n      this.snackBarStack\r\n        .add(`There are ${otherEditions} other editions of this. You may be editing an edition which is not the one you see.`, 'Help')\r\n        .subscribe(() => {\r\n          window.open('https://r.2sxc.org/polymorphism', '_blank');\r\n        });\r\n    }\r\n  }\r\n\r\n  private attachListeners(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<BeforeUnloadEvent>(window, 'beforeunload').subscribe(event => {\r\n          if (this.savedCode === this.view$.value.Code) { return; }\r\n          event.preventDefault();\r\n          event.returnValue = ''; // fix for Chrome\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').subscribe(event => {\r\n          const CTRL_S = event.keyCode === 83 && (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey);\r\n          if (!CTRL_S) { return; }\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.save(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { MonacoEditorModule } from '../monaco-editor';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { buildTranslateConfiguration, TranslateLoaderWithErrorHandling } from '../shared/translation';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { ObjectToArrayPipe } from './code-snippets/object-to-array.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { DepthPaddingPipe } from './code-templates/depth-padding.pipe';\r\nimport { SortItemsPipe } from './code-templates/order-items.pipe';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactoryCode(http: HttpClient) {\r\n  return new TranslateLoaderWithErrorHandling(http, './i18n/code-editor.', `.js?${window.sxcVersion}`);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ObjectToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n    DepthPaddingPipe,\r\n    SortItemsPipe,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    FormsModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactoryCode)),\r\n    MonacoEditorModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    DialogService,\r\n    SnippetsService,\r\n    TranslateService,\r\n  ]\r\n})\r\nexport class CodeEditorModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","export const defaultControllerName = 'MyController.cs';\r\nexport const defaultTemplateName = '_MyFile.cshtml';\r\nexport const defaultTokenName = 'MyFile.html';\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DialogTypeConstants } from '../constants/dialog-type.constants';\r\n// tslint:disable-next-line:max-line-length\r\nimport { keyApi, keyAppId, keyContentBlockId, keyDebug, keyDialog, keyExtras, keyIsShared, keyItems, keyModuleId, keyPartOfPage, keyPipelineId, keyRequestToken, keyTabId, keyUrl, keyZoneId, prefix, keyRequestTokenHeaderName } from '../constants/session.constants';\r\nimport { DialogHashParams, ExtrasParam } from '../models/dialog-url-params.model';\r\nimport { EditForm } from '../models/edit-form.model';\r\nimport { Context } from './context';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  constructor(private context: Context) { }\r\n\r\n  openCodeFile(path: string, isShared = false) {\r\n    const dialog = DialogTypeConstants.Develop;\r\n    const form: EditForm = {\r\n      items: [{ Path: path }]\r\n    };\r\n\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyDialog, dialog),\r\n      ...this.buildHashParam(keyIsShared, isShared.toString()),\r\n      ...this.buildHashParam(keyItems, JSON.stringify(form.items)),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openQueryDesigner(queryId: number) {\r\n    const dialog = DialogTypeConstants.PipelineDesigner;\r\n    const form: EditForm = {\r\n      items: [{ EntityId: queryId }],\r\n    };\r\n\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyDialog, dialog),\r\n      ...this.buildHashParam(keyPipelineId, queryId.toString()),\r\n      ...this.buildHashParam(keyItems, JSON.stringify(form.items)),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openAppAdministration(zoneId: number, appId: number, tab?: string, scope?: string) {\r\n    const extras: ExtrasParam = tab && scope ? { tab, scope } : null;\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, zoneId.toString()),\r\n      ...this.buildHashParam(keyAppId, appId.toString()),\r\n      ...this.buildHashParam(keyDialog, DialogTypeConstants.App),\r\n      ...(extras ? this.buildHashParam(keyExtras, JSON.stringify(extras)) : ''),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  /** A lot of the link is identical when opening the admin-dialogs in a new window */\r\n  private buildSharedHashParams() {\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, this.context.zoneId.toString()),\r\n      ...this.buildHashParam(keyAppId, this.context.appId.toString()),\r\n      ...this.buildHashParam(keyTabId, this.context.tabId.toString()),\r\n      ...this.buildHashParam(keyModuleId, this.context.moduleId.toString()),\r\n      ...this.buildHashParam(keyContentBlockId, this.context.contentBlockId.toString()),\r\n      ...this.buildHashParam(keyPartOfPage),\r\n      ...this.buildHashParam(keyRequestToken),\r\n      ...this.buildHashParam(keyRequestTokenHeaderName), // #RvtHeaderName - New in 12.04\r\n      ...this.buildHashParam(keyApi),\r\n      ...(sessionStorage.getItem(keyDebug) ? this.buildHashParam(keyDebug) : {}),\r\n    };\r\n    return hashParams;\r\n  }\r\n\r\n  /** Encodes param if necessary */\r\n  private buildHashParam(key: string, value?: string) {\r\n    const rawKey = key.replace(prefix, '');\r\n    const valueTemp = (value != null) ? value : sessionStorage.getItem(key);\r\n    const rawValue = encodeURIComponent(valueTemp);\r\n    const hashParam: DialogHashParams = { [rawKey]: rawValue };\r\n    return hashParam;\r\n  }\r\n\r\n  private buildFullUrl(hashParams: DialogHashParams) {\r\n    const oldHref = sessionStorage.getItem(keyUrl);\r\n    const oldUrl = new URL(oldHref);\r\n    const newHref = oldUrl.origin + oldUrl.pathname + oldUrl.search;\r\n\r\n    const allHashParams: DialogHashParams = {\r\n      ...this.buildSharedHashParams(),\r\n      ...hashParams,\r\n    };\r\n    const hashUrl = Object.entries(allHashParams).reduce((acc, [key, value]) => `${acc}&${key}=${value}`, '').replace('&', '#');\r\n    return newHref + hashUrl;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}