{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/content-types.service.ts","./projects/ng-dialogs/src/app/shared/components/dialog-entry/dialog-entry.component.ts","./projects/ng-dialogs/src/app/shared/helpers/file-to-base64.helper.ts"],"names":["http","context","dnnContext","getDialogSettings","this","get","$2sxc","apiUrl","webApiDialogRoot","params","appid","appId","toString","AppDialogConfigService","webApiTypeRoot","name","retrieveContentType","staticName","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","dialog","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","data","Error","id","getComponent","then","component","initContext","init","dialogRef","open","autoFocus","backdropClass","closeOnNavigation","panelClass","panelSize","showScrollbar","position","top","afterClosed","subscribe","navRes","navigateUrl","pathFromRoot","length","window","parent","totalPopup","close","error","navigate","url","relativeTo","markForCheck","ngOnDestroy","DialogEntryComponent","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","readAsText"],"mappings":"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","file":"projects_ng-dialogs_src_app_app-administration_services_app-dialog-config_service_ts-projects-8fb264.13d775401f1019437ff8.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings() {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { NavigateFormResult } from '../../../../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Record<string, any>;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      if (dialogConfig.initContext) {\r\n        this.context.init(this.route);\r\n      }\r\n\r\n      this.dialogRef = this.dialog.open(component, {\r\n        autoFocus: false,\r\n        backdropClass: 'dialog-backdrop',\r\n        closeOnNavigation: false,\r\n        data: this.dialogData,\r\n        panelClass: [\r\n          'dialog-panel',\r\n          `dialog-panel-${dialogConfig.panelSize}`,\r\n          dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n          ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n        ],\r\n        // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n        // Real top margin is overwritten in css e.g. dialog-panel-large\r\n        position: { top: '0' },\r\n        viewContainerRef: this.viewContainerRef,\r\n      });\r\n\r\n      this.dialogRef.afterClosed().pipe(take(1)).subscribe((data: any) => {\r\n        consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n        const navRes = data as NavigateFormResult;\r\n        if (navRes?.navigateUrl != null) {\r\n          this.router.navigate([navRes.navigateUrl]);\r\n          return;\r\n        }\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            window.parent.$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      });\r\n\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///"}