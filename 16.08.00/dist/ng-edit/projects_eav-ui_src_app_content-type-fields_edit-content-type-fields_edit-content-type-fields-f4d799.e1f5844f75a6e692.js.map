{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fields-f4d799.e1f5844f75a6e692.js","mappings":"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","names":["arrReducer","arr","value","push","fieldNamePattern","fieldNameError","dataTypeLabels","Boolean","label","calculateTypeLabel","DataTypeConstants","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","ReservedNamesValidatorDirective","_class","constructor","this","reservedNames","validate","control","controlValue","toLocaleLowerCase","reservedName","Object","keys","find","name","selectors","inputs","features","i0","provide","NG_VALIDATORS","useExisting","multi","field_r19","ContentType","Name","field_r20","StaticName","field_r21","Type","field_r22","_r24","$implicit","ctx_r23","selectField","ctx_r30","_r28","errors","AddSharingFieldsComponent_td_32_ng_container_6_app_field_hint_1_Template","AddSharingFieldsComponent_td_32_ng_container_6_app_field_hint_2_Template","pattern","$event","item_r26","_r33","newName","AddSharingFieldsComponent_td_32_ng_container_6_Template","ctx_r12","i_r27","item_r34","field","item_r35","_r37","ctx_r36","removeField","AddSharingFieldsComponent","BaseSubsinkComponent","dialogData","dialogRef","contentTypesFieldsService","snackBar","featuresService","dialog","viewContainerRef","changeDetectorRef","super","hostClass","displayedShareableFieldsColumns","displayedSelectedFieldsColumns","shareableFields","MatTableDataSource","selectedFields","saving$","BehaviorSubject","disableClose","subscription","add","backdropClick","subscribe","form","dirty","data","length","confirm","closeDialog","ngOnInit","getShareableFields","getReservedNames","existingFields","forEach","ngOnDestroy","complete","splice","indexOf","save","isEnabled$","FeatureNames","FieldShareConfigManagement","pipe","take","isEnabled","console","log","FeatureComponentBase","openDialog","close","MAT_DIALOG_DATA","i1","i2","i3","i4","viewQuery","rf","ctx","NgForm","AddSharingFieldsComponent_th_13_Template","AddSharingFieldsComponent_td_14_Template","AddSharingFieldsComponent_th_16_Template","AddSharingFieldsComponent_td_17_Template","AddSharingFieldsComponent_th_19_Template","AddSharingFieldsComponent_td_20_Template","AddSharingFieldsComponent_th_22_Template","AddSharingFieldsComponent_td_23_Template","AddSharingFieldsComponent_tr_24_Template","AddSharingFieldsComponent_tr_25_Template","AddSharingFieldsComponent_th_31_Template","AddSharingFieldsComponent_td_32_Template","AddSharingFieldsComponent_th_34_Template","AddSharingFieldsComponent_td_35_Template","AddSharingFieldsComponent_th_37_Template","AddSharingFieldsComponent_td_38_Template","AddSharingFieldsComponent_tr_39_Template","AddSharingFieldsComponent_tr_40_Template","_r10","valid","ctx_r13","_r9","EditContentTypeFieldsComponent_form_6_div_3_ng_container_7_app_field_hint_1_Template","EditContentTypeFieldsComponent_form_6_div_3_ng_container_7_app_field_hint_2_Template","dataType_r15","icon","option_r16","EditContentTypeFieldsComponent_form_6_div_3_mat_option_31_mat_icon_4_Template","inputType","_c1","isObsolete","field_r7","_r20","EditContentTypeFieldsComponent_form_6_div_3_ng_container_7_Template","i_r8","index","ctx_r21","filterInputTypeOptions","resetInputType","calculateHints","EditContentTypeFieldsComponent_form_6_div_3_mat_option_18_Template","InputType","EditContentTypeFieldsComponent_form_6_div_3_mat_option_31_Template","ctx_r5","editMode","touched","findIcon","findLabel","dataTypes","dataTypeHints","tmp_16_0","getInputTypeOption","tmp_17_0","filteredInputTypeOptions","inputTypeHints","_r26","ctx_r25","addSharedField","ctx_r27","EditContentTypeFieldsComponent_form_6_div_3_Template","EditContentTypeFieldsComponent_form_6_button_5_Template","ctx_r29","ctx_r3","fields","debugEnabled$","_r4","EditContentTypeFieldsComponent","route","contentTypesService","globalConfigService","calculateTypeIcon","loading$","getDebugEnabled$","event","snapshot","paramMap","get","contentTypeStaticName","contentType$","retrieveContentType","share","fields$","switchMap","contentType","getFields","dataTypes$","typeListRetrieve","map","rawDataTypes","calculateDataTypes","rawDataType","inputTypes$","getInputTypesList","reservedNames$","forkJoin","inputTypes","inputTypeOptions","editFieldId","parseInt","editField","Id","i","InputTypeConstants","StringDefault","IsTitle","SortOrder","next","filter","option","dataType","defaultInputType","DefaultSuffix","some","selectedDataType","selectedInputType","inputTypeOption","obsoleteMessage","inputName","open","autoFocus","width","rename","duration","updateInputType","of","concatMap","catchError","error","toArray","operate","source","subscriber","reduce","accumulator","seed","scanInternals","arguments","responses","i5","i6","EditContentTypeFieldsComponent_ng_container_3_Template","EditContentTypeFieldsComponent_ng_container_4_Template","EditContentTypeFieldsComponent_ng_container_5_Template","EditContentTypeFieldsComponent_form_6_Template","undefined","FeatureIconIndicatorComponent","decls","vars","consts","template","FeatureIconIndicatorComponent_mat_icon_0_Template","show$","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","id_r4","_r6","ngIf","copyToClipboard","link_r7","ctx_r8","findOutMore","FeatureInfoDialogComponent_mat_card_0_div_15_Template","FeatureInfoDialogComponent_mat_card_0_button_17_Template","_r11","ctx_r10","vm_r1","feature","Description","Enabled","NameId","Link","FeatureInfoDialogComponent","featureDetailService","viewModel$","combineLatest","getFeatureDetails","text","link","window","FeatureInfoDialogComponent_mat_card_0_Template","featureNameId","featureNameId$","showIf","showIf$","feature$","featName","get$","feat","featureId","markForCheck","FieldHintComponent_mat_hint_1_ng_container_1_Template","_r2","FieldHintComponent_mat_error_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","ngContentSelectors","FieldHintComponent_mat_hint_1_Template","FieldHintComponent_mat_error_2_Template","FieldHintComponent_ng_template_3_Template","_c0","ToggleDebugDirective","onClick","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","hostBindings","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/operators/toArray.js","./projects/eav-ui/src/app/app-administration/constants/field-name.patterns.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/reserved-names.directive.ts","./projects/eav-ui/src/app/content-type-fields/add-sharing-fields/add-sharing-fields.component.html","./projects/eav-ui/src/app/content-type-fields/add-sharing-fields/add-sharing-fields.component.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./projects/eav-ui/src/app/features/feature-icon-indicator/feature-icon-indicator.component.html","./projects/eav-ui/src/app/features/feature-icon-indicator/feature-icon-indicator.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { reduce } from './reduce';\nimport { operate } from '../util/lift';\nconst arrReducer = (arr, value) => (arr.push(value), arr);\nexport function toArray() {\n    return operate((source, subscriber) => {\n        reduce(arrReducer, [])(source).subscribe(subscriber);\n    });\n}\n","export const fieldNamePattern = /^[A-Za-z][A-Za-z0-9]+$/;\r\nexport const fieldNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n","import { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: calculateTypeLabel(DataTypeConstants.Boolean), description: 'Yes/no or true/false values' },\r\n  Custom: { label: calculateTypeLabel(DataTypeConstants.Custom), description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: calculateTypeLabel(DataTypeConstants.DateTime), description: 'For date, time or combined values' },\r\n  Empty: { label: calculateTypeLabel(DataTypeConstants.Empty), description: 'Use to structure your form' },\r\n  Entity: { label: calculateTypeLabel(DataTypeConstants.Entity), description: 'One or more other content-items' },\r\n  Hyperlink: { label: calculateTypeLabel(DataTypeConstants.Hyperlink), description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: calculateTypeLabel(DataTypeConstants.Number), description: 'Any kind of number' },\r\n  String: { label: calculateTypeLabel(DataTypeConstants.String), description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\n@Directive({\r\n  selector: '[appReservedNames]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: ReservedNamesValidatorDirective, multi: true }],\r\n})\r\nexport class ReservedNamesValidatorDirective implements Validator {\r\n  @Input('appReservedNames') reservedNames: ReservedNames = {};\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!control.value) { return null; }\r\n\r\n    const controlValue = (control.value as string).toLocaleLowerCase();\r\n    const reservedName = Object.keys(this.reservedNames).find(name => name.toLocaleLowerCase() === controlValue);\r\n    return reservedName ? { reservedNames: this.reservedNames[reservedName] } : null;\r\n  }\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ \"SharingOrInheriting.TitleAddFieldsWhichInherit\" | translate}}\r\n    </div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <span>{{ \"SharingOrInheriting.PickFieldsToInheritFrom\" | translate }}</span>\r\n    <div class=\"eav-tables-div\">\r\n      <mat-card class=\"eav-table-div-left\">\r\n        <table mat-table [dataSource]=\"shareableFields\" class=\"eav-fields-table\">\r\n          <ng-container matColumnDef=\"contentType\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.ContentType.Name}} </td>\r\n          </ng-container>\r\n          \r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.StaticName}} </td>\r\n          </ng-container>\r\n          \r\n          <ng-container matColumnDef=\"type\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.Type}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"share\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Share</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                (click)=\"selectField(field)\">Select</button> </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedShareableFieldsColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedShareableFieldsColumns;\"></tr>\r\n        </table>\r\n      </mat-card>\r\n\r\n      <mat-card class=\"eav-table-div-right\">\r\n        <form #ngForm=\"ngForm\">\r\n          <table mat-table [dataSource]=\"selectedFields\" class=\"eav-fields-table\">\r\n            <ng-container matColumnDef=\"newName\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>New Name</b> </th>\r\n              <td mat-cell *matCellDef=\"let item; index as i\" class=\"eav-table-cell\">\r\n                <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n                  <mat-label>New Name</mat-label>\r\n                  <input matInput [pattern]=\"fieldNamePattern\" [(ngModel)]=\"item.newName\"\r\n                    [name]=\"'StaticName' + i\" #newName=\"ngModel\" [appReservedNames]=\"reservedNames\">\r\n                </mat-form-field>\r\n                <ng-container *ngIf=\"newName.errors\">\r\n                  <app-field-hint *ngIf=\"newName.errors.pattern\" [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  <app-field-hint *ngIf=\"newName.errors.reservedNames\" [isError]=\"true\">\r\n                    {{ newName.errors.reservedNames }}\r\n                  </app-field-hint>\r\n                </ng-container>\r\n              </td>\r\n            </ng-container>\r\n            \r\n            <ng-container matColumnDef=\"source\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Source</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" style=\"word-break:break-all;\" class=\"eav-table-cell\"> {{ item.field.ContentType.Name }}/{{ item.field.StaticName }} ({{ item.field.Type }}) </td>\r\n            </ng-container>\r\n            \r\n            <ng-container matColumnDef=\"remove\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Remove</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\" (click)=\"removeField(item)\">Remove</button> </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedSelectedFieldsColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedSelectedFieldsColumns;\"></tr>\r\n          </table>\r\n        </form>\r\n      </mat-card>\r\n    </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || selectedFields.data.length == 0 || (saving$ | async)\" (click)=\"save()\">\r\n      <div class=\"eav-button-feature\">\r\n        <span>Save</span>\r\n        <app-feature-icon-indicator class=\"eav-button-feature-icon\"\r\n          [featureNameId]=\"'FieldShareConfigManagement'\"></app-feature-icon-indicator>\r\n      </div>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>","import { ChangeDetectorRef, Component, HostBinding, Inject, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Field } from '../models/field.model';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, catchError, concatMap, filter, of, take, toArray } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureComponentBase } from '../../features/shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-add-sharing-fields',\r\n  templateUrl: './add-sharing-fields.component.html',\r\n  styleUrls: ['./add-sharing-fields.component.scss']\r\n})\r\nexport class AddSharingFieldsComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n  \r\n  displayedShareableFieldsColumns: string[] = ['contentType', 'name', 'type', 'share'];\r\n  displayedSelectedFieldsColumns: string[] = ['newName', 'source', 'remove'];\r\n\r\n  shareableFields = new MatTableDataSource<Field>([]);\r\n  selectedFields = new MatTableDataSource<NewNameField>([]);\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  reservedNames: ReservedNames;\r\n\r\n  saving$ = new BehaviorSubject(false);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: { contentType: ContentType, existingFields: Field[] },\r\n    private dialogRef: MatDialogRef<AddSharingFieldsComponent>,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n    // All this is just for the feature dialog\r\n    private featuresService: FeaturesService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n    this.dialogRef.disableClose = true;\r\n    this.subscription.add(\r\n      this.dialogRef.backdropClick().subscribe(() => {\r\n        if (this.form.dirty || this.selectedFields.data.length > 0) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) { return; }\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    // TODO: @SDV Try to find a better way to do this\r\n    this.subscription.add(this.contentTypesFieldsService.getShareableFields().subscribe(shareableFields => {\r\n      this.shareableFields.data = shareableFields;\r\n    }));\r\n    this.subscription.add(this.contentTypesFieldsService.getReservedNames().subscribe(reservedNames => { \r\n      const existingFields: ReservedNames = {};\r\n      this.dialogData.existingFields.forEach(field => {\r\n        existingFields[field.StaticName] = 'Field with this name already exists';\r\n      });\r\n      this.reservedNames = {\r\n        ...reservedNames,\r\n        ...existingFields,\r\n      };\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.saving$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  // TODO: @SDV Try to find a better way to do this\r\n  selectField(field: Field) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.push({ newName: field.StaticName, field });\r\n    this.selectedFields.data = selectedFields;\r\n\r\n  }\r\n\r\n  // TODO: @SDV Try to find a better way to do this\r\n  removeField(field: NewNameField) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.splice(selectedFields.indexOf(field), 1);\r\n    this.selectedFields.data = selectedFields;\r\n  }\r\n\r\n  // When API gets created we will need to send the selected fields to the API\r\n  save() {\r\n    this.featuresService.isEnabled$(FeatureNames.FieldShareConfigManagement).pipe(\r\n      take(1),\r\n    ).subscribe(isEnabled => {\r\n      if (!isEnabled) {\r\n        FeatureComponentBase.openDialog(this.dialog, FeatureNames.FieldShareConfigManagement, this.viewContainerRef, this.changeDetectorRef);\r\n      } else {\r\n        console.log(\"SDV - API not implemented yet\", this.selectedFields.data);\r\n        this.closeDialog();\r\n        // this.saving$.next(true);\r\n        // this.snackBar.open('Saving...');\r\n        // of(...this.selectedFields.data).pipe(\r\n        //   filter(inheritField => !!inheritField.newName),\r\n        //   concatMap(inheritField =>\r\n        //     // this.contentTypesFieldsService.add(field, this.contentType.Id).pipe(catchError(error => of(null)))\r\n        //     this.contentTypesFieldsService.addInheritedField(\r\n        //       this.dialogData.contentType.Id,\r\n        //       inheritField.field.ContentType.Name,\r\n        //       inheritField.field.Guid,\r\n        //       inheritField.newName\r\n        //     ).pipe(catchError(error => of(null)))\r\n        //   ),\r\n        //   toArray(),\r\n        // ).subscribe(responses => {\r\n        //   this.saving$.next(false);\r\n        //   this.snackBar.open('Saved', null, { duration: 2000 });\r\n        //   this.closeDialog();\r\n        // });\r\n       }\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\nexport interface AppSharingFieldsViewModel {\r\n  shareableFields: Field[];\r\n  selectedFields: Field[];\r\n}\r\n\r\ninterface NewNameField {\r\n  newName: string;\r\n  field: Field;\r\n}","<div class=\"eav-dialog eav-no-scrollbar\" appToggleDebug>\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      <ng-container *ngIf=\"editMode === undefined\">Fields</ng-container>\r\n      <ng-container *ngIf=\"editMode === null\">Add Fields</ng-container>\r\n      <ng-container *ngIf=\"editMode != null\">Edit Field</ng-container>\r\n    </div>\r\n  </div>\r\n  <form #ngForm=\"ngForm\" *ngIf=\"(loading$ | async) === false\" (ngSubmit)=\"save()\">\r\n    <div class=\"eav-dialog-content\">\r\n      <div class=\"eav-row-container\" *ngFor=\"let field of fields; index as i\">\r\n        <div class=\"eav-edit-input\">\r\n          <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n            <mat-label>Name</mat-label>\r\n            <input matInput [pattern]=\"fieldNamePattern\" [appReservedNames]=\"reservedNames\" [(ngModel)]=\"field.StaticName\"\r\n              [name]=\"'StaticName' + i\" #staticName=\"ngModel\" [disabled]=\"editMode === 'inputType'\">\r\n          </mat-form-field>\r\n          <ng-container *ngIf=\"staticName.touched && staticName.errors\">\r\n            <app-field-hint *ngIf=\"staticName.errors.pattern\" [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n            <app-field-hint *ngIf=\"staticName.errors.reservedNames\" [isError]=\"true\">\r\n              {{ staticName.errors.reservedNames }}\r\n            </app-field-hint>\r\n          </ng-container>\r\n        </div>\r\n  \r\n        <div class=\"eav-edit-input\">\r\n          <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n            <mat-label>Data Type</mat-label>\r\n            <mat-select (selectionChange)=\"filterInputTypeOptions(i); resetInputType(i); calculateHints(i)\"\r\n              [(ngModel)]=\"field.Type\" [name]=\"'Type' + i\" [disabled]=\"editMode != null\">\r\n              <mat-select-trigger>\r\n                <mat-icon class=\"eav-type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n                <span>{{ findLabel(field.Type) }}</span>\r\n              </mat-select-trigger>\r\n              <mat-option *ngFor=\"let dataType of dataTypes\" [value]=\"dataType.name\">\r\n                <mat-icon class=\"eav-type-icon\">{{ dataType.icon }}</mat-icon>\r\n                <span>{{ dataType.label }}</span>\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n        </div>\r\n  \r\n        <div class=\"eav-edit-input\">\r\n          <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n            <mat-label>Input Type</mat-label>\r\n            <mat-select (selectionChange)=\"calculateHints(i)\" [(ngModel)]=\"field.InputType\" [name]=\"'InputType' + i\"\r\n              [disabled]=\"editMode === 'name'\">\r\n              <mat-select-trigger>\r\n                <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n                <mat-icon class=\"eav-input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n              </mat-select-trigger>\r\n              <mat-option *ngFor=\"let option of filteredInputTypeOptions[i]\" [value]=\"option.inputType\"\r\n                [ngClass]=\"{ 'eav-input-obsolete': option.isObsolete }\">\r\n                <!-- div is needed here because <mat-option> by default puts mat-icon on the first place if it exists -->\r\n                <div>\r\n                  <span>{{ option.label }}</span>\r\n                  <mat-icon class=\"eav-input-icon\" *ngIf=\"option.icon\">{{ option.icon }}</mat-icon>\r\n                </div>\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!--\r\n      TODO: @SDV\r\n      - create a button to the left which is only visible in debug mode!\r\n        - Label: Add Shared Field (BETA) - put it in i18n\r\n      - on click, open a dialog\r\n        - Title: \"Add Fields which Inherits Configuration\" (i18n)\r\n        - Content: \"Pick original fields which we'll inherit from\" (i18n)\r\n        - The screen should now be split into 2 columns. Both columns should scroll independently\r\n          - Left column: a list of all content-types/fields can be selected\r\n            - get from the api fields/GetSharedFields\r\n            - show a table with these columns\r\n              - Content Type (from the new Field.ContentType.Name)\r\n              - Field (Field.Name)\r\n              - Type (Field.Type)\r\n            - On click, an entry is added to the table in the right column\r\n          - Right column: a list of all fields which were selected, and should be added\r\n            - show a table with these columns\r\n              - Name (input field - initial value is Field.Name, but editable)\r\n              - Source (basically [ContentType.Name]/[Field.Name]([Field.Type]))\r\n              - Remove button\r\n        - At the end the Cancel / Ok button\r\n        - When OK is pressed, nothing happens yet\r\n    -->\r\n    <mat-dialog-actions>\r\n      <button mat-raised-button *ngIf=\"(debugEnabled$ | async)\" type=\"button\" (click)=\"addSharedField()\">{{ \"SharingOrInheriting.AddSharedField\" | translate }}</button>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || (saving$ | async)\">\r\n        Save\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n</div>\r\n\r\n","import { Component, HostBinding, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, catchError, concatMap, filter, forkJoin, map, of, share, Subscription, switchMap, toArray } from 'rxjs';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { InputTypeStrict, InputTypeConstants } from '../constants/input-type.constants';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { AddSharingFieldsComponent } from '../add-sharing-fields/add-sharing-fields.component';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n})\r\nexport class EditContentTypeFieldsComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  fields: Partial<Field>[] = [];\r\n  existingFields: Field[] = [];\r\n  reservedNames: ReservedNames;\r\n  editMode: 'name' | 'inputType';\r\n  dataTypes: DataType[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  findLabel = calculateTypeLabel;\r\n  loading$ = new BehaviorSubject(true);\r\n  saving$ = new BehaviorSubject(false);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  private contentType: ContentType;\r\n  private inputTypeOptions: FieldInputTypeOption[];\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private globalConfigService: GlobalConfigService,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n  ) {\r\n    super();\r\n    this.dialogRef.disableClose = true;\r\n    this.subscription.add(\r\n      this.dialogRef.backdropClick().subscribe(event => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) { return; }\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n    const contentType$ = this.contentTypesService.retrieveContentType(contentTypeStaticName).pipe(share());\r\n    const fields$ = contentType$.pipe(switchMap(contentType => this.contentTypesFieldsService.getFields(contentType.StaticName)));\r\n    const dataTypes$ = this.contentTypesFieldsService.typeListRetrieve().pipe(map(rawDataTypes => calculateDataTypes(rawDataTypes)));\r\n    const inputTypes$ = this.contentTypesFieldsService.getInputTypesList();\r\n    const reservedNames$ = this.contentTypesFieldsService.getReservedNames();\r\n\r\n    forkJoin([contentType$, fields$, dataTypes$, inputTypes$, reservedNames$]).subscribe(\r\n      ([contentType, fields, dataTypes, inputTypes, reservedNames]) => {\r\n        this.contentType = contentType;\r\n        this.dataTypes = dataTypes;\r\n        this.inputTypeOptions = inputTypes;\r\n        this.existingFields = fields;\r\n\r\n        const existingFields: ReservedNames = {};\r\n        fields.forEach(field => {\r\n          existingFields[field.StaticName] = 'Field with this name already exists';\r\n        });\r\n        this.reservedNames = {\r\n          ...reservedNames,\r\n          ...existingFields,\r\n        };\r\n\r\n        if (this.editMode != null) {\r\n          const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n          const editField = fields.find(field => field.Id === editFieldId);\r\n          if (this.editMode === 'name') {\r\n            delete this.reservedNames[editField.StaticName];\r\n          }\r\n          this.fields.push(editField);\r\n        } else {\r\n          for (let i = 1; i <= 8; i++) {\r\n            this.fields.push({\r\n              Id: 0,\r\n              Type: DataTypeConstants.String,\r\n              InputType: InputTypeConstants.StringDefault,\r\n              StaticName: '',\r\n              IsTitle: fields.length === 0,\r\n              SortOrder: fields.length + i,\r\n            });\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < this.fields.length; i++) {\r\n          this.filterInputTypeOptions(i);\r\n          this.calculateHints(i);\r\n        }\r\n        this.loading$.next(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.saving$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filterInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.inputTypeOptions.filter(\r\n      option => option.dataType === this.fields[index].Type.toLocaleLowerCase()\r\n    );\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    let defaultInputType = this.fields[index].Type.toLocaleLowerCase() + InputTypeConstants.DefaultSuffix as InputTypeStrict;\r\n    const defaultExists = this.filteredInputTypeOptions[index].some(option => option.inputType === defaultInputType);\r\n    if (!defaultExists) {\r\n      defaultInputType = this.filteredInputTypeOptions[index][0].inputType;\r\n    }\r\n    this.fields[index].InputType = defaultInputType;\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType?.description ?? '';\r\n    this.inputTypeHints[index] = selectedInputType?.isObsolete\r\n      ? `OBSOLETE - ${selectedInputType.obsoleteMessage}`\r\n      : selectedInputType?.description ?? '';\r\n  }\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.inputTypeOptions.find(option => option.inputType === inputName);\r\n  }\r\n\r\n  addSharedField() { \r\n    this.dialog.open(AddSharingFieldsComponent, {\r\n      autoFocus: false,\r\n      width: '1600px',\r\n      data: { contentType: this.contentType, existingFields: this.existingFields }\r\n    });\r\n  }\r\n\r\n  save() {\r\n    this.saving$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    if (this.editMode != null) {\r\n      const field = this.fields[0];\r\n      if (this.editMode === 'name') {\r\n        this.contentTypesFieldsService.rename(field.Id, this.contentType.Id, field.StaticName).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      } else if (this.editMode === 'inputType') {\r\n        this.contentTypesFieldsService.updateInputType(field.Id, field.StaticName, field.InputType).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      }\r\n    } else {\r\n      of(...this.fields).pipe(\r\n        filter(field => !!field.StaticName),\r\n        concatMap(field =>\r\n          this.contentTypesFieldsService.add(field, this.contentType.Id).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(responses => {\r\n        this.saving$.next(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","<mat-icon *ngIf=\"show$ | async\" [tippy]=\"'Features.NotActivated' | translate\">diamond</mat-icon>","import { ChangeDetectorRef, Component, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-feature-icon-indicator',\r\n  templateUrl: './feature-icon-indicator.component.html',\r\n  styleUrls: ['./feature-icon-indicator.component.scss']\r\n})\r\nexport class FeatureIconIndicatorComponent extends FeatureComponentBase /* implements OnInit */ {\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef, featuresService);\r\n  }\r\n\r\n  // ngOnInit(): void {\r\n  //   super.ngOnInit();\r\n  // }\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n};\r\n","<mat-card *ngIf=\"viewModel$ | async as vm\">\r\n  <mat-card-header>\r\n    <mat-card-title>{{ vm.feature.Name }}</mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <p [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n    <div class=\"eav-info-row\">\r\n      <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n      <div class=\"eav-info-row__value\">\r\n        <span>{{ (vm.feature.Enabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"eav-info-row\" *ngIf=\"vm.feature.NameId as id\">\r\n      <div class=\"eav-info-row__label\">ID:</div>\r\n      <div class=\"eav-info-row__value eav_click\">\r\n        <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n  <mat-card-actions align=\"end\">\r\n    <button *ngIf=\"vm.feature.Link as link\" mat-raised-button color=\"accent\"\r\n      class=\"eav-card-action-button\" (click)=\"findOutMore(link)\">\r\n      <mat-icon>open_in_new</mat-icon>\r\n      {{ \"Features.FindOutMore\" | translate }}\r\n    </button>\r\n    <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n      {{ \"Features.Close\" | translate }}\r\n    </button>\r\n  </mat-card-actions>\r\n</mat-card>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.Enabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      width: '400px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[0,8]}