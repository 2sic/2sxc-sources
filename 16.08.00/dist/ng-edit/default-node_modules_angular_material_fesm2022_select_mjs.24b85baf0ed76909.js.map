{"version":3,"file":"default-node_modules_angular_material_fesm2022_select_mjs.24b85baf0ed76909.js","mappings":"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","names":["_c0","_c1","_class3_span_4_Template","rf","ctx","i0","ctx_r2","placeholder","_class3_span_5_span_1_Template","ctx_r5","triggerValue","_class3_span_5_ng_content_2_Template","_class3_span_5_Template","ctx_r3","customTrigger","_class3_ng_template_10_Template","_r9","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","ctx_r10","_handleKeydown","ctx_r4","_getPanelTheme","panelClass","id","multiple","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","opacity","transform","animate","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","this","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","Subject","_MatSelectBase","_class","focused","_focused","_panelOpen","_placeholder","required","_required","control","hasValidator","Validators","coerceBooleanProperty","_multiple","disableOptionCentering","_disableOptionCentering","compareWith","_compareWith","fn","_selectionModel","_initializeSelection","_value","newValue","_assignValue","_onChange","typeaheadDebounceInterval","_typeaheadDebounceInterval","coerceNumberProperty","_id","_uid","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","super","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","controlType","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","map","option","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","_trackedModal","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","userAriaDescribedBy","_keyManager","withTypeAhead","ngOnDestroy","destroy","complete","_clearFromModal","toggle","close","open","_canOpen","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","_skipPredicate","item","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","firstEnabledOptionIndex","index","length","get","labelId","getLabelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","t","i1","i2","i3","i4","MAT_FORM_FIELD","i5","ɵdir","type","viewQuery","CdkConnectedOverlay","_t","first","inputs","errorStateMatcher","outputs","features","MatSelectTrigger","_class2","selectors","useExisting","MatSelect","_class3","arguments","panelWidth","_positions","originX","originY","overlayX","overlayY","_hideSingleSelectionIndicator","hideSingleSelectionIndicator","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","getConnectedOverlayOrigin","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","preferredOrigin","CdkOverlayOrigin","getBoundingClientRect","width","_syncParentProperties","ɵ_class3_BaseFactory","ɵcmp","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","hostAttrs","hostVars","hostBindings","toString","errorState","disableRipple","exportAs","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","_r0","dependencies","i7","i8","styles","encapsulation","data","animation","changeDetection","MatSelectModule","_class4","ɵmod","ɵinj","providers","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._applyModalPanelOwnership();\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    _skipPredicate(item) {\n        return item.disabled;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Width of the panel. If set to `auto`, the panel will match the trigger width.\n         * If set to null or an empty string, the panel will grow to match the longest option's text.\n         */\n        this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n            ? this._defaultOptions.panelWidth\n            : 'auto';\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n    }\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    open() {\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        super.open();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    close() {\n        super.close();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", panelWidth: \"panelWidth\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\", \"ngSkipHydration\": \"\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        'ngSkipHydration': '',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], panelWidth: [{\n                type: Input\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"x_google_ignoreList":[0]}