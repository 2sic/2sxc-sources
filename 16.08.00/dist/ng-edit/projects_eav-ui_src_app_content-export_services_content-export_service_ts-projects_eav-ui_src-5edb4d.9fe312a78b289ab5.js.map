{"version":3,"file":"projects_eav-ui_src_app_content-export_services_content-export_service_ts-projects_eav-ui_src-5edb4d.9fe312a78b289ab5.js","mappings":"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","names":["ContentExportService","_class","constructor","context","dnnContext","this","exportContent","values","selectedIds","selectedIdsString","join","url","$2sxc","http","apiUrl","webApiEntityRoot","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","webApiTypeRoot","exportEntity","id","prefix","metadata","i0","i1","i2","factory","ɵfac","ContentItemsService","getAll","get","webApiEntityList","params","toString","contentType","getColumns","webApiFieldsAll","staticName","importItem","file","from","toBase64","pipe","switchMap","fileBase64","post","AppId","ContentBase64","map","success","Success","Messages","i3","EntitiesService","create","entity","zoneId","update","entityId","delete","type","tryForce","force","webApiFieldsRoot","webApiFieldsGetShared","ContentTypesFieldsService","name","typeListRetrieve","appid","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","console","log","share","inherit","inheritMetadataOf","reOrder","idArray","contentTypeId","Id","order","JSON","stringify","setTitle","item","rename","fieldId","IsTitle","Error","add","newField","ContentTypeId","StaticName","Index","SortOrder","updateInputType","field","GoToMetadata","getRoutes","defaultRoute","path","loadChildren","Promise","all","__webpack_require__","e","then","bind","m","MetadataModule","data","title","getUrl","targetType","keyType","key","dialogTitle","encodeURIComponent","getUrlApp","eavConstants","app","getUrlAttribute","attribute","getUrlContentType","getUrlEntity","guid","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","nextId","_MatBadgeBase","mixinDisabled","BADGE_CONTENT_CLASS","MatBadge","color","_color","value","_setColor","overlap","_overlap","val","coerceBooleanProperty","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateDescription","hidden","_hidden","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","super","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","t","ANIMATION_MODULE_TYPE","ɵdir","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","disabled","inputs","features","MatBadgeModule","_class2","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-export/services/content-export.service.ts","./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/content-items/services/entities.service.ts","./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/metadata/go-to-metadata.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { ItemInListIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { InputTypeStrict } from '../constants/input-type.constants';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString() },\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString(), attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    console.log(\"SDV - addInheritedField API not implemented yet\", targetContentTypeId, sourceContentTypeStaticName, sourceFieldGuid, newName);\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToMetadata {\r\n\r\n  static getRoutes(): Route[] {\r\n    const defaultRoute: Route = {\r\n      path: 'metadata/:targetType/:keyType/:key',\r\n      loadChildren: () => import('./metadata.module').then(m => m.MetadataModule),\r\n      data: { title: 'Metadata' },\r\n    };\r\n    const routes: Route[] = [\r\n      defaultRoute,\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/contentType/:contentTypeStaticName`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title/contentType/:contentTypeStaticName`,\r\n      }\r\n    ];\r\n    return routes;\r\n  }\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    let url = `metadata/${targetType}/${keyType}/${key}`;\r\n    if (dialogTitle) {\r\n      url += `/title/${encodeURIComponent(dialogTitle)}`;\r\n    }\r\n    if (contentTypeStaticName) {\r\n      url += `/contentType/${contentTypeStaticName}`;\r\n    }\r\n    return url;\r\n  }\r\n\r\n  static getUrlApp(appId: number, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.app.targetType,\r\n      eavConstants.metadata.app.keyType,\r\n      appId.toString(),\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlAttribute(attributeId: number, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.attribute.targetType,\r\n      eavConstants.metadata.attribute.keyType,\r\n      attributeId.toString(),\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n  static getUrlContentType(staticName: string, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.contentType.targetType,\r\n      eavConstants.metadata.contentType.keyType,\r\n      staticName,\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlEntity(guid: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.entity.targetType,\r\n      eavConstants.metadata.entity.keyType,\r\n      guid,\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[6]}