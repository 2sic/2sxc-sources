{"version":3,"sources":["./src/app/content-import/services/content-import.service.ts","../edit/shared/services/eav.service.ts","./src/app/app-administration/services/content-types.service.ts","./src/app/content-import/content-import-dialog.config.ts","./src/app/content-import/content-import-routing.module.ts","./src/app/content-import/content-import.module.ts","./src/app/shared/helpers/file-to-base64.helper.ts","../edit/shared/services/entity.service.ts","../edit/shared/store/actions/item.actions.ts"],"names":["http","context","dnnContext","evaluateContent","formValues","file","pipe","fileBase64","requestData","AppId","appId","toString","DefaultLanguage","defaultLanguage","ContentType","contentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","post","$2sxc","apiUrl","importContent","ContentImportService","webApiEditRoot","store","forceConnectorSave$","formValueChange$","formDisabledChange$","ngOnDestroy","this","complete","setEavConfig","editDialogContext","eavConfig","zoneId","appRoot","App","Url","lang","Language","Current","langPri","Primary","langs","All","moduleId","partOfPage","sessionStorage","getItem","portalRoot","Site","tabId","systemRoot","window","location","pathname","split","versioningOptions","getVersioningOptions","fetchFormData","items","params","saveItem","item","dispatch","saveItemSuccess","data","saveItemError","error","saveFormData","body","publishing","show","hide","branch","publish","console","EavService","webApiTypeRoot","name","retrieveContentType","staticName","get","contentTypeId","retrieveContentTypes","scope","getScopes","scopes","Object","keys","map","key","value","save","appid","delete","StaticName","import","files","formData","FormData","append","createGhost","sourceStaticName","ContentTypesService","contentImportDialog","initContext","panelSize","panelClass","getComponent","routes","path","component","dialog","ContentImportRoutingModule","forChild","ContentImportModule","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","readAsText","webApiEntityRoot","webApiEntityList","eavService","getAvailableEntities","filterText","contentTypeName","reactiveEntities","p","filter","entityId","force","id","EntityService","SAVE_ITEM_ATTRIBUTES_VALUES","SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS","SAVE_ITEM_ATTRIBUTES_VALUES_ERROR","type"],"mappings":"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","file":"content-import-content-import-module.d6960a47c1c420c398dc.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, Observable } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services/entity.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return (\r\n          this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData)\r\n        ) as Observable<EvaluateContentResult>;\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return (\r\n          this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData)\r\n        ) as Observable<ImportContentResult>;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { FormDisabledSet, FormValueSet } from '../../../edit-types';\r\nimport { keyPartOfPage, keyPublishing } from '../../../ng-dialogs/src/app/shared/constants/session.constants';\r\nimport { Context } from '../../../ng-dialogs/src/app/shared/services/context';\r\nimport { EavFormData, EditDialogContext } from '../../eav-item-dialog/multi-item-edit-form/multi-item-edit-form.models';\r\nimport { EavConfig } from '../models/eav-config';\r\nimport { Item } from '../models/eav/item';\r\nimport { SaveResult } from '../models/eav/save-result.model';\r\nimport { VersioningOptions } from '../models/eav/versioning-options';\r\nimport * as fromStore from '../store';\r\nimport * as itemActions from '../store/actions/item.actions';\r\n\r\nexport const webApiEditRoot = 'cms/edit/';\r\n\r\n@Injectable()\r\nexport class EavService implements OnDestroy {\r\n  /**\r\n   * Tells subscribed custom components that they should submit their values,\r\n   * e.g. form is going to be saved and we don't want to miss any values.\r\n   * Custom components run outside Angular zone and we have to wait for their values to update.\r\n   */\r\n  forceConnectorSave$ = new Subject<null>();\r\n  /** Temporary solution to circumvent value not being emitted on language change. Fix language change!  */\r\n  formValueChange$ = new Subject<FormValueSet>();\r\n  /** Temporary solution to circumvent disabled not being emitted on language change. Fix language change!  */\r\n  formDisabledChange$ = new Subject<FormDisabledSet>();\r\n\r\n  eavConfig: EavConfig;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private store: Store<fromStore.EavState>,\r\n    private dnnContext: DnnContext,\r\n    /** Used to fetch form data and fill up eavConfig. Do not use anywhere else */\r\n    private context: Context,\r\n  ) { }\r\n\r\n  // spm TODO: ngOnDestroy only fires in services provided in component\r\n  ngOnDestroy() {\r\n    this.forceConnectorSave$.complete();\r\n    this.formValueChange$.complete();\r\n    this.formDisabledChange$.complete();\r\n  }\r\n\r\n  /** Create EavConfiguration from sessionStorage */\r\n  setEavConfig(editDialogContext: EditDialogContext) {\r\n    this.eavConfig = {\r\n      zoneId: this.context.zoneId.toString(),\r\n      appId: this.context.appId.toString(),\r\n      appRoot: editDialogContext.App.Url,\r\n      lang: editDialogContext.Language.Current,\r\n      langPri: editDialogContext.Language.Primary,\r\n      langs: editDialogContext.Language.All,\r\n      moduleId: this.context.moduleId.toString(),\r\n      partOfPage: sessionStorage.getItem(keyPartOfPage),\r\n      portalRoot: editDialogContext.Site.Url,\r\n      tabId: this.context.tabId.toString(),\r\n      systemRoot: window.location.pathname.split('/dist/')[0] + '/',\r\n      versioningOptions: this.getVersioningOptions(\r\n        sessionStorage.getItem(keyPartOfPage) === 'true',\r\n        sessionStorage.getItem(keyPublishing),\r\n      ),\r\n    };\r\n  }\r\n\r\n  fetchFormData(items: string) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiEditRoot + 'load'), items, {\r\n      params: { appId: this.context.appId.toString() }\r\n    }) as Observable<EavFormData>;\r\n  }\r\n\r\n  saveItem(item: Item) {\r\n    this.store.dispatch(new itemActions.SaveItemAttributesValuesAction(item));\r\n  }\r\n\r\n  saveItemSuccess(data: SaveResult) {\r\n    this.store.dispatch(new itemActions.SaveItemAttributesValuesSuccessAction(data));\r\n  }\r\n\r\n  saveItemError(error: any) {\r\n    this.store.dispatch(new itemActions.SaveItemAttributesValuesErrorAction(error));\r\n  }\r\n\r\n  saveFormData(body: string) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiEditRoot + 'save'), body, {\r\n      params: { appId: this.eavConfig.appId.toString(), partOfPage: this.eavConfig.partOfPage }\r\n    }) as Observable<SaveResult>;\r\n  }\r\n\r\n  private getVersioningOptions(partOfPage: boolean, publishing: string): VersioningOptions {\r\n    if (!partOfPage) {\r\n      return { show: true, hide: true, branch: true };\r\n    }\r\n\r\n    const publish = publishing || '';\r\n    switch (publish) {\r\n      case '':\r\n      case 'DraftOptional':\r\n        return { show: true, hide: true, branch: true };\r\n      case 'DraftRequired':\r\n        return { branch: true, hide: true };\r\n      default: {\r\n        console.error('invalid versioning requiremenets: ' + publish);\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    }) as Observable<ContentType>;\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    }) as Observable<ContentType[]>;\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map((scopes: { [key: string]: string }) => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    }) as Observable<ImportAppResult>;\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentImportComponent } = await import('./content-import.component');\r\n    return ContentImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentImportDialog } from './content-import-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentImportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentImportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentImportRoutingModule } from './content-import-routing.module';\r\nimport { ContentImportComponent } from './content-import.component';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentImportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentImportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentImportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentImportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentImportModule { }\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from 'projects/ng-dialogs/src/app/shared/services/context';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, share, switchMap } from 'rxjs/operators';\r\nimport { EntityInfo } from '../models/eav/entity-info';\r\nimport { EavService, webApiEditRoot } from './eav.service';\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private eavService: EavService,\r\n    private context: Context,\r\n    private dnnContext: DnnContext,\r\n  ) { }\r\n\r\n  getAvailableEntities(filterText: string, contentTypeName: string) {\r\n    // eavConfig for edit ui and context for other calls\r\n    const context = this.eavService.eavConfig != null ? this.eavService.eavConfig : this.context;\r\n    return this.http.post<EntityInfo[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEditRoot + 'EntityPicker'), filterText, {\r\n      params: { contentTypeName, appId: context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  // Experimental 2dm\r\n  reactiveEntities(params: Observable<{ contentTypeName: string; filter: string }>) {\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.filter, p.contentTypeName).pipe(share())),\r\n    );\r\n  }\r\n\r\n  delete(contentType: string, entityId: string, force: boolean) {\r\n    return this.http.delete(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType, id: entityId, appId: this.eavService.eavConfig.appId.toString(), force: force.toString() },\r\n    }) as Observable<null>;\r\n  }\r\n}\r\n","import { Action } from '@ngrx/store';\r\nimport { Item } from '../../models/eav/item';\r\nimport { SaveResult } from '../../models/eav/save-result.model';\r\n\r\n// Item Attributes\r\nexport const SAVE_ITEM_ATTRIBUTES_VALUES = '[Item] SAVE_ITEM_ATTRIBUTES_VALUES';\r\nexport const SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS = '[Item] SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS';\r\nexport const SAVE_ITEM_ATTRIBUTES_VALUES_ERROR = '[Item] SAVE_ITEM_ATTRIBUTES_VALUES_ERROR';\r\n\r\n/** Save (submit) */\r\nexport class SaveItemAttributesValuesAction implements Action {\r\n  readonly type = SAVE_ITEM_ATTRIBUTES_VALUES;\r\n  constructor(public item: Item) { }\r\n}\r\n\r\nexport class SaveItemAttributesValuesSuccessAction implements Action {\r\n  readonly type = SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS;\r\n  constructor(public data: SaveResult) { }\r\n}\r\n\r\nexport class SaveItemAttributesValuesErrorAction implements Action {\r\n  readonly type = SAVE_ITEM_ATTRIBUTES_VALUES_ERROR;\r\n  constructor(public error: any) { }\r\n}\r\n\r\nexport type Actions\r\n  = SaveItemAttributesValuesAction\r\n  | SaveItemAttributesValuesSuccessAction\r\n  | SaveItemAttributesValuesErrorAction;\r\n"],"sourceRoot":"webpack:///"}