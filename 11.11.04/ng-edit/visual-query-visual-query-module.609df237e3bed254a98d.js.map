{"version":3,"sources":["./src/app/app-administration/services/content-types.service.ts","./src/app/visual-query/services/query-definition.service.ts","./src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./src/app/visual-query/plumb-editor/plumber.helper.ts","./src/app/visual-query/query-result/query-result.component.html","./src/app/visual-query/query-result/query-result.component.ts","./src/app/visual-query/services/visual-query.service.ts","./src/app/visual-query/plumb-editor/plumb-editor.component.html","./src/app/visual-query/plumb-editor/plumb-editor.component.ts","./src/app/visual-query/run-explorer/run-explorer.component.html","./src/app/visual-query/run-explorer/run-explorer.component.ts","./src/app/visual-query/run-explorer/run-explorer.helpers.ts","./src/app/visual-query/add-explorer/add-explorer.component.html","./src/app/visual-query/add-explorer/add-explorer.component.ts","./src/app/visual-query/add-explorer/add-explorer.helpers.ts","./src/app/visual-query/visual-query-routing.module.ts","./src/app/visual-query/visual-query.component.ts","./src/app/visual-query/visual-query.component.html","./src/app/visual-query/visual-query.module.ts","./src/app/shared/helpers/file-to-base64.helper.ts"],"names":["webApiTypeRoot","http","context","dnnContext","apiUrl","name","this","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","fetchPipeline","pipelineEntityId","id","pipelineModel","DataSources","length","buildDefaultModel","fixPipelineDataSources","templateDataSources","pipelineDesigner","defaultPipeline","dataSources","templateDS","visualDesignerData","Top","Left","pipelineDataSource","Description","EntityGuid","entityGuid","EntityId","undefined","Name","typeNameFilter","partAssemblyAndType","PartAssemblyAndType","VisualDesignerData","push","Pipeline","StreamWiring","streamWiring","pipelineDataSources","some","pipelineDS","outDs","outDataSource","description","className","fetchDataSources","ContentType","Difficulty","DynamicOut","EnableConfig","HelpLink","Icon","In","in","Out","PrimaryType","UiHint","allowNew","input","format","globalParts","split","classFullNameParts","savePipeline","pipeline","Id","pipeModel","runPipeline","QueryDefinitionService","guiTypes","Cache","icon","notes","Filter","Logic","Lookup","Modify","Security","Sort","Source","Target","Unknown","calculateTypeInfos","typeInfos","typeInfo","dataSource","find","ds","dynamicOut","helpLink","config","dataSrcIdPrefix","jsPlumbRoot","onConnectionsChanged","onDragend","plumbInits","lineCount","linePaintDefault","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","maxCols","uuidColorMap","bulkDelete","instance","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","destroy","reset","removeEndpointsOnDataSource","pipelineDataSourceGuid","elementId","selectEndpoints","element","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","label","To","targetId","getStreamsOut","streamsOut","target","each","endpoint","join","putEntityCountOnConnections","result","Streams","forEach","stream","sourceElementId","toUuid","includes","TargetIn","sEndp","getEndpoint","SourceOut","connections","getUuid","setLabel","Count","cssClass","nextLinePaintStyle","uuid","assign","container","Container","Connector","curviness","PaintStyle","HoverPaintStyle","domDataSource","querySelector","AllowEdit","draggable","grid","stop","event","el","position","finalPos","setTimeout","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","filter","wire","fromUuid","targetElementId","pipeDataSource","connect","uuids","paintStyle","e","console","error","message","from","to","isIn","model","enabled","fill","radius","isSource","anchor","faces","overlays","getEndpointOverlays","isTarget","dropOptions","hoverClass","activeClass","location","events","dblclick","labelOverlay","dblClickCounter","newLabel","prompt","bind","info","fixedEndpoints","targetEndpoint","deleteEndpoint","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","deleteConnection","fireEvent","dialogData","dialogRef","ngOnInit","testParameters","timeUsed","QueryTimer","Milliseconds","ticksUsed","Ticks","Query","sources","Sources","streams","closeDialog","close","QueryResultComponent","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","pipelineModel$","BehaviorSubject","dataSources$","putEntityCountOnConnections$","Subject","pipelineId","parseInt","snapshot","paramMap","doRefresh","subscription","Subscription","ngOnDestroy","complete","unsubscribe","init","attachKeyboardSave","refreshOnChildClosed","editPipelineEntity","form","items","formUrl","navigate","relativeTo","saveAndRun","run","addDataSource","cloneDeep","newPipelineDataSource","next","removeDataSource","StreamsOut","renameDataSource","changeDataSourceDescription","changeConnections","changeDataSourcePosition","editDataSource","contentTypeName","getMetadata","metadata","entity","type","keyTypes","guid","subscribe","ContentTypeName","For","Guid","alert","callback","open","duration","pipelineResult","data","TestParameters","backdropClass","panelClass","autoFocus","closeOnNavigation","top","markForCheck","warn","reloadingSnackBar","setTitle","runOutsideAngular","add","fromEvent","window","firstChild","navigator","platform","match","metaKey","ctrlKey","keyCode","preventDefault","startWith","pairwise","refresh","VisualQueryService","visualQueryService","hardReset","scriptLoaded$","test","src","plumber","templateModel$","combineLatest","detectChanges","allowEdit","ngAfterViewInit","domDataSourcesLoaded$","domDataSourcesRef","changes","domRootRef","nativeElement","configureDataSource","remove","confirm","editName","newName","trim","editDescription","newDescription","PlumbEditorComponent","warnings$","warnings","testMid","exec","urlMid","moduleId","calculateWarnings","editPipeline","openParamsHelp","saveAndRunQuery","RunExplorerComponent","toggledItems","difficulties","default","advanced","difficulty$","sorted$","maxDifficulty","filtered","sort","a","b","toLocaleLowerCase","localeCompare","sorted","filterAndSortDataSources","toggleDifficulty","checked","toggleItem","item","array","index","indexOf","splice","toggleInArray","AddExplorerComponent","routes","path","component","explorer","activeExplorer","toggleExplorer","openHelp","VisualQueryComponent","children","matcher","loadChildren","then","m","EditModule","history","VisualQueryRoutingModule","forChild","VisualQueryModule","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","readAsText"],"mappings":"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","file":"visual-query-visual-query-module.609df237e3bed254a98d.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    }) as Observable<ContentType>;\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    }) as Observable<ContentType[]>;\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map((scopes: { [key: string]: string }) => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    }) as Observable<ImportAppResult>;\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiQueryDataSources, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number) {\r\n    const pipelineModel$ = this.http.get(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }) as Observable<PipelineModel>;\r\n\r\n    return pipelineModel$.pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      if (templateDS.visualDesignerData == null) {\r\n        templateDS.visualDesignerData = { Top: 100, Left: 100 };\r\n      }\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.entityGuid || 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n        EntityId: undefined,\r\n        Name: this.typeNameFilter(templateDS.partAssemblyAndType, 'className'),\r\n        PartAssemblyAndType: templateDS.partAssemblyAndType,\r\n        VisualDesignerData: templateDS.visualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(pipelineDS => pipelineDS.EntityGuid === 'Out');\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.description,\r\n        EntityGuid: 'Out',\r\n        EntityId: undefined,\r\n        Name: outDs.name,\r\n        PartAssemblyAndType: outDs.className,\r\n        VisualDesignerData: outDs.visualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData = pipelineDataSource.VisualDesignerData || { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    const dataSources$ = this.http.get(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources)\r\n    ) as Observable<DataSource[]>;\r\n    return dataSources$.pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: 100,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.in,\r\n          Name: outDs.name || outDs.className,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.className,\r\n          PrimaryType: 'Target',\r\n          UiHint: undefined,\r\n          allowNew: false,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: string) {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n    }\r\n\r\n    return input;\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n    const pipelineModel$ = this.http.post(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ) as Observable<PipelineModel>;\r\n\r\n    return pipelineModel$.pipe(\r\n      map(pipeModel => {\r\n        this.fixPipelineDataSources(pipeModel.DataSources);\r\n        return pipeModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  runPipeline(id: number) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString() }\r\n    }) as Observable<PipelineResult>;\r\n  }\r\n\r\n}\r\n","import { DataSource } from '../models/data-sources.model';\r\nimport { PipelineDataSource } from '../models/pipeline.model';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  Cache: { name: 'Cache', icon: 'history', notes: 'Caching of data' },\r\n  Filter: { name: 'Filter', icon: 'filter_list', notes: 'Filter data - usually returning less items than came in' },\r\n  Logic: { name: 'Logic', icon: 'share', notes: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { name: 'Lookup', icon: 'search', notes: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { name: 'Modify', icon: 'star_half', notes: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { name: 'Security', icon: 'account_circle', notes: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { name: 'Sort', icon: 'sort', notes: 'Sort the items' },\r\n  Source: { name: 'Source', icon: 'cloud_upload', notes: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { name: 'Target', icon: 'adjust', notes: 'Target - usually just a destination of data' },\r\n  Unknown: { name: 'Unknown', icon: 'fiber_manual_record', notes: 'Unknown type' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon) { typeInfo.icon = dataSource.Icon; }\r\n      if (dataSource.DynamicOut) { typeInfo.dynamicOut = true; }\r\n      if (dataSource.HelpLink) { typeInfo.helpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig) { typeInfo.config = dataSource.EnableConfig; }\r\n    }\r\n    if (!typeInfo) { typeInfo = guiTypes.Unknown; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","import { DataSource } from '../models/data-sources.model';\r\nimport { PipelineResult } from '../models/pipeline-result.model';\r\nimport { PipelineDataSource, PipelineModel, StreamWire, VisualDesignerData } from '../models/pipeline.model';\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\ntype PlumbType = any;\r\ndeclare const jsPlumb: PlumbType;\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: { [key: string]: any } = {};\r\n  private bulkDelete = false;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    /** Workaround for multiple dblClick listeners */\r\n    private plumbInits: number,\r\n  ) {\r\n    this.instance = jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.instance.reset();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections?.forEach((connection: PlumbType) => {\r\n        if (connection.endpoints[1].getUuid() !== toUuid) { return; }\r\n\r\n        connection.setLabel({ label: stream.Count.toString(), cssClass: 'streamEntitiesCount' });\r\n      });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource: HTMLElement = this.jsPlumbRoot.querySelector('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint();\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(), { filter: '.add-endpoint .new-connection' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource: HTMLElement = this.jsPlumbRoot.querySelector('#' + sourceElementId);\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource: HTMLElement = this.jsPlumbRoot.querySelector('#' + targetElementId);\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, name: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + name;\r\n    const model = isIn ? this.buildTargetEndpoint() : this.buildSourceEndpoint();\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = { uuid, enabled: this.pipelineModel.Pipeline.AllowEdit || pipelineDataSource.EntityGuid === 'Out' };\r\n\r\n    const endPoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endPoint.getOverlay('endpointLabel').setLabel(name);\r\n  }\r\n\r\n  private buildSourceEndpoint() {\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint',\r\n      maxConnections: -1,\r\n      isSource: true,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(true)\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint() {\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint',\r\n      maxConnections: 1,\r\n      isTarget: true,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(false),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' }\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          // location: [0.5, isSource ? -0.5 : 1.5],\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: 'noselect ' + (isSource ? 'endpointSourceLabel' : 'endpointTargetLabel'),\r\n          events: {\r\n            dblclick: (labelOverlay: PlumbType) => {\r\n              if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n              // spm NOTE: workaround for multiple dblclick listeners\r\n              if (labelOverlay.dblClickCounter == null || labelOverlay.dblClickCounter >= this.plumbInits) {\r\n                labelOverlay.dblClickCounter = 1;\r\n              } else {\r\n                labelOverlay.dblClickCounter++;\r\n              }\r\n              if (labelOverlay.dblClickCounter > 1) { return; }\r\n\r\n              const newLabel = prompt('Rename stream', labelOverlay.label);\r\n              if (!newLabel) { return; }\r\n              labelOverlay.setLabel(newLabel);\r\n              setTimeout(() => { this.onConnectionsChanged(); });\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    ];\r\n  }\r\n\r\n  private bindEvents() {\r\n    // If connection on Out-DataSource was removed, remove custom Endpoint\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      // spm TODO: custom endpoints were removed only on Out DataSource. Bug?\r\n      // if (info.targetId !== dataSrcIdPrefix + 'Out') { return; }\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const fixedEndpoints = dataSource.In;\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      if (fixedEndpoints.includes(label)) {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n        return;\r\n      }\r\n      this.instance.deleteEndpoint(info.targetEndpoint);\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Query Results</div>\r\n    <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n</p>\r\n\r\n<br />\r\n\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Parameters & Statistics</div>\r\n</div>\r\n<p class=\"description\">\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n<ul class=\"description\">\r\n  <li *ngFor=\"let param of testParameters?.split('\\n')\">{{ param }}</li>\r\n</ul>\r\n\r\n<br />\r\n\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Query Results</div>\r\n</div>\r\n<pre>\r\n  {{ result | json }}\r\n</pre>\r\n\r\n<br />\r\n\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Sources</div>\r\n</div>\r\n<table class=\"description\">\r\n  <tr>\r\n    <th>Guid</th>\r\n    <th>Type</th>\r\n    <th>Configuration</th>\r\n    <th>Error</th>\r\n  </tr>\r\n  <tr *ngFor=\"let source of sources | keyvalue\">\r\n    <td>\r\n      <pre>{{ source.value.Guid }}</pre>\r\n    </td>\r\n    <td>{{ source.value.Type }}</td>\r\n    <td>\r\n      <ol>\r\n        <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n          <b>{{ config.key }}</b>=<em>{{ config.value }}</em></li>\r\n      </ol>\r\n    </td>\r\n    <td>{{ source.value.Error }}</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Streams</div>\r\n</div>\r\n<table class=\"description\">\r\n  <tr>\r\n    <th>Source</th>\r\n    <th>Target</th>\r\n    <th>Items</th>\r\n    <th>Error</th>\r\n  </tr>\r\n  <tr *ngFor=\"let stream of streams\">\r\n    <td>\r\n      <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n    </td>\r\n    <td>\r\n      <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n    </td>\r\n    <td>{{ stream.Count }}</td>\r\n    <td>{{ stream.Error }}</td>\r\n  </tr>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models/pipeline-result.model';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  testParameters: string;\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  result: PipelineResultQuery;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public dialogData: QueryResultDialogData, private dialogRef: MatDialogRef<QueryResultComponent>) { }\r\n\r\n  ngOnInit() {\r\n    this.testParameters = this.dialogData.testParameters;\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.result = this.dialogData.result.Query;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\nimport { DataSource, DataSourceMetadata } from '../models/data-sources.model';\r\nimport { PipelineResult } from '../models/pipeline-result.model';\r\nimport { PipelineDataSource, PipelineModel, StreamWire, VisualDesignerData } from '../models/pipeline.model';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private doRefresh = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  init() {\r\n    this.fetchPipeline();\r\n    this.fetchDataSources();\r\n    this.attachKeyboardSave();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.doRefresh = true;\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: this.queryDefinitionService.typeNameFilter(dataSource.PartAssemblyAndType, 'className'),\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n\r\n    const contentTypeName = dataSource?.ContentType\r\n      ? dataSource.ContentType\r\n      : '|Config ' + this.queryDefinitionService.typeNameFilter(pipelineDataSource.PartAssemblyAndType, 'classFullName');\r\n\r\n    const typeId = eavConstants.metadata.entity.type;\r\n    const keyType = eavConstants.keyTypes.guid;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // Query for existing Entity\r\n    this.metadataService.getMetadata(typeId, keyType, key, contentTypeName).subscribe((metadata: DataSourceMetadata[]) => {\r\n      // Edit existing Entity\r\n      if (metadata.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName /*, { ignoreErrors: 'true' } */).subscribe({\r\n        next: contentType => {\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                Guid: key,\r\n              }\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        },\r\n        error: error => {\r\n          alert('Server reports error - this usually means that this data-source doesn\\'t have any configuration');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: error => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private runPipeline() {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        // open modal with the results\r\n        const dialogData: QueryResultDialogData = {\r\n          testParameters: this.pipelineModel$.value.Pipeline.TestParameters,\r\n          result: pipelineResult,\r\n        };\r\n        this.dialog.open(QueryResultComponent, {\r\n          data: dialogData,\r\n          backdropClass: 'dialog-backdrop',\r\n          panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n          viewContainerRef: this.viewContainerRef,\r\n          autoFocus: false,\r\n          closeOnNavigation: false,\r\n          // spm NOTE: used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n          // Real top margin is overwritten in css e.g. dialog-panel-large\r\n          position: { top: '0' },\r\n        });\r\n        this.changeDetectorRef.markForCheck();\r\n        console.warn(pipelineResult);\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: error => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(reloadingSnackBar = false) {\r\n    if (reloadingSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId).subscribe(pipelineModel => {\r\n      if (reloadingSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.pipelineModel$.next(pipelineModel);\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n    });\r\n  }\r\n\r\n  private fetchDataSources() {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter((event: KeyboardEvent) => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n        filter(() => {\r\n          const refresh = this.doRefresh;\r\n          this.doRefresh = false;\r\n          return refresh;\r\n        }),\r\n      ).subscribe(() => {\r\n        this.fetchPipeline(true);\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\">\r\n\r\n      <div class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].config\"\r\n        (click)=\"configureDataSource(dataSource)\">\r\n        <mat-icon class=\"eav-icon-settings\">settings</mat-icon>\r\n      </div>\r\n\r\n      <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].notes\">\r\n        {{ templateModel.typeInfos[dataSource.EntityGuid].icon }}\r\n      </mat-icon>\r\n\r\n      <div class=\"name noselect\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline eav-icon-pencil\">edit</mat-icon>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"description noselect\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline eav-icon-pencil\">edit</mat-icon>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ typeNameFilter(dataSource.PartAssemblyAndType, 'className') }}\r\n      </div>\r\n\r\n      <div class=\"add-endpoint\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].dynamicOut\">\r\n        <mat-icon class=\"new-connection eav-icon-up-dir\">arrow_drop_up</mat-icon>\r\n      </div>\r\n\r\n      <mat-icon class=\"delete eav-icon-cancel\" title=\"Delete\" appMousedownStopPropagation\r\n        *ngIf=\"templateModel.allowEdit\" (click)=\"remove(dataSource)\">\r\n        delete\r\n      </mat-icon>\r\n\r\n      <a class=\"help eav-icon-help-circled\" title=\"Help for this data source\"\r\n        [href]=\"templateModel.typeInfos[dataSource.EntityGuid].helpLink\" target=\"_blank\" appMousedownStopPropagation\r\n        *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].helpLink\">\r\n        <mat-icon>help_outline</mat-icon>\r\n      </a>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, VisualDesignerData } from '../models/pipeline.model';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PlumbEditorComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n  private plumbInits = 0;\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([this.visualQueryService.pipelineModel$, this.visualQueryService.dataSources$]).pipe(\r\n      map(([pipelineModel, dataSources]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          ++this.plumbInits,\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  typeNameFilter(input: string, format: string) {\r\n    const filtered = this.queryDefinitionService.typeNameFilter(input, format);\r\n    return filtered;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Parameters</div>\r\n        <div>\r\n          <button mat-icon-button matTooltip=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button matTooltip=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\">\r\n            {{ warning }}\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models/pipeline.model';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n\r\n  constructor(private context: Context, private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$;\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('https://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models/pipeline.model';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test-module-id is different from the one we're currently\r\n * working on, or if no test-module-id is provided\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try { // catch various not-initialized errors\r\n    const regex = /^\\[module:moduleid\\]=([0-9]*)$/gmi; // capture the mod-id\r\n    const testParams = pipelineModel.Pipeline.TestParameters;\r\n    const matches = regex.exec(testParams);\r\n    const testMid = matches[1];\r\n    const urlMid = context.moduleId.toString();\r\n    if (testMid !== urlMid) {\r\n      warnings.push(`Your test moduleid (${testMid}) is different from the current moduleid (${urlMid}). Note that 2sxc 9.33 automatically provides the moduleid - so you usually do not need to set it any more.`);\r\n    }\r\n  } catch (error) { }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(sorted$ | async) as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let item of sorted | keyvalue\">\r\n    <div class=\"collapsible\" [matTooltip]=\"item.key\" matTooltipShowDelay=\"750\" (click)=\"toggleItem(item.key)\">\r\n      <mat-icon>{{ toggledItems.includes(item.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ item.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(item.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let value of item.value\" [matTooltip]=\"value.Name\" matTooltipShowDelay=\"750\"\r\n        (click)=\"addDataSource(value)\">\r\n        {{ value.Name }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DataSource } from '../models/data-sources.model';\r\nimport { SortedDataSources } from '../models/data-sources.model';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources, toggleInArray } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n\r\n  private difficulties = {\r\n    default: 100,\r\n    advanced: 200,\r\n  };\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => {\r\n        if (dataSources == null) { return; }\r\n        const sorted = filterAndSortDataSources(dataSources, difficulty);\r\n        return sorted;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { DataSource, SortedDataSources } from '../models/data-sources.model';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    (dataSource.Difficulty <= maxDifficulty) && (dataSource.allowNew == null)\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    sorted[type] ? sorted[type].push(dataSource) : sorted[type] = [dataSource];\r\n  }\r\n\r\n  return sorted;\r\n}\r\n\r\nexport function toggleInArray(item: string, array: string[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { ChangeDetectionStrategy, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('https://2sxc.org/help', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" matTooltip=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" matTooltip=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" matTooltip=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n  ],\r\n  entryComponents: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class VisualQueryModule { }\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///"}