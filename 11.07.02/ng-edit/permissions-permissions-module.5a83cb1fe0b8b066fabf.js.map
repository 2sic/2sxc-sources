{"version":3,"sources":["../edit/shared/services/global-configuration.service.ts","./src/app/permissions/services/permissions.service.ts","./src/app/permissions/permissions-dialog.config.ts","./src/app/permissions/permissions-routing.module.ts","./src/app/permissions/permissions.module.ts","../edit/shared/services/dropzone-dragging.helper.ts","./src/app/shared/components/dialog-entry/dialog-entry.component.ts"],"names":["store","snackBar","loadDebugEnabled","debugEnabled","this","dispatch","toggleDebugEnabled","select","pipe","subscribe","enabled","open","duration","getDebugEnabled","GlobalConfigService","metadataService","entitiesService","getAll","targetType","keyType","key","getMetadata","contentTypes","permissions","delete","id","PermissionsService","permissionsDialog","name","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","children","matcher","loadChildren","then","m","EditModule","PermissionsRoutingModule","forChild","PermissionsModule","withComponents","zone","eventListeners","attach","htmlEl","runOutsideAngular","dragoverListener","timeoutsArray","clearTimeout","splice","length","clearTimeouts","windowBodyTimeouts","document","body","classList","add","draggingClass","dropListener","remove","addEventListener","passive","push","element","type","listener","detach","forEach","eventListener","removeEventListener","viewContainerRef","router","route","context","changeDetectorRef","navigation","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","Error","init","dialogRef","backdropClass","showScrollbar","autoFocus","closeOnNavigation","position","top","afterClosed","pathFromRoot","window","parent","$2sxc","totalPopup","close","error","navigate","url","relativeTo","markForCheck","ngOnDestroy","DialogEntryComponent"],"mappings":"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","file":"permissions-permissions-module.5a83cb1fe0b8b066fabf.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport * as fromStore from '../store';\r\nimport * as GlobalConfigurationActions from '../store/actions/global-configuration.actions';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n  constructor(private store: Store<fromStore.EavState>, private snackBar: MatSnackBar) { }\r\n\r\n  loadDebugEnabled(debugEnabled: boolean) {\r\n    this.store.dispatch(GlobalConfigurationActions.loadDebugEnabled({ debugEnabled }));\r\n  }\r\n\r\n  toggleDebugEnabled() {\r\n    this.store.dispatch(GlobalConfigurationActions.toggleDebugEnabled());\r\n    let debugEnabled: boolean;\r\n    this.store.select(fromStore.selectDebugEnabled).pipe(take(1)).subscribe(enabled => {\r\n      debugEnabled = enabled;\r\n    });\r\n    if (debugEnabled) {\r\n      this.snackBar.open('debug mode enabled', null, {\r\n        duration: 3000,\r\n      });\r\n    } else {\r\n      this.snackBar.open('debug mode disabled', null, {\r\n        duration: 3000,\r\n      });\r\n    }\r\n  }\r\n\r\n  getDebugEnabled(): Observable<boolean> {\r\n    return this.store.select(fromStore.selectDebugEnabled);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EntitiesService } from '../../content-items/services/entities.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Permission } from '../models/permission.model';\r\nimport { MetadataService } from './metadata.service';\r\n\r\n@Injectable()\r\nexport class PermissionsService {\r\n  constructor(private metadataService: MetadataService, private entitiesService: EntitiesService) { }\r\n\r\n  getAll(targetType: number, keyType: string, key: string) {\r\n    return this.metadataService.getMetadata(targetType, keyType, key, eavConstants.contentTypes.permissions) as Observable<Permission[]>;\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.entitiesService.delete(eavConstants.contentTypes.permissions, id, false) as Observable<null>;\r\n  }\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const permissionsDialog: DialogConfig = {\r\n  name: 'SET_PERMISSIONS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { PermissionsComponent } = await import('./permissions.component');\r\n    return PermissionsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { permissionsDialog } from './permissions-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: permissionsDialog }, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PermissionsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { PermissionsActionsComponent } from './ag-grid-components/permissions-actions/permissions-actions.component';\r\nimport { PermissionsRoutingModule } from './permissions-routing.module';\r\nimport { PermissionsComponent } from './permissions.component';\r\nimport { MetadataService } from './services/metadata.service';\r\nimport { PermissionsService } from './services/permissions.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PermissionsComponent,\r\n    PermissionsActionsComponent,\r\n  ],\r\n  entryComponents: [\r\n    PermissionsComponent,\r\n    PermissionsActionsComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PermissionsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    AgGridModule.withComponents([]),\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    PermissionsService,\r\n    MetadataService,\r\n    EntitiesService,\r\n  ]\r\n})\r\nexport class PermissionsModule { }\r\n","import { NgZone } from '@angular/core';\r\nimport { ElementEventListener } from '../../../shared/element-event-listener.model';\r\ndeclare const draggingClass: string;\r\ndeclare const windowBodyTimeouts: number[];\r\n\r\nexport class DropzoneDraggingHelper {\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(private zone: NgZone) { }\r\n\r\n  /** Starts listening for dragover and drop events on a given element */\r\n  attach(htmlEl: HTMLElement) {\r\n    this.zone.runOutsideAngular(() => {\r\n      htmlEl.addEventListener('dragover', dragoverListener, { passive: true });\r\n      htmlEl.addEventListener('drop', dropListener, { passive: true });\r\n\r\n      this.eventListeners.push(\r\n        { element: htmlEl, type: 'dragover', listener: dragoverListener },\r\n        { element: htmlEl, type: 'drop', listener: dropListener },\r\n      );\r\n\r\n      function dragoverListener() {\r\n        clearTimeouts(windowBodyTimeouts); // clear timeouts from global array of timeouts which clear draggingClass from body\r\n        document.body.classList.add(draggingClass);\r\n      }\r\n      function dropListener() {\r\n        document.body.classList.remove(draggingClass);\r\n      }\r\n      function clearTimeouts(timeoutsArray: number[]) {\r\n        for (const timeout of timeoutsArray) {\r\n          clearTimeout(timeout);\r\n        }\r\n        timeoutsArray.splice(0, timeoutsArray.length);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Removes event listeners from registered elements */\r\n  detach() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(eventListener => {\r\n        const element = eventListener.element;\r\n        const type = eventListener.type;\r\n        const listener = eventListener.listener;\r\n        element.removeEventListener(type, listener);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { angularConsoleLog } from '../../helpers/angular-console-log.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { Context } from '../../services/context';\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: { [key: string]: any; };\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    angularConsoleLog('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      if (dialogConfig.initContext) {\r\n        this.context.init(this.route);\r\n      }\r\n\r\n      this.dialogRef = this.dialog.open(component, {\r\n        data: this.dialogData,\r\n        backdropClass: 'dialog-backdrop',\r\n        panelClass: [\r\n          'dialog-panel',\r\n          `dialog-panel-${dialogConfig.panelSize}`,\r\n          dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n          ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n        ],\r\n        viewContainerRef: this.viewContainerRef,\r\n        autoFocus: false,\r\n        closeOnNavigation: false,\r\n        // spm NOTE: used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n        // Real top margin is overwritten in css e.g. dialog-panel-large\r\n        position: { top: '0' }\r\n      });\r\n\r\n      this.dialogRef.afterClosed().pipe(take(1)).subscribe((data: any) => {\r\n        angularConsoleLog('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            (window.parent as any).$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      });\r\n\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}