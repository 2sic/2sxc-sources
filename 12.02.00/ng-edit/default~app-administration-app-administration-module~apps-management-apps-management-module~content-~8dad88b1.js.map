{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js"],"names":["listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","EMPTY","element","coerceElement","info","get","subject","result","Subject","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","delete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ɵngcc0","ɵngcc1","ɵprov","ɵɵdefineInjectable","factory","ɵɵinject","Platform","NgZone","token","providedIn","ctorParameters","type","ngDevMode","Injectable","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","EventEmitter","monitor","subscribe","emit","CdkAutofill_Factory","ɵdir","selectors","outputs","ElementRef","propDecorators","Output","Directive","selector","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_document","_textareaElement","nativeElement","_measuringClass","FIREFOX","_minRows","value","coerceNumberProperty","_setMinHeight","_maxRows","_setMaxHeight","coerceBooleanProperty","resizeToFitContent","reset","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","window","_getWindow","fromEvent","pipe","auditTime","takeUntil","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","force","_cacheTextareaLineHeight","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","doc","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","activeElement","setSelectionRange","CdkTextareaAutosize_Factory","DOCUMENT","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","decorators","Optional","Inject","Input","HostListener","host","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵinj","imports","PlatformModule","ngJitMode","declarations","exports","NgModule","MatTextareaAutosize","MatTextareaAutosize_Factory","ɵMatTextareaAutosize_BaseFactory","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","features","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","mixinErrorState","MatInput","inputValueAccessor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","getSupportedInputTypes","has","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","el","_isServer","_isNativeSelect","_isTextarea","multiple","disabled","_id","_validateType","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","options","focus","isFocused","readonly","_a","_b","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","validity","badInput","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","ids","length","join","MatInput_Factory","ɵngcc2","ɵngcc3","ɵngcc4","MAT_FORM_FIELD","hostVars","MatInput_HostBindings","MatInput_focus_HostBindingHandler","_focusChanged","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","required","errorState","errorStateMatcher","userAriaDescribedBy","provide","MatFormFieldControl","useExisting","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","MatFormField","providers","ɵngcc5","MatInputModule","MatInputModule_Factory","MatFormFieldModule","MatCommonModule"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~content-~8dad88b1.js","sourcesContent":["import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n        this._measuringClass = _platform.FIREFOX ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add(this._measuringClass);\n        textarea.placeholder = '';\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove(this._measuringClass);\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], \n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); };\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n    constructor(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    let el = event.target;\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 9, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.errorState && !ctx.empty)(\"aria-required\", ctx.required);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    // Only mark the input as invalid for assistive technology if it has a value since the\n                    // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                    '[attr.aria-invalid]': 'errorState && !empty',\n                    '[attr.aria-required]': 'required'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = function MatInputModule_Factory(t) { return new (t || MatInputModule)(); };\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n            MatCommonModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule,\n        MatCommonModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map"],"sourceRoot":"webpack:///"}