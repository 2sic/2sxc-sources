{"version":3,"sources":["./projects/ng-dialogs/src/app/permissions/go-to-permissions.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields-dialog.config.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields-dialog.config.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields-routing.module.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.module.ts","./projects/ng-dialogs/src/app/app-administration/services/content-types.service.ts"],"names":["GoToPermissions","go","targetType","keyType","key","goEntity","this","metadata","entity","type","keyTypes","guid","goContentType","goAttribute","id","attribute","number","goApp","appId","app","route","path","loadChildren","then","m","PermissionsModule","data","title","contentTypeFieldsDialog","name","initContext","panelSize","panelClass","getComponent","editContentTypeFieldsDialog","routes","component","dialog","children","matcher","EditModule","RefreshEditModule","ContentTypeFieldsRoutingModule","forChild","ContentTypeFieldsModule","withComponents","webApiTypeRoot","http","context","dnnContext","apiUrl","$2sxc","retrieveContentType","staticName","get","params","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService"],"mappings":"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","file":"content-type-fields-content-type-fields-module.3e1f5dea9966441279ab.js","sourcesContent":["import { Route } from '@angular/router';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\n\r\n/**\r\n * Navigation system to access permissions dialogs as sub-dialogs for many use cases\r\n */\r\nexport const GoToPermissions = {\r\n\r\n  go(targetType: number, keyType: string, key: string) {\r\n    return `permissions/${targetType}/${keyType}/${key}`;\r\n  },\r\n\r\n  /** Go to edit permissions for entity */\r\n  goEntity(key: string) {\r\n    return this.go(eavConstants.metadata.entity.type, eavConstants.keyTypes.guid, key);\r\n  },\r\n\r\n  /** Go to edit permissions for content-type. For historic reasons, it's the same as Entity */\r\n  goContentType(key: string) {\r\n    return this.goEntity(key);\r\n  },\r\n\r\n  goAttribute(id: number) {\r\n    return this.go(eavConstants.metadata.attribute.type, eavConstants.keyTypes.number, id);\r\n  },\r\n\r\n  goApp(appId: number) {\r\n    return this.go(eavConstants.metadata.app.type, eavConstants.keyTypes.number, appId);\r\n  },\r\n\r\n  /**\r\n   * The route definition for use in all routing components which can route to this dialog\r\n   */\r\n  route: {\r\n    path: 'permissions/:type/:keyType/:key',\r\n    loadChildren: () => import('./permissions.module').then(m => m.PermissionsModule),\r\n    data: { title: 'Permission' },\r\n  } as Route,\r\n};\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentTypeFieldsDialog: DialogConfig = {\r\n  name: 'CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentTypeFieldsComponent } = await import('./content-type-fields.component');\r\n    return ContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const editContentTypeFieldsDialog: DialogConfig = {\r\n  name: 'EDIT_CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { EditContentTypeFieldsComponent } = await import('./edit-content-type-fields.component');\r\n    return EditContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentTypeFieldsDialog } from './content-type-fields-dialog.config';\r\nimport { editContentTypeFieldsDialog } from './edit-content-type-fields/edit-content-type-fields-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentTypeFieldsDialog }, children: [\r\n      { path: 'add/:contentTypeStaticName', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      { path: 'update/:contentTypeStaticName/:id', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      GoToPermissions.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentTypeFieldsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsSpecialComponent } from './ag-grid-components/content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { ContentTypeFieldsRoutingModule } from './content-type-fields-routing.module';\r\nimport { ContentTypeFieldsComponent } from './content-type-fields.component';\r\nimport { EditContentTypeFieldsComponent } from './edit-content-type-fields/edit-content-type-fields.component';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n    ContentTypeFieldsSpecialComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n    ContentTypeFieldsSpecialComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentTypeFieldsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentTypesService,\r\n    ContentTypesFieldsService,\r\n  ]\r\n})\r\nexport class ContentTypeFieldsModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Dictionary } from '../../shared/models/dictionary.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Dictionary<string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}