{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"names":["_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵngcc0","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_8_Template","_r9","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","_getPanelTheme","_transformOrigin","_triggerFontSize","panelClass","multiple","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","transform","minWidth","opacity","animate","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","type","selectors","features","useExisting","ngDevMode","Directive","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","Subject","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","map","option","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","_placeholder","stateChanges","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","coerceNumberProperty","_id","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","_keyManager","withTypeAhead","complete","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","isDisabled","disabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","labelExpression","ariaLabelledby","isOpen","ids","_ariaDescribedby","_MatSelectBase_Factory","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","MAT_FORM_FIELD","ɵngcc5","viewQuery","_MatSelectBase_Query","CdkConnectedOverlay","_t","first","inputs","required","compareWith","errorStateMatcher","outputs","ctorParameters","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","Inject","NgControl","Self","String","Attribute","LiveAnnouncer","propDecorators","ViewChild","Input","Output","ɵngcc6","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","_countGroupLabelsBeforeOption","optionGroups","scrollTop","_getOptionScrollPosition","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect_Factory","ɵMatSelect_BaseFactory","ɵcmp","contentQueries","MatSelect_ContentQueries","dirIndex","MatOption","MAT_OPTGROUP","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","toString","errorState","_getAriaActiveDescendant","disableRipple","exportAs","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","MatSelect_Template_div_click_0_listener","toggle","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","directives","ɵngcc7","ɵngcc8","styles","encapsulation","data","animation","changeDetection","ContentChildren","descendants","ContentChild","Component","ViewEncapsulation","None","ChangeDetectionStrategy","OnPush","host","animations","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵinj","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule","ngJitMode","declarations","exports","NgModule"],"mappings":"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","file":"default~app-administration-app-administration-module~code-editor-code-editor-module~content-export-c~5cd8229e.js","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/**\n * The max height of the select's overlay panel.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = (labelId ? labelId + ' ' : '');\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(_c1, 1);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this.overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return ɵMatSelect_BaseFactory(t || MatSelect); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\nconst ɵMatSelect_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSelect);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"]\n            }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, _MatSelectBase, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map"],"sourceRoot":"webpack:///"}