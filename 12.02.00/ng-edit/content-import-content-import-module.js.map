{"version":3,"sources":["./projects/ng-dialogs/src/app/content-import/content-import.component.scss","./projects/ng-dialogs/src/app/content-import/services/content-import.service.ts","./projects/ng-dialogs/src/app/content-import/content-import.component.html","./projects/ng-dialogs/src/app/shared/helpers/file-to-base64.helper.ts","./projects/ng-dialogs/src/app/content-import/content-import.component.ts","./projects/ng-dialogs/src/app/content-import/content-import-routing.module.ts","./projects/ng-dialogs/src/app/content-import/content-import-dialog.config.ts","./projects/ng-dialogs/src/app/content-import/content-import.module.ts","./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/content-types.service.ts"],"names":[],"mappings":"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","file":"content-import-content-import-module.js","sourcesContent":["export default \".field-label {\\n  font-size: 18px;\\n  margin: 24px 0 0;\\n}\\n\\n.mat-radio-group {\\n  display: flex;\\n  flex-direction: column;\\n  margin: 8px 0;\\n}\\n\\n.mat-radio-button {\\n  margin: 5px;\\n  font-size: 14px;\\n}\\n\\n.hint {\\n  font-size: 18px;\\n  margin-top: 24px;\\n  margin-bottom: 16px;\\n}\\n\\n.progress-message {\\n  font-size: 18px;\\n}\\n\\n.evaluation__title {\\n  font-size: 18px;\\n  margin: 24px 0 0;\\n  font-weight: bold;\\n}\\n\\n.evaluation__content {\\n  font-size: 14px;\\n}\\n\\n.evaluation__content li {\\n  padding: 2px 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFwuLlxcY29udGVudC1pbXBvcnQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxlQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGFBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7RUFDQSxlQUFBO0FBQ0Y7O0FBRUE7RUFDRSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUdFO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsaUJBQUE7QUFBSjs7QUFHRTtFQUNFLGVBQUE7QUFESjs7QUFHSTtFQUNFLGNBQUE7QUFETiIsImZpbGUiOiJjb250ZW50LWltcG9ydC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5maWVsZC1sYWJlbCB7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG4gIG1hcmdpbjogMjRweCAwIDA7XHJcbn1cclxuXHJcbi5tYXQtcmFkaW8tZ3JvdXAge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBtYXJnaW46IDhweCAwO1xyXG59XHJcblxyXG4ubWF0LXJhZGlvLWJ1dHRvbiB7XHJcbiAgbWFyZ2luOiA1cHg7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG59XHJcblxyXG4uaGludCB7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG4gIG1hcmdpbi10b3A6IDI0cHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcclxufVxyXG5cclxuLnByb2dyZXNzLW1lc3NhZ2Uge1xyXG4gIGZvbnQtc2l6ZTogMThweDtcclxufVxyXG5cclxuLmV2YWx1YXRpb24ge1xyXG4gICZfX3RpdGxlIHtcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIG1hcmdpbjogMjRweCAwIDA7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcblxyXG4gICZfX2NvbnRlbnQge1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG5cclxuICAgIGxpIHtcclxuICAgICAgcGFkZGluZzogMnB4IDA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ== */\";","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","export default \"<div class=\\\"dialog-form-wrapper\\\" appDragAndDrop [allowedFileTypes]=\\\"'xml'\\\" (filesDropped)=\\\"filesDropped($event)\\\"\\r\\n  *ngIf=\\\"(templateVars$ | async) as data\\\">\\r\\n\\r\\n  <div mat-dialog-title>\\r\\n    <div class=\\\"dialog-title-box\\\">{{ data.contentType?.Name }} Import Data</div>\\r\\n  </div>\\r\\n\\r\\n  <p class=\\\"dialog-description\\\">\\r\\n    This will import content-items into 2sxc. It requires that you already defined the content-type before you try\\r\\n    importing, and that you created the import-file using the template provided by the Export. Please visit\\r\\n    <a href=\\\"https://2sxc.org/help\\\" target=\\\"_blank\\\">https://2sxc.org/help</a> for more instructions.\\r\\n  </p>\\r\\n\\r\\n  <ng-container *ngIf=\\\"formValues != null\\\">\\r\\n    <ng-container [ngSwitch]=\\\"data.viewStateSelected\\\">\\r\\n\\r\\n      <!-- FORM -->\\r\\n      <form #ngForm=\\\"ngForm\\\" class=\\\"dialog-form\\\" *ngSwitchCase=\\\"1\\\">\\r\\n        <div class=\\\"dialog-form-content fancy-scrollbar-light\\\">\\r\\n          <div>\\r\\n            <button mat-raised-button matTooltip=\\\"Open file browser\\\" (click)=\\\"fileInput.click()\\\">\\r\\n              <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\\r\\n            </button>\\r\\n            <input #fileInput type=\\\"file\\\" (change)=\\\"fileChange($event)\\\" class=\\\"hide\\\" />\\r\\n          </div>\\r\\n\\r\\n          <div>\\r\\n            <p class=\\\"field-label\\\">References to pages / files</p>\\r\\n            <mat-radio-group [(ngModel)]=\\\"formValues.resourcesReferences\\\" name=\\\"ResourcesReferences\\\">\\r\\n              <mat-radio-button value=\\\"Keep\\\">\\r\\n                Import links as written in the file (for example /Portals/...)\\r\\n              </mat-radio-button>\\r\\n              <mat-radio-button value=\\\"Resolve\\\">\\r\\n                Try to resolve paths to references\\r\\n              </mat-radio-button>\\r\\n            </mat-radio-group>\\r\\n          </div>\\r\\n\\r\\n          <div>\\r\\n            <p class=\\\"field-label\\\">Clear all other entities</p>\\r\\n            <mat-radio-group [(ngModel)]=\\\"formValues.clearEntities\\\" name=\\\"ClearEntities\\\">\\r\\n              <mat-radio-button value=\\\"None\\\">\\r\\n                Keep all entities not found in import\\r\\n              </mat-radio-button>\\r\\n              <mat-radio-button value=\\\"All\\\">\\r\\n                Remove all entities not found in import\\r\\n              </mat-radio-button>\\r\\n            </mat-radio-group>\\r\\n          </div>\\r\\n\\r\\n          <p class=\\\"hint\\\">Remember to backup your DNN first!</p>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"dialog-form-actions\\\">\\r\\n          <button mat-raised-button (click)=\\\"closeDialog()\\\">Cancel</button>\\r\\n          <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"!formValues.file || !formValues.file.name\\\"\\r\\n            (click)=\\\"evaluateContent()\\\">\\r\\n            Preview Import\\r\\n          </button>\\r\\n        </div>\\r\\n      </form>\\r\\n      <!-- END FORM -->\\r\\n\\r\\n      <!-- WAITING -->\\r\\n      <p *ngSwitchCase=\\\"0\\\" class=\\\"progress-message\\\">Please wait while processing...</p>\\r\\n      <!-- END WAITING -->\\r\\n\\r\\n      <!-- EVALUATION RESULT -->\\r\\n      <ng-container *ngSwitchCase=\\\"2\\\">\\r\\n        <ng-container *ngIf=\\\"data.evaluationResult\\\">\\r\\n          <!-- DETAILS / STATISTICS -->\\r\\n          <div *ngIf=\\\"data.evaluationResult.Success\\\" class=\\\"dialog-component-content fancy-scrollbar-light\\\">\\r\\n            <p class=\\\"evaluation__title\\\">Try to import file '{{ formValues.file.name }}'</p>\\r\\n            <p class=\\\"evaluation__title\\\">File contains:</p>\\r\\n            <ul class=\\\"evaluation__content\\\">\\r\\n              <li>{{ data.evaluationResult.Detail.DocumentElementsCount }} content-items (records/entities)</li>\\r\\n              <li>{{ data.evaluationResult.Detail.LanguagesInDocumentCount }} languages</li>\\r\\n              <li>{{ data.evaluationResult.Detail.AttributeNamesInDocument.length }} columns:\\r\\n                {{ data.evaluationResult.Detail.AttributeNamesInDocument.join(', ') }}</li>\\r\\n            </ul>\\r\\n            <p class=\\\"evaluation__title\\\">If you press Import, it will:</p>\\r\\n            <ul class=\\\"evaluation__content\\\">\\r\\n              <li>Create {{ data.evaluationResult.Detail.AmountOfEntitiesCreated }} content-items</li>\\r\\n              <li>Update {{ data.evaluationResult.Detail.AmountOfEntitiesUpdated }} content-items</li>\\r\\n              <li>Delete {{ data.evaluationResult.Detail.AmountOfEntitiesDeleted }} content-items</li>\\r\\n              <li>Ignore {{ data.evaluationResult.Detail.AttributeNamesNotImported.length }} columns:\\r\\n                {{ data.evaluationResult.Detail.AttributeNamesNotImported.join(', ') }}</li>\\r\\n            </ul>\\r\\n            <p class=\\\"hint\\\">Note: The import validates much data and may take several minutes.</p>\\r\\n          </div>\\r\\n          <!-- END DETAILS / STATISTICS -->\\r\\n          <!-- ERRORS -->\\r\\n          <div *ngIf=\\\"!data.evaluationResult.Success\\\" class=\\\"dialog-component-content fancy-scrollbar-light\\\">\\r\\n            <p class=\\\"evaluation__title\\\">Try to import file '{{ formValues.file.name }}'</p>\\r\\n            <ul class=\\\"evaluation__content\\\">\\r\\n              <li *ngFor=\\\"let error of data.evaluationResult.Errors\\\">\\r\\n                <div>{{ errors[error.ErrorCode] }}</div>\\r\\n                <div *ngIf=\\\"error.ErrorDetail\\\"><i>Details: {{ error.ErrorDetail }}</i></div>\\r\\n                <div *ngIf=\\\"error.LineNumber\\\"><i>Line-no: {{ error.LineNumber }}</i></div>\\r\\n                <div *ngIf=\\\"error.LineDetail\\\"><i>Line-details: {{ error.LineDetail }}</i></div>\\r\\n              </li>\\r\\n            </ul>\\r\\n          </div>\\r\\n          <!-- END ERRORS -->\\r\\n          <div class=\\\"dialog-component-actions\\\">\\r\\n            <button mat-raised-button (click)=\\\"back()\\\">Back</button>\\r\\n            <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"!data.evaluationResult.Success\\\"\\r\\n              (click)=\\\"importContent()\\\">\\r\\n              Import\\r\\n            </button>\\r\\n          </div>\\r\\n        </ng-container>\\r\\n      </ng-container>\\r\\n      <!-- END EVALUATION RESULT -->\\r\\n\\r\\n      <!-- IMPORT RESULT -->\\r\\n      <div *ngSwitchCase=\\\"3\\\">\\r\\n        <div *ngIf=\\\"data.importResult\\\" class=\\\"progress-message\\\">\\r\\n          <p *ngIf=\\\"data.importResult.Success\\\">Import done.</p>\\r\\n          <p *ngIf=\\\"!data.importResult.Success\\\">Import failed.</p>\\r\\n        </div>\\r\\n        <div class=\\\"dialog-component-actions\\\">\\r\\n          <button mat-raised-button color=\\\"accent\\\" (click)=\\\"closeDialog()\\\">Close</button>\\r\\n        </div>\\r\\n      </div>\\r\\n      <!-- END IMPORT RESULT -->\\r\\n    </ng-container>\\r\\n  </ng-container>\\r\\n</div>\\r\\n\";","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { ChangeDetectionStrategy, Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Dictionary } from '../shared/models/dictionary.model';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentImportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentImport;\r\n  private contentType$ = new BehaviorSubject<ContentType>(null);\r\n  private loading$ = new BehaviorSubject(false);\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n  private viewStateSelected$ = new BehaviorSubject<number>(this.viewStates.default);\r\n  private evaluationResult$ = new BehaviorSubject<EvaluateContentResult>(null);\r\n  private importResult$ = new BehaviorSubject<ImportContentResult>(null);\r\n  templateVars$ = combineLatest([\r\n    this.contentType$, this.loading$, this.viewStateSelected$, this.evaluationResult$, this.importResult$,\r\n  ]).pipe(\r\n    map(([contentType, loading, viewStateSelected, evaluationResult, importResult]) =>\r\n      ({ contentType, loading, viewStateSelected, evaluationResult, importResult })),\r\n  );\r\n  errors: Dictionary<string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentImportService: ContentImportService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getDialogSettings();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n    this.viewStateSelected$.complete();\r\n    this.evaluationResult$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected$.next(this.viewStates.default);\r\n    this.evaluationResult$.next(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentImportDialog } from './content-import-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentImportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentImportRoutingModule { }\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentImportComponent } = await import('./content-import.component');\r\n    return ContentImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentImportRoutingModule } from './content-import-routing.module';\r\nimport { ContentImportComponent } from './content-import.component';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentImportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentImportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentImportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentImportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentImportModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings() {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Dictionary } from '../../shared/models/dictionary.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Dictionary<string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}