{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js"],"names":["MatProgressSpinner__svg_circle_1_Template","rf","ctx","ɵngcc0","ctx_r0","_spinnerAnimationLabel","_getStrokeDashOffset","_getStrokeCircumference","_getCircleStrokeWidth","_getCircleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","_c0","BASE_SIZE","BASE_STROKE_WIDTH","MatProgressSpinnerBase","_elementRef","_MatProgressSpinnerMixinBase","mixinColor","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","animationMode","defaults","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","_getSpinnerAnimationLabel","has","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","size","coerceNumberProperty","_styleRoot","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","element","nativeElement","_getShadowRoot","animationClass","classList","add","viewBox","PI","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","ɵfac","MatProgressSpinner_Factory","t","ɵngcc1","DOCUMENT","ANIMATION_MODULE_TYPE","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","MatProgressSpinner_HostBindings","inputs","color","exportAs","features","decls","vars","consts","template","MatProgressSpinner_Template","_getViewBox","directives","ɵngcc2","styles","encapsulation","changeDetection","WeakMap","ctorParameters","ElementRef","Platform","undefined","decorators","Optional","Inject","args","String","propDecorators","Input","ngDevMode","Component","selector","host","ChangeDetectionStrategy","OnPush","ViewEncapsulation","None","MatSpinner","elementRef","document","MatSpinner_Factory","MatSpinner_HostBindings","MatSpinner_Template","MatProgressSpinnerModule","MatProgressSpinnerModule_Factory","ɵmod","ɵinj","imports","MatCommonModule","CommonModule","ngJitMode","declarations","exports","NgModule"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~content-~4a56a0b6.js","sourcesContent":["import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nconst _c0 = \".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\";\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    constructor(_elementRef, platform, _document, animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() { return this._diameter; }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._getStrokeCircumference() * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._getStrokeCircumference() * 0.2;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    // set tab index to -1 so screen readers will read the aria-label\n                    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                    'tabindex': '-1',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); };\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, CommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map"],"sourceRoot":"webpack:///"}