{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js"],"names":["nextId","MatBadgeBase","_MatBadgeMixinBase","mixinDisabled","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_hasContent","_color","_overlap","position","size","_id","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","value","_setColor","val","coerceBooleanProperty","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","setAttribute","removeAttribute","_hidden","indexOf","changes","contentChange","currentValue","trim","length","_updateTextContent","description","removeDescription","destroyNode","_createBadgeElement","textContent","_stringifyContent","createElement","activeClass","contentClass","_clearExistingBadges","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","content","describe","colorPalette","remove","cssClass","element","childCount","children","currentChild","contains","removeChild","ɵfac","MatBadge_Factory","t","ɵngcc0","ɵngcc1","ANIMATION_MODULE_TYPE","ɵdir","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","overlap","isAbove","isAfter","hidden","disabled","inputs","color","features","ctorParameters","NgZone","ElementRef","AriaDescriber","Renderer2","String","decorators","Optional","Inject","args","propDecorators","Input","Directive","selector","host","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵinj","imports","A11yModule","MatCommonModule","ngJitMode","declarations","exports","NgModule"],"mappings":"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","file":"default~app-administration-app-administration-module~content-type-fields-content-type-fields-module~~a0153aaf.js","sourcesContent":["import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {\n}\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeMixinBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /** Whether the badge has any content. */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    ngOnChanges(changes) {\n        const contentChange = changes['content'];\n        if (contentChange) {\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    ngOnDestroy() {\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this._stringifyContent();\n        }\n        return this._badgeElement;\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            const classList = this._elementRef.nativeElement.classList;\n            if (this._color) {\n                classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges(cssClass) {\n        const element = this._elementRef.nativeElement;\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n    /** Gets the string representation of the badge content. */\n    _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        const content = this.content;\n        return content == null ? '' : `${content}`;\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map"],"sourceRoot":"webpack:///"}