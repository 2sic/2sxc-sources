{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js"],"names":["extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","toggleVisibility","styles","position","top","opacity","left","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_dropContainer","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","coerceElement","disabledHandles","add","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","delete","direction","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","body","appendChild","replaceChild","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","_cachedShadowRoot","round","min","max","removeChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","animationFrameScheduler","pipe","takeUntil","_scrollNode","scrollStep","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","draggedItems","filter","every","_cacheItems","connectedTo","slice","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","nativeElement","activeSiblings","_sortFromLastPointerPosition","_startReceiving","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","instance","ɵfac","DragDropRegistry_Factory","t","ɵngcc0","DOCUMENT","ɵprov","ɵɵdefineInjectable","factory","ɵɵinject","NgZone","token","providedIn","ctorParameters","decorators","Inject","args","ngDevMode","Injectable","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","ɵngcc1","ViewportRuler","CDK_DRAG_PARENT","InjectionToken","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","ɵdir","selectors","inputs","exportAs","features","provide","useExisting","propDecorators","Input","Directive","providers","CDK_DRAG_CONFIG","assertElementNode","Error","_uniqueIdCounter","CDK_DROP_LIST","ɵ0","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","id","EventEmitter","_unsortedItems","_dropListRef","createDropList","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_syncItemsWithRef","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","startWith","withDirection","coerceArray","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","coerceNumberProperty","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CdkDropList_Factory","ɵngcc2","hostAttrs","hostVars","hostBindings","CdkDropList_HostBindings","rf","ctx","outputs","useValue","ElementRef","ChangeDetectorRef","ScrollDispatcher","Directionality","Optional","SkipSelf","Output","host","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","TemplateRef","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDragPreview_Factory","DRAG_HOST_CLASS","CdkDrag","_viewContainerRef","_selfHandle","Observable","observer","subscription","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","take","_updateRootElement","changes","tap","childHandleElements","rootElementSelector","withHandles","switchMap","merge","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","boundary","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","_b","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","dirIndex","_t","first","CdkDrag_HostBindings","ViewContainerRef","Self","ContentChildren","descendants","ContentChild","currentElement","matches","msMatchesSelector","DragDropModule","DragDropModule_Factory","ɵmod","ɵinj","imports","CdkScrollableModule","ngJitMode","declarations","exports","NgModule"],"mappings":"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","file":"default~edit-edit-module~manage-content-list-manage-content-list-module.js","sourcesContent":["import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\nfunction toggleVisibility(element, enable) {\n    const styles = element.style;\n    styles.position = enable ? '' : 'fixed';\n    styles.top = styles.opacity = enable ? '' : '0';\n    styles.left = enable ? '' : '-999em';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document, shadowRoot).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef, shadowRoot) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return shadowRoot ||\n        documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n//# sourceMappingURL=drag-drop.js.map"],"sourceRoot":"webpack:///"}