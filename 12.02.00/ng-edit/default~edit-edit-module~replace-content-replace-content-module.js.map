{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"names":["_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵngcc0","formFieldId_r1","id","ctx_r0","_classList","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","mixinDisableRipple","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","Subscription","EMPTY","showPanel","_isOpen","displayWith","optionSelected","EventEmitter","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","value","coerceBooleanProperty","length","coerceStringArray","reduce","classList","className","_setVisibilityClasses","nativeElement","_keyManager","ActiveDescendantKeyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","markForCheck","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵngcc1","ɵdir","type","viewQuery","_MatAutocompleteBase_Query","TemplateRef","_t","template","first","inputs","panelWidth","outputs","features","ctorParameters","ChangeDetectorRef","ElementRef","undefined","decorators","Inject","args","Platform","propDecorators","ViewChild","static","Input","Output","ngDevMode","Directive","MatAutocomplete","arguments","MatAutocomplete_Factory","ɵMatAutocomplete_BaseFactory","ɵcmp","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","MAT_OPTGROUP","MatOption","optionGroups","hostAttrs","disableRipple","exportAs","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","directives","ɵngcc2","styles","encapsulation","changeDetection","ContentChildren","descendants","Component","selector","ViewEncapsulation","None","ChangeDetectionStrategy","OnPush","host","providers","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","MatAutocompleteOrigin_Factory","ɵMatAutocompleteOrigin_BaseFactory","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","Subject","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","defer","autocomplete","merge","map","onSelectionChange","onStable","pipe","take","switchMap","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","tabOut","filter","_getOutsideClickStream","detachments","of","MatOptionSelectionChange","activeItem","fromEvent","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","ESCAPE","hasModifierKey","preventDefault","activeOption","ENTER","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","UP_ARROW","DOWN_ARROW","TAB","onKeydown","_canOpen","openPanel","_scrollToOption","activeItemIndex","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","firstStable","optionChanges","tap","reapplyLastPosition","delay","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","_a","_getShadowRoot","overlayRef","_portal","TemplatePortal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","OverlayConfig","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_countGroupLabelsBeforeOption","_setScrollTop","_getHostElement","newScrollPosition","_getOptionScrollPosition","offsetTop","offsetHeight","_getScrollTop","_MatAutocompleteTriggerBase_Factory","ɵngcc3","ɵngcc4","MAT_FORM_FIELD","DOCUMENT","ɵngcc5","autocompleteDisabled","ViewContainerRef","NgZone","Directionality","Optional","MatFormField","Host","ViewportRuler","ɵngcc6","MatAutocompleteTrigger_Factory","ɵMatAutocompleteTrigger_BaseFactory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","MatAutocompleteTrigger_focusin_HostBindingHandler","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵinj","imports","OverlayModule","MatOptionModule","MatCommonModule","CommonModule","CdkScrollableModule","ngJitMode","declarations","exports","NgModule"],"mappings":"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","file":"default~edit-edit-module~replace-content-replace-content-module.js","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 3);\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return ɵMatAutocomplete_BaseFactory(t || MatAutocomplete); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, directives: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\nconst ɵMatAutocomplete_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n            }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return ɵMatAutocompleteOrigin_BaseFactory(t || MatAutocompleteOrigin); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteOrigin_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return ɵMatAutocompleteTrigger_BaseFactory(t || MatAutocompleteTrigger); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteTrigger_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule\n        ], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map"],"sourceRoot":"webpack:///"}